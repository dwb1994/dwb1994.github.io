{"data":{"site":{"siteMetadata":{"title":"dwb-blog","author":"dwb"}},"markdownRemark":{"id":"068cee92-06ee-5c9d-befa-0ea799ded7d8","html":"<p>前段时间我读了 redux 的源码，redux 的源码很简洁，但质量很高，非常值得一读。如果你已经了解了 redux 的基本使用，想深入了解一下的话，可以看一下本文帮助理解。</p>\n<h2>一、简介</h2>\n<p>redux 核心 API 很少，只有 5 个 exports 和一个 store API：</p>\n<ul>\n<li><a href=\"https://redux.js.org/api/createstore\">createStore(reducer, [preloadedState], [enhancer])</a></li>\n<li><a href=\"https://redux.js.org/api/combinereducers\">combineReducers(reducers)</a></li>\n<li><a href=\"https://redux.js.org/api/applymiddleware\">applyMiddleware(…middlewares)</a></li>\n<li><a href=\"https://redux.js.org/api/bindactioncreators\">bindActionCreators(actionCreators, dispatch)</a></li>\n<li><a href=\"https://redux.js.org/api/compose\">compose(…functions)</a></li>\n</ul>\n<p><a href=\"https://redux.js.org/api/store\">Store</a></p>\n<ul>\n<li><a href=\"https://redux.js.org/api/store#getState\">getState()</a></li>\n<li><a href=\"https://redux.js.org/api/store#dispatch\">dispatch(action)</a></li>\n<li><a href=\"https://redux.js.org/api/store#subscribe\">subscribe(listener)</a></li>\n<li><a href=\"https://redux.js.org/api/store#replaceReducer\">replaceReducer(nextReducer)</a></li>\n</ul>\n<h2>二、各个 API 实现原理</h2>\n<h3>1. store API 与 createStore</h3>\n<p>store 是 Redux 最核心的概念，按照 Redux 的设计理念，一个应用应该只存在一个 store.</p>\n<p>store 存储了整个应用的状态树，dispatch action 是修改 store 的唯一方式, 通过 createStore 这个函数来创建 store.</p>\n<p>核心代码如下：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">function</span> <span class=\"token function\">createStore</span><span class=\"token punctuation\">(</span>reducer<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 使用一个变量存储状态树</span>\n    <span class=\"token keyword\">let</span> state<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 使用一个数组来存储当前的监听器, 监听器是一个函数</span>\n    <span class=\"token keyword\">let</span> listeners <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// 获取 store 中存储的状态树</span>\n    <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">getState</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> state<span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// dispatch 是修改 store 的唯一方式, </span>\n    <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">dispatch</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>action<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// 调用 reducer 生成新的状态树</span>\n        state <span class=\"token operator\">=</span> <span class=\"token function\">reducer</span><span class=\"token punctuation\">(</span>state<span class=\"token punctuation\">,</span> action<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// \"依次\"执行listeners 数组中存储的监听器</span>\n        listeners<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span>listener <span class=\"token operator\">=></span> <span class=\"token function\">listener</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// 设置监听函数, state 变化时执行</span>\n    <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">subscribe</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>listener<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// 每设置一个监听函数, 就向 listeners 数组中添加一个监听器</span>\n        listeners<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>listener<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n            <span class=\"token comment\">// subscribe 函数返回一个 unsubscribe 方法, 用于卸载监听函数, 即从 listeners 数组中移除</span>\n            listeners <span class=\"token operator\">=</span> listeners<span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span>l <span class=\"token operator\">=></span> l <span class=\"token operator\">!==</span> listener<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// 使用 createStore 创建 store 时, 调用 dispatch 来初始化 state &amp; listeners</span>\n    <span class=\"token function\">dispatch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span> dispatch<span class=\"token punctuation\">,</span> subscribe<span class=\"token punctuation\">,</span> getState <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3>2. combineReducers</h3>\n<p>当应用复杂起来时，状态树会非常庞大，combineReducers 函数用于 Reducer 的拆分，提高代码可读性</p>\n<p>核心代码如下：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// 传入的 reducers 是个对象，包含若干 reducer</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">combineReducers</span> <span class=\"token operator\">=</span> reducers <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// combineReducers 最终返回一个总的 reducer</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> action<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// 从传入的 reducers 对象中取出 key 组成数组迭代</span>\n        <span class=\"token keyword\">return</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">keys</span><span class=\"token punctuation\">(</span>reducers<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">reduce</span><span class=\"token punctuation\">(</span>\n            <span class=\"token punctuation\">(</span>nextState<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n                <span class=\"token comment\">// 执行每个 reducers 以组成总的 reducer</span>\n                nextState<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> reducers<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span>state<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> action<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">return</span> nextState<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 第一个函数是一个回调函数，函数执行在数组中每个值</span>\n            <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span> <span class=\"token comment\">// 第二个参数为初始值</span>\n        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h3>3. applyMiddleware</h3>\n<p>中间件就是一个函数，参数是一个函数数组，对 store.dispatch 方法进行了改造，发出 Action 后，执行中间件，中间件处理完毕后，执行 Reducer 改变状态树。</p>\n<p>核心代码如下：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">function</span> <span class=\"token function\">applyMiddleware</span><span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>middlewares<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 第一次调用 applyMiddleware 返回的是一个函数，返回的函数再返回一个增强的 createStore 函数</span>\n    <span class=\"token comment\">// 如何实现增强的？见下一个代码片段</span>\n    <span class=\"token keyword\">return</span> createStore <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>args<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">const</span> store <span class=\"token operator\">=</span> <span class=\"token function\">createStore</span><span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 中间件内部可以调用 getState 与 dispatch</span>\n        <span class=\"token keyword\">const</span> middlewareAPI <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n            getState<span class=\"token punctuation\">:</span> store<span class=\"token punctuation\">.</span>getState<span class=\"token punctuation\">,</span>\n            dispatch<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>args<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">dispatch</span><span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>args<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token comment\">// 中间件组成一个数组(chain)</span>\n        <span class=\"token keyword\">const</span> chain <span class=\"token operator\">=</span> middlewares<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span>middleware <span class=\"token operator\">=></span> <span class=\"token function\">middleware</span><span class=\"token punctuation\">(</span>middlewareAPI<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 该数组嵌套执行 (使用了 compose 后面会讲)，用于增强 dispatch</span>\n        dispatch <span class=\"token operator\">=</span> <span class=\"token function\">compose</span><span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>chain<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>store<span class=\"token punctuation\">.</span>dispatch<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 返回 store 的 api 和增强的 dispatch</span>\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span> <span class=\"token operator\">...</span>store<span class=\"token punctuation\">,</span> dispatch <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>applyMiddleware 即 enhancer，createStore 函数会首先判断是否有第三个参数 enhancer(即 applyMiddleware)，如果有的话调用 enhancer 来递归自己(前两个参数不变)，实现增强自己的效果。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">function</span> <span class=\"token function\">createStore</span><span class=\"token punctuation\">(</span>reducer<span class=\"token punctuation\">,</span> preloadedState<span class=\"token punctuation\">,</span> enhancer<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 健壮性判断</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> enhancer <span class=\"token operator\">!==</span> <span class=\"token string\">'undefined'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> enhancer <span class=\"token operator\">!==</span> <span class=\"token string\">'function'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Expected the enhancer to be a function.'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token comment\">// enhancer 执行后返回增强后的 createStore，再次执行传入前两个参数不变</span>\n        <span class=\"token keyword\">return</span> <span class=\"token function\">enhancer</span><span class=\"token punctuation\">(</span>createStore<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>reducer<span class=\"token punctuation\">,</span> preloadedState<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>使用 compose 来实现函数数组的嵌套执行，嵌套的函数会依次执行，这样做的好处是：方便编写插件。</p>\n<p>核心代码只是一个 reduce 函数：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// compose 接收一个函数数组 返回嵌套执行的结果</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">function</span> <span class=\"token function\">compose</span><span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>funcs<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> funcs<span class=\"token punctuation\">.</span><span class=\"token function\">reduce</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>args<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">a</span><span class=\"token punctuation\">(</span><span class=\"token function\">b</span><span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>虽然只有一行，但是这行代码很重要，funcs.reduce 传入的函数返回的也是个函数，返回的函数将迭代的两个数组项组合成一个新的函数，这么说比较抽象，举个例子：</p>\n<p>compose(functionA, functionB, functionC) 最终会返回 functionA( functionB( functionC(…args) ) ), 即执行顺序为 C > B > A . args 即 middlewareAPI</p>\n<h3>4. bindActionCreators</h3>\n<p>这是一个不常用的方法，将若干 actionCreator 转换成拥有同名 key 值的对象返回，返回的对象的每个属性都是一个函数，调用这些函数即可触发 dispatch</p>\n<p>核心代码如下：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// 工具方法</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">bindActionCreator</span><span class=\"token punctuation\">(</span>actionCreator<span class=\"token punctuation\">,</span> dispatch<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token function\">dispatch</span><span class=\"token punctuation\">(</span>actionCreator<span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> arguments<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">function</span> <span class=\"token function\">bindActionCreators</span><span class=\"token punctuation\">(</span>actionCreators<span class=\"token punctuation\">,</span> dispatch<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 健壮性处理: actionCreators 只传入一个函数</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> actionCreators <span class=\"token operator\">===</span> <span class=\"token string\">'function'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token function\">bindActionCreator</span><span class=\"token punctuation\">(</span>actionCreators<span class=\"token punctuation\">,</span> dispatch<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    \n    <span class=\"token comment\">// 绑定后的 actions 对象</span>\n    <span class=\"token keyword\">const</span> boundActionCreators <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> key <span class=\"token keyword\">in</span> actionCreators<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">const</span> actionCreator <span class=\"token operator\">=</span> actionCreators<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> actionCreator <span class=\"token operator\">===</span> <span class=\"token string\">'function'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token comment\">// 每个属性都是一个绑定了 action 的函数, 直接调用相当于触发 dispatch</span>\n            boundActionCreators<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">bindActionCreator</span><span class=\"token punctuation\">(</span>actionCreator<span class=\"token punctuation\">,</span> dispatch<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> boundActionCreators<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2>三、感悟</h2>\n<p>Redux 的代码，给人一种优雅的感觉，个人感觉它出色之处：</p>\n<ol>\n<li>开发体验好：API 简洁明了，容易上手，属于小而美的类型；配合 DevTools 提高开发效率</li>\n<li>插件丰富：一个灵活好用的插件系统可以使得程序主体尽可能简洁的同时拥有丰富强大的扩展性，这也是 Redux 引以为傲的一点：强大的插件生态，常用的插件都能很方便地找到</li>\n<li>文档完整：由浅入深，循循善诱。除了基本的使用说明，还阐述了它的设计思想，与其说 Redux 是个工具，不如说是一种设计思想</li>\n</ol>","frontmatter":{"title":"redux 源码分析","date":"April 27, 2019"},"excerpt":"前段时间我读了 redux 的源码，redux 的源码很简洁，但质量很高，非常值得一读。如果你已经了解了 redux 的基本使用，想深入了解一下的话，可以看一下本文帮助理解。 一、简介 redux 核心 API 很少，只有 5 个 exports 和一个 store API： createStore(reducer, [preloadedState], [enhancer]) combineReducers(reducers) applyMiddleware(…middlewares) bindActionCreators(actionCreators, dispatch) compose…"}},"pageContext":{"slug":"/blog/redux-source-code/","previous":{"fields":{"slug":"/blog/improve-web-legibility/"},"frontmatter":{"title":"提高网页设计里文本的易读性","type":"blog","photos":["https://ww1.sinaimg.cn/large/006oPFLAly1fvkzqj4gqnj31hc0zkn3e.jpg"],"tags":["design"],"process":null}},"next":{"fields":{"slug":"/reading/js-classic/"},"frontmatter":{"title":"JavaScript 高级程序设计","type":"reading","photos":null,"tags":["JS"],"process":[100,100]}}}}