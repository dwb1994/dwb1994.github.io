{"data":{"site":{"siteMetadata":{"title":"dwb-blog","author":"dwb"}},"markdownRemark":{"id":"6278f1dc-956b-5097-b9ef-590039eb24d0","html":"<p>首先感谢这篇文章：<a href=\"https://segmentfault.com/a/1190000004044592\">React组件之间如何交流</a></p>\n<p>在最近的实习中，我使用react(es6)进行项目开发，在项目里收获了一些经验。</p>\n<p>由于上面文章是es5写的，我在此基础上提炼一下，使用es6，结合自己项目里的思考，在这里记录一下：</p>\n<p>React将视图抽象为一个个组件，每个组件都有一个state，记录组件的状态。当状态发生改变的时候，react内部执行diff判断组件是否需要更新，若需要更新则重新渲染。</p>\n<p>组件之间的交流分为三类：</p>\n<h2>一、父组件向子组件传值：</h2>\n<p>通过props传值，父组件将需要传的值写在子组件的属性值里，子组件通过props可以访问到这个值。</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Father</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n            value<span class=\"token punctuation\">:</span> <span class=\"token string\">'father\\'s value'</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n            <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n                father<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">}</span>\n                <span class=\"token operator\">&lt;</span>Child value<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n            <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n        <span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Child</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n            <span class=\"token operator\">&lt;</span>p<span class=\"token operator\">></span>child<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>p<span class=\"token operator\">></span>\n        <span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2>二、子组件向父组件传值：</h2>\n<p>以回调函数的形式影响父组件。父组件将组件内自定义的回调函数的引用以属性的形式传给子组件，子组件内部可以通过props访问到这个函数，子组件在逻辑完成后调用这个回调函数即可执行父组件内部的函数。</p>\n<p>注意：这里有个坑，组件内自定义的函数无法直接取到this的引用，需要用bind将this传进去，或者使用es6的箭头函数，个人认为后者更容易一些。（如下面Child组件的onCheckboxChange方法）</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">MyContainer</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Component</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n            checked<span class=\"token punctuation\">:</span> <span class=\"token boolean\">false</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token function-variable function\">onChildChanged</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>newState<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n            checked<span class=\"token punctuation\">:</span> newState\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n            <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>点击状态<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span><span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>checked<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n            <span class=\"token operator\">&lt;</span>Child callbackParent<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>onChildChanged<span class=\"token punctuation\">}</span>\n            initialChecked <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>checked<span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n            <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n        <span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Child</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Component</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function-variable function\">onCheckboxChange</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">let</span> newState <span class=\"token operator\">=</span> <span class=\"token operator\">!</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>initialChecked<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span><span class=\"token function\">callbackParent</span><span class=\"token punctuation\">(</span>newState<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n            <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n                <span class=\"token operator\">&lt;</span>label<span class=\"token operator\">></span>请点击<span class=\"token punctuation\">:</span> <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>label<span class=\"token operator\">></span>\n                <span class=\"token operator\">&lt;</span>input type<span class=\"token operator\">=</span><span class=\"token string\">\"checkbox\"</span>\n                checked<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>initialChecked<span class=\"token punctuation\">}</span>\n                onChange<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>onCheckboxChange<span class=\"token punctuation\">}</span>\n                <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n            <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n        <span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2>三、组件之间传值：</h2>\n<p>这里我为了实现一个需求，企图通过用一个input输入框记录一个组件的值，通过这个输入框的onchange事件将change之后的值传给另一个组件，实现组件间的交流。实际上这样不可行，抛开写法混乱、违背了react数据单向流动的初衷不谈，本身是不可行的，<strong>onchange监听不到脚本引起的value值的改变</strong>。</p>\n<p>通过网上查阅资料及咨询同事，我将需要传值的两个组件包含在同一个父组件之中，将传的值以state的形式存储于顶级组件中，通过一个组件调用回调函数影响顶级组件的state，再通过props来影响另一个子组件的渲染。</p>\n<p>也可以使用refs，设置子组件的ref值，通过父组件的refs访问到子组件的自定义方法(回调函数)从而执行子组件的方法。</p>\n<p>除了上述的行为外，两个不属于同一父组件的组件应该也可能有通信的需求，在上面的文章里有涉及，感兴趣的同学可以看一看。由于项目中没遇到，我就不在这里总结了。</p>","frontmatter":{"title":"React组件之间如何交流(ES6)","date":"December 11, 2016"},"excerpt":"首先感谢这篇文章： React组件之间如何交流 在最近的实习中，我使用react(es6)进行项目开发，在项目里收获了一些经验。 由于上面文章是es5写的，我在此基础上提炼一下，使用es6，结合自己项目里的思考，在这里记录一下： React将视图抽象为一个个组件，每个组件都有一个state，记录组件的状态。当状态发生改变的时候，react内部执行diff判断组件是否需要更新，若需要更新则重新渲染。 组件之间的交流分为三类： 一、父组件向子组件传值： 通过props传值，父组件将需要传的值写在子组件的属性值里，子组件通过props…"}},"pageContext":{"slug":"/blog/react-component/","previous":{"fields":{"slug":"/blog/flexible/"},"frontmatter":{"title":"手淘flexible.js分析","type":"blog","photos":["http://orqz380f2.bkt.clouddn.com/app.jpg"],"tags":["Mobile"],"process":null}},"next":{"fields":{"slug":"/blog/300ms-optimize-mobile/"},"frontmatter":{"title":"移动端300ms延迟解决方案及其优化","type":"blog","photos":["http://orqz380f2.bkt.clouddn.com/mobile1.jpg"],"tags":["性能优化","Mobile"],"process":null}}}}