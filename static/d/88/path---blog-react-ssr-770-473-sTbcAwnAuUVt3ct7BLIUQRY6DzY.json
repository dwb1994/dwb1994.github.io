{"data":{"site":{"siteMetadata":{"title":"dwb-blog","author":"dwb"}},"markdownRemark":{"id":"d1996268-87cd-5462-9912-54dc736a8aad","html":"<h3>一、什么是服务端渲染：</h3>\n<p>服务端渲染（SSR）区别于客户端渲染（CSR），当用户访问一个网址的时候，客户端渲染则是服务端返回一部分 HTML 结构，通过执行 JavaScript 将余下的 HTML 渲染到页面上，而服务端渲染则是在服务端生成完整的 HTML 结构返回给浏览器。\n以 React 为例：在客户端渲染时一般 html 的 body 中只有一个 id 为 root 的标签，页面在浏览器上渲染出来后，通过执行 JavaScript 将页面内容插入到这个标签中。而服务端渲染则在服务器端将页面内容插入到这个标签中，返回给浏览器的时候就已经有完整的页面结构了。</p>\n<p>由此我们可以看到服务端渲染具有如下优势：</p>\n<ol>\n<li>首屏渲染快：返回的 html 是完整的，不需要再发其他请求来不断地向页面填充内容，也不会在渲染过程中产生白屏或抖动，用户体验会好很多</li>\n<li>有利于 SEO：React 客户端渲染页面中只有一个 root 标签，搜索引擎很难爬取页面内容，而服务端渲染能给搜索引擎更多的数据，因此能获得更高的权重和排名</li>\n</ol>\n<p>服务端渲染的这些优势，伴随着一定的代价：</p>\n<ol>\n<li>项目架构变得复杂，维护成本提高：客户端渲染时前端工程师只关注 JS，而做服务端渲染的话，则不仅需要关注同构部分的代码，还要关注 Node 服务端的代码；不仅要保证同构代码的正常运行，还要保证 Node 服务稳定。前端的 Node 服务部署上去之后，需要付出时间精力来进行服务器的运维</li>\n<li></li>\n</ol>\n<h3>二、什么是同构：</h3>\n<h3>二、怎样实现？</h3>\n<p>架构图</p>\n<h3>有哪些操作细节？</h3>\n<ol>\n<li>webpack 打包环境区分</li>\n<li>数据脱水和注水</li>\n<li>请求认证</li>\n<li>样式打包</li>\n<li>meta tags 渲染</li>\n<li>403、404 处理</li>\n<li>安全问题</li>\n<li>性能优化</li>\n</ol>","frontmatter":{"title":"浅谈 React 服务端渲染与同构","date":"May 28, 2020"},"excerpt":"一、什么是服务端渲染： 服务端渲染（SSR）区别于客户端渲染（CSR），当用户访问一个网址的时候，客户端渲染则是服务端返回一部分 HTML 结构，通过执行 JavaScript 将余下的 HTML 渲染到页面上，而服务端渲染则是在服务端生成完整的 HTML 结构返回给浏览器。\n以 React 为例：在客户端渲染时一般 html 的 body 中只有一个 id 为 root 的标签，页面在浏览器上渲染出来后，通过执行 JavaScript…"}},"pageContext":{"slug":"/blog/react-ssr/","previous":{"fields":{"slug":"/reading/2019-07-25-js-you-dont-know-1/"},"frontmatter":{"title":"你不知道的 JavaScript (上)","type":"reading","photos":null,"tags":["JS"],"process":[100,100]}},"next":{"fields":{"slug":"/about/"},"frontmatter":{"title":"","type":"other","photos":null,"tags":null,"process":null}}}}