{"data":{"site":{"siteMetadata":{"title":"dwb-blog"}},"allMarkdownRemark":{"edges":[{"node":{"excerpt":"…","fields":{"slug":"/blog/improve-web-legibility/"},"frontmatter":{"date":"24 September, 2018","title":"提高网页设计里文本的易读性","type":"blog","photos":["https://ww1.sinaimg.cn/large/006oPFLAly1fvkzqj4gqnj31hc0zkn3e.jpg"],"tags":["design"]}}},{"node":{"excerpt":"使用 React 管理你的设计资产 前言 最近在整理设计规范的过程中，尝试使用了 Airbnb 公司发布的  react-sketchapp  工具，感觉非常好用，在这里墙裂推荐一哈，顺便聊一聊使用过程中的体会： 这是一个使用 React 生成 Sketch 文件的命令行工具，主要用于生成设计系统(design system)，**简单来说就是使用   生成   **。这个跨界的工具提供了一种很新颖的思路，在某些特定情况下有其应用场景。 设计师同学们可能不了解 React…","fields":{"slug":"/blog/react-sketchapp-build-design-system/"},"frontmatter":{"date":"15 April, 2018","title":"使用 React 管理你的设计资产","type":"blog","photos":["https://ws1.sinaimg.cn/large/006oPFLAly1fqqby6sujqj31hc0sg7ei.jpg"],"tags":["design","规范","团队协作"]}}},{"node":{"excerpt":"Ant Design 色板生成算法演进之路 前言 最近我在整理一套团队内部使用的设计规范，其中颜色部分参考了 Ant Design 的  “色彩”  部分，恰逢 Ant Design 发布了 3.0 版本，调色板做了调整，借此机会我学习了一下 Ant Design 迄今为止三个版本色板生成算法的源码，感觉其“确定”设计思想非常值得学习。 “确定” 作为 Ant Design 的设计理念之一，在调色板这一隅发挥得淋漓尽致：用科学定义设计，在设计有迹可循的同时提高了代码的可维护性，减少开发阶段样式代码的不确定性。 Ant Design…","fields":{"slug":"/blog/ant-design-palettes/"},"frontmatter":{"date":"25 December, 2017","title":"Ant Design 色板生成算法演进之路","type":"blog","photos":["https://ws1.sinaimg.cn/large/006oPFLAly1fmsct1vx9vj31hc0zf7ri.jpg"],"tags":["design","规范","团队协作"]}}},{"node":{"excerpt":"…","fields":{"slug":"/blog/第二届前端体验大会/"},"frontmatter":{"date":"17 December, 2017","title":"第二届前端体验大会","type":"blog","photos":["https://ws1.sinaimg.cn/large/006oPFLAly1fmpec5k5fvj31hc0u27v4.jpg"],"tags":["design","规范","团队协作"]}}},{"node":{"excerpt":"一、背景 近些年来前端的 UI 框架越来越多，其中不乏优质的作品如 Bootstrap 提供一套基础的 UI 组件库供用户(主要是开发者)使用，使用成熟的组件库可大大提高开发效率。随着用户对产品质量要求的提高，往往需要个性化定制组件库的样式，因此这些组件库往往设计得足够基础，但不够美观。在个性化定制之路上，每位设计师都有不尽相同的想法，使得设计风格不统一，随着设计成员更迭，设计风格将难以持续维护。 后来出现的 Material Design 与 Ant Design…","fields":{"slug":"/blog/MaterialDesignAntDesign/"},"frontmatter":{"date":"07 October, 2017","title":"漫谈 Material Design & Ant Design","type":"blog","photos":["https://ws1.sinaimg.cn/large/006cGJIjly1fkb4dt55tmj31hc0rttaj.jpg"],"tags":["design","规范","团队协作"]}}},{"node":{"excerpt":"零、前言 最近帮公司团队整理了一套 git commit message 的规范，遵循这种规范可以使团队在git上清晰地看到每次提交是什么类型的内容，便于追踪提交记录。 以下是规范的内容和在项目中配置commit message格式验证的脚本： 一、Message格式 二、描述 type Tables Are feat 新功能 (feature) fix 修复问题 docs 修改文档/注释等 (documentation) refactor 对原提交的修改或重构（理论上不影响现有功能） chore 修改构建工具/依赖等 refactor 对原提交的修改或重构（理论上不影响现有功能） opti…","fields":{"slug":"/blog/Git-Commit-Message/"},"frontmatter":{"date":"14 June, 2017","title":"Git Commit Message规范","type":"blog","photos":["http://orqz380f2.bkt.clouddn.com/teamwork.jpg"],"tags":["Git","规范","团队协作"]}}},{"node":{"excerpt":"大讲堂App视觉稿地址 一、背景 前段时间在公司实习培训，做一个项目，使用React Native开发一个新的在线学习APP，时间比较紧(4人开发 每人9天的时间)，如何在较短的时间内开发成熟可用、易于维护、简洁美观的APP…","fields":{"slug":"/blog/sketch-design/"},"frontmatter":{"date":"09 April, 2017","title":"使用Sketch制作APP视觉设计稿","type":"blog","photos":["http://orqz380f2.bkt.clouddn.com/office-583841_1920.jpg"],"tags":["Sketch","Design","UI","Mobile","React-Native","团队协作"]}}},{"node":{"excerpt":"移动端的click事件存在300ms延迟，这是为“双击放大”的效果提供一个反应时间，即300ms内双击屏幕放大页面，两次点击间隔超过300ms时不放大页面。 但是这种效果的体验不好，在不需要用户双击放大的时候，click事件会在300ms后执行，给用户一种反应迟钝的感觉，那么如何消除这300ms延迟的影响呢？ 方案一 设置viewport的user-scalable：no，禁止用户手动缩放页面，则使用click事件不会产生延迟。 但是这样设置页面就无法缩放了，有时这个功能还是有必要存在的。 方案二 首先分析一下：HTML5中新增了移动端的触摸事件，我们可以用其中的touchstart…","fields":{"slug":"/blog/300ms-optimize-mobile/"},"frontmatter":{"date":"01 February, 2017","title":"移动端300ms延迟解决方案及其优化","type":"blog","photos":["http://orqz380f2.bkt.clouddn.com/mobile1.jpg"],"tags":["性能优化","Mobile"]}}},{"node":{"excerpt":"首先感谢这篇文章： React组件之间如何交流 在最近的实习中，我使用react(es6)进行项目开发，在项目里收获了一些经验。 由于上面文章是es5写的，我在此基础上提炼一下，使用es6，结合自己项目里的思考，在这里记录一下： React将视图抽象为一个个组件，每个组件都有一个state，记录组件的状态。当状态发生改变的时候，react内部执行diff判断组件是否需要更新，若需要更新则重新渲染。 组件之间的交流分为三类： 一、父组件向子组件传值： 通过props传值，父组件将需要传的值写在子组件的属性值里，子组件通过props…","fields":{"slug":"/blog/react-component/"},"frontmatter":{"date":"11 December, 2016","title":"React组件之间如何交流(ES6)","type":"blog","photos":["http://orqz380f2.bkt.clouddn.com/phone-499991_1920.jpg"],"tags":["React"]}}},{"node":{"excerpt":"flexible是手淘移动端自适应的方案，github地址：\n https://github.com/amfe/lib-flexible \nflexible.js源码：\n https://github.com/amfe/lib-flexible/blob/master/src/flexible.js 在网易实习的时候主要开发的项目是网易有钱h5项目，一直在用flexible做移动端自适应。在开发中我查看了flexible的源码，结合项目里遇到的一些坑，在这里总结一下这个框架的优缺点。 一、源码结构 1.meta名称为viewport的标签设置了scale时，将根据scale手动设置dpr…","fields":{"slug":"/blog/flexible/"},"frontmatter":{"date":"05 October, 2016","title":"手淘flexible.js分析","type":"blog","photos":["http://orqz380f2.bkt.clouddn.com/app.jpg"],"tags":["Mobile"]}}}]}},"pageContext":{"limit":10,"skip":0,"numPages":2,"currentPage":1}}