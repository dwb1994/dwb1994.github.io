{"data":{"site":{"siteMetadata":{"title":"dwb-blog","author":"dwb"}},"markdownRemark":{"id":"ff6b6f97-e11e-5a56-8546-3b139235be0c","html":"<p>前段时间我读了 redux 的源码，redux 的源码很简洁，但质量很高，非常值得一读。如果你已经了解了 redux 的基本使用，想深入了解一下的话，可以看一下本文帮助理解。</p>\n<h2>一、简介</h2>\n<p>redux 核心 API 很少，只有 5 个 exports 和一个 store API：</p>\n<ul>\n<li><a href=\"https://redux.js.org/api/createstore\">createStore(reducer, [preloadedState], [enhancer])</a></li>\n<li><a href=\"https://redux.js.org/api/combinereducers\">combineReducers(reducers)</a></li>\n<li><a href=\"https://redux.js.org/api/applymiddleware\">applyMiddleware(…middlewares)</a></li>\n<li><a href=\"https://redux.js.org/api/bindactioncreators\">bindActionCreators(actionCreators, dispatch)</a></li>\n<li><a href=\"https://redux.js.org/api/compose\">compose(…functions)</a></li>\n</ul>\n<p><a href=\"https://redux.js.org/api/store\">Store</a></p>\n<ul>\n<li><a href=\"https://redux.js.org/api/store#getState\">getState()</a></li>\n<li><a href=\"https://redux.js.org/api/store#dispatch\">dispatch(action)</a></li>\n<li><a href=\"https://redux.js.org/api/store#subscribe\">subscribe(listener)</a></li>\n<li><a href=\"https://redux.js.org/api/store#replaceReducer\">replaceReducer(nextReducer)</a></li>\n</ul>\n<h2>二、各个 API 实现原理</h2>\n<h3>1. store API 与 createStore</h3>\n<p>store 是 Redux 最核心的概念，按照 Redux 的设计理念，一个应用应该只存在一个 store.</p>\n<p>store 存储了整个应用的状态树，dispatch action 是修改 store 的唯一方式, 通过 createStore 这个函数来创建 store.</p>\n<p>核心代码如下：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">function</span> <span class=\"token function\">createStore</span><span class=\"token punctuation\">(</span>reducer<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 使用一个变量存储状态树</span>\n    <span class=\"token keyword\">let</span> state<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 使用一个数组来存储当前的监听器, 监听器是一个函数</span>\n    <span class=\"token keyword\">let</span> listeners <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// 获取 store 中存储的状态树</span>\n    <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">getState</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> state<span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// dispatch 是修改 store 的唯一方式, </span>\n    <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">dispatch</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>action<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// 调用 reducer 生成新的状态树</span>\n        state <span class=\"token operator\">=</span> <span class=\"token function\">reducer</span><span class=\"token punctuation\">(</span>state<span class=\"token punctuation\">,</span> action<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// \"依次\"执行listeners 数组中存储的监听器</span>\n        listeners<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span>listener <span class=\"token operator\">=></span> <span class=\"token function\">listener</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// 设置监听函数, state 变化时执行</span>\n    <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">subscribe</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>listener<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// 每设置一个监听函数, 就向 listeners 数组中添加一个监听器</span>\n        listeners<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>listener<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n            <span class=\"token comment\">// subscribe 函数返回一个 unsubscribe 方法, 用于卸载监听函数, 即从 listeners 数组中移除</span>\n            listeners <span class=\"token operator\">=</span> listeners<span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span>l <span class=\"token operator\">=></span> l <span class=\"token operator\">!==</span> listener<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// 使用 createStore 创建 store 时, 调用 dispatch 来初始化 state &amp; listeners</span>\n    <span class=\"token function\">dispatch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span> dispatch<span class=\"token punctuation\">,</span> subscribe<span class=\"token punctuation\">,</span> getState <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","frontmatter":{"title":"redux 源码分析","date":"April 27, 2019"},"excerpt":"前段时间我读了 redux 的源码，redux 的源码很简洁，但质量很高，非常值得一读。如果你已经了解了 redux 的基本使用，想深入了解一下的话，可以看一下本文帮助理解。 一、简介 redux 核心 API 很少，只有 5 个 exports 和一个 store API： createStore(reducer, [preloadedState], [enhancer]) combineReducers(reducers) applyMiddleware(…middlewares) bindActionCreators(actionCreators, dispatch) compose…"}},"pageContext":{"slug":"/blog/redux-source-code/","previous":{"fields":{"slug":"/blog/improve-web-legibility/"},"frontmatter":{"title":"提高网页设计里文本的易读性","type":"blog","photos":["https://ww1.sinaimg.cn/large/006oPFLAly1fvkzqj4gqnj31hc0zkn3e.jpg"],"tags":["design"]}},"next":{"fields":{"slug":"/about/"},"frontmatter":{"title":"","type":"other","photos":null,"tags":null}}}}