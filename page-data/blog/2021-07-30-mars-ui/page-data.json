{"componentChunkName":"component---src-templates-blog-post-js","path":"/blog/2021-07-30-mars-ui/","result":{"data":{"site":{"siteMetadata":{"title":"dwb-blog","author":"dwb"}},"markdownRemark":{"id":"f2de786b-b766-5c4b-ac09-1c2535584c08","html":"<h2>一、什么是服务端渲染：</h2>\n<p>服务端渲染（SSR）区别于客户端渲染（CSR），当用户访问一个网址的时候，客户端渲染是服务端返回一部分 HTML 结构，通过执行 JavaScript 将余下的 HTML 渲染到页面上，而服务端渲染则是在服务端生成完整的 HTML 结构返回给浏览器。\n以 React 为例：在客户端渲染时一般 html 的 body 中只有一个 id 为 root 的标签，页面在浏览器上渲染出来后，通过执行 JavaScript 将页面内容插入到这个标签中。而服务端渲染则在服务器端将页面内容插入到这个标签中，返回给浏览器的时候就已经有完整的页面结构了。</p>\n<p>由此我们可以看到服务端渲染具有如下优势：</p>\n<ol>\n<li>首屏渲染快：返回的 html 是完整的，不需要再发其他请求来不断地向页面填充内容，也不会在渲染过程中产生白屏或抖动，用户体验会好很多</li>\n<li>有利于 SEO：React 客户端渲染页面中只有一个 root 标签，搜索引擎很难爬取页面内容，而服务端渲染能给搜索引擎更多的数据，因此能获得更高的权重和排名</li>\n</ol>\n<p>服务端渲染的这些优势，伴随着一定的代价：</p>\n<ol>\n<li>项目架构变得复杂，维护成本提高：客户端渲染时前端工程师只关注 JS，而做服务端渲染的话，则不仅需要关注同构部分的代码，还要关注 Node 服务端的代码；不仅要保证同构代码的正常运行，还要保证 Node 服务稳定。前端的 Node 服务部署上去之后，需要付出时间精力来进行服务器的运维</li>\n<li>服务端执行 react 性能消耗较大，对 Node SSR 服务器性能损耗更多，对网速、并发数都是考验</li>\n</ol>\n<h2>二、什么是同构：</h2>\n<p>用同一份代码在服务端和客户端分别执行一次。代码在服务端执行时渲染了页面，在客户端执行时接管了页面交互。</p>\n<p>这样做是因为事件绑定处理是浏览器的行为，服务端代码只能生成 html string，而客户端代码执行的时候使用 ReactDOM.hydrate 进行事件绑定。</p>\n<h2>三、怎样实现？</h2>\n<p>看完了上面这些概念，我们知道看了 SSR 的优势，那么如何用代码实现呢？</p>\n<p>一个最简单的，基于 Koa 的 SSR 实现如下：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> Koa <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'koa'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> app <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Koa</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\napp<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">ctx</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  ctx<span class=\"token punctuation\">.</span>body <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">\n    &lt;html>\n      &lt;head>\n          &lt;title>title&lt;/title>\n      &lt;/head>\n      &lt;body>\n          hello SSR\n      &lt;/body>\n    &lt;/html>\n  </span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\napp<span class=\"token punctuation\">.</span><span class=\"token function\">listen</span><span class=\"token punctuation\">(</span><span class=\"token number\">3000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>网页上展示的内容都是服务器端返回的，这样只做到了服务器端渲染，没有做同构处理，当页面复杂一些，有一些交互的时候就不行了。</p>\n<p>引入 React 同构之后，一次完整的 React 同构 SSR 主要流程如下：</p>\n<img src=\"/img/react-ssr/流程.png\" style=\"width:100%; max-width: 661px;\" />\n<p>具体怎样实现呢？下面讲下几个关键步骤和一些细节：</p>\n<h3>1. 初始化目录与入口文件</h3>\n<p>源代码放到 /src 目录下，新建 /src/containers/Home.js 作为首页，containers 文件夹下放同构的组件，客户端和服务器端的入口文件都会引用这些组件来拼成页面：</p>\n<p>👇 /src/containers/Home.js</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> React<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> Component <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Home</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Component</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n            <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>Home page<span class=\"token punctuation\">.</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> Home<span class=\"token punctuation\">;</span></code></pre></div>\n<p>在 /src 目录下新建 client 和 server 目录，分别存放客户端和服务器异构的代码</p>\n<p>👇 /src/client/index.js 客户端使用 containers 目录下的组件进行 React 组件渲染</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> Home <span class=\"token keyword\">from</span> <span class=\"token string\">'./containers/Home'</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">App</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token operator\">&lt;</span>Home <span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\nReactDom<span class=\"token punctuation\">.</span><span class=\"token function\">hydrate</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&lt;</span>App <span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">,</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'root'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>👇 /src/client/index.js 服务器端起服务，同时使用 containers 目录下的组件，使用 react-dom/server 提供的 renderToString 方法渲染页面</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> Koa <span class=\"token keyword\">from</span> <span class=\"token string\">'koa'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> app <span class=\"token operator\">=</span> <span class=\"token function\">Koa</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> Home <span class=\"token keyword\">from</span> <span class=\"token string\">'./containers/Home'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> renderToString <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react-dom/server'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> content <span class=\"token operator\">=</span> <span class=\"token function\">renderToString</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&lt;</span>Home <span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\napp<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">async</span> <span class=\"token parameter\">ctx</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> htmlStr <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">\n    &lt;html>\n        &lt;head>\n            &lt;title>title&lt;/title>\n        &lt;/head>\n        &lt;body>\n            &lt;div id=\"root\"></span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>content<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">&lt;/div>\n            &lt;script src=\"/index.js\">&lt;/script>\n        &lt;/body>\n    &lt;/html>\n  </span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  ctx<span class=\"token punctuation\">.</span>body <span class=\"token operator\">=</span> htmlStr<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\napp<span class=\"token punctuation\">.</span><span class=\"token function\">listen</span><span class=\"token punctuation\">(</span><span class=\"token string\">'3000'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'started!'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h3>2. 环境搭建</h3>\n<p>安装依赖（react、react-dom、webpack、babel等），使用 webpack 进行打包。</p>\n<p>从上面的流程图可以看出，我们至少需要打包两份代码：一份是服务器端代码，用于 Node 端起服务、渲染页面；另一份是浏览器端拿到 html 文件后请求的客户端代码，用于接管页面交互。</p>\n<p>👇 webpack.base.js 导出公用的 webpack 配置</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">rules<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">{</span>\n    test<span class=\"token operator\">:</span> <span class=\"token regex\">/\\.js?$/</span><span class=\"token punctuation\">,</span>\n    loader<span class=\"token operator\">:</span> <span class=\"token string\">'babel-loader'</span><span class=\"token punctuation\">,</span>\n    exclude<span class=\"token operator\">:</span> <span class=\"token regex\">/node_modules/</span><span class=\"token punctuation\">,</span>\n    options<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        presets<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'@babel/preset-react'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'@babel/preset-env'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n            targets<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n                browsers<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'last 2 versions'</span><span class=\"token punctuation\">]</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span></code></pre></div>\n<p>👇 webpack.client.js 导出客户端的配置，入口文件为 /src/client/index.js，导出到 public 目录下</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> path <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'path'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> merge <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'webpack-merge'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> base <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./webpack.base'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> clientConfig <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    mode<span class=\"token operator\">:</span> <span class=\"token string\">'development'</span><span class=\"token punctuation\">,</span>\n    entry<span class=\"token operator\">:</span> <span class=\"token string\">'./src/client/index.js'</span><span class=\"token punctuation\">,</span>\n    output<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        filename<span class=\"token operator\">:</span> <span class=\"token string\">'index.js'</span><span class=\"token punctuation\">,</span>\n        path<span class=\"token operator\">:</span> path<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>__dirname<span class=\"token punctuation\">,</span> <span class=\"token string\">'public'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token function\">merge</span><span class=\"token punctuation\">(</span>base<span class=\"token punctuation\">,</span> clientConfig<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 在server 端返回的 html 模板文件中引入导出的 index.js</span>\n<span class=\"token comment\">// 这样浏览器请求页面的时候会下载客户端打包的 react 代码，进行页面渲染，接管页面交互</span>\n<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">\n  &lt;script src=\"/index.js\">&lt;/script>\n</span><span class=\"token template-punctuation string\">`</span></span></code></pre></div>\n<p>👇 webpack.server.js 导出服务端的配置，入口文件为 /src/server/index.js，导出到 dist 目录下</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> path <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'path'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> nodeExternals <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'webpack-node-externals'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> merge <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'webpack-merge'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> config <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./webpack.base'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> serverConfig <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    target<span class=\"token operator\">:</span> <span class=\"token string\">'node'</span><span class=\"token punctuation\">,</span>\n    mode<span class=\"token operator\">:</span> <span class=\"token string\">'development'</span><span class=\"token punctuation\">,</span>\n    entry<span class=\"token operator\">:</span> <span class=\"token string\">'./src/server/index.js'</span><span class=\"token punctuation\">,</span>\n    output<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        filename<span class=\"token operator\">:</span> <span class=\"token string\">'bundle.js'</span><span class=\"token punctuation\">,</span>\n        path<span class=\"token operator\">:</span> path<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>__dirname<span class=\"token punctuation\">,</span> <span class=\"token string\">'dist'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    externals<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token function\">nodeExternals</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token function\">merge</span><span class=\"token punctuation\">(</span>config<span class=\"token punctuation\">,</span> serverConfig<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>注意配置中的 target 为 node 是告诉 webpack 打包的对象是 node 端的代码，这样一些原生模块webpack 就不会做处理。</p>\n<p>配置中的 webpack 的 externals 属性是告诉 webpack 在打包过程中，遇到 externals 中声明的模块不用处理。</p>\n<p>使用时调 node 执行 /dist/bundle.js 即可起服务器，监听端口，返回服务器端渲染的页面了。</p>\n<p>关于 Node 端代码打包，有兴趣的同学可以看小爝的这篇文章：<a href=\"https://zhuanlan.zhihu.com/p/20782320\">https://zhuanlan.zhihu.com/p/20782320</a></p>\n<h3>3. 数据脱水和注水</h3>\n<p><strong>服务端渲染只发生在第一次进入页面的时候</strong>，再跳转的时候不是服务器端跳转，而是 JS 控制跳转（react 代码接管）。</p>\n<p>因此首次渲染应该在服务器端发送请求，将结果渲染到页面上返回，否则客户端渲染页面后再请求数据，页面会有空白。</p>\n<p>服务器端发送请求后，应该将请求的结果存起来，交给客户端直接使用，客户端不应该再发请求了。以 react-redux 为例，请求回来的数据存放到 store 中，渲染时依据 store 中的数据，渲染具体做法是：</p>\n<ol>\n<li>\n<p>服务器端渲染的时候，给 window 挂一个 state = store.getState() <strong>（数据注水）</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Home</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n<span class=\"token comment\">// 同构部分代码将服务器端发的请求独立出来（我们在这里命名为 fetching 方法）</span>\n<span class=\"token keyword\">static</span> <span class=\"token function-variable function\">fetching</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span>dispatch<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">dispatch</span><span class=\"token punctuation\">(</span><span class=\"token function\">getListAction</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>服务端代码使用 react-router-config 匹配到所渲染路由的组件</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> matchRoutes <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react-router-config'</span><span class=\"token punctuation\">;</span>\napp<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">async</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">ctx</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> matchedRoutes <span class=\"token operator\">=</span> <span class=\"token function\">matchRoutes</span><span class=\"token punctuation\">(</span>routes<span class=\"token punctuation\">,</span> ctx<span class=\"token punctuation\">.</span>request<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">const</span> store <span class=\"token operator\">=</span> <span class=\"token function\">getStore</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> promises <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 遍历路由匹配到的组件中的 fetching 方法</span>\n    matchedRoutes<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">item</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">.</span>route<span class=\"token punctuation\">.</span>fetching<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token comment\">// 代码优化：多个 promise 其中某个有错误, 走不到 all 里，而是直接进 catch，其他的请求会中断</span>\n            <span class=\"token comment\">// 因此用 Promise 再包一层，让每个 promise 请求的 catch 都 resolve 回来，保证一定会走到 all 里</span>\n            <span class=\"token keyword\">const</span> promise <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span> reject</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n                item<span class=\"token punctuation\">.</span>route<span class=\"token punctuation\">.</span><span class=\"token function\">fetching</span><span class=\"token punctuation\">(</span>store<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span>resolve<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span>resolve<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n            promises<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>promise<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\">// 函数执行后将返回数据存到 store</span>\n    <span class=\"token keyword\">await</span> Promise<span class=\"token punctuation\">.</span><span class=\"token function\">all</span><span class=\"token punctuation\">(</span>promises<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">error</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        ctx<span class=\"token punctuation\">.</span>app<span class=\"token punctuation\">.</span><span class=\"token function\">emit</span><span class=\"token punctuation\">(</span><span class=\"token string\">'error'</span><span class=\"token punctuation\">,</span> err<span class=\"token punctuation\">,</span> ctx<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\">// 服务端渲染时候使用这个 store</span>\n    <span class=\"token keyword\">const</span> content <span class=\"token operator\">=</span> <span class=\"token function\">renderToString</span><span class=\"token punctuation\">(</span>\n        <span class=\"token operator\">&lt;</span>Provider store<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>store<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n            <span class=\"token operator\">...</span>\n        <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Provider<span class=\"token operator\">></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// 数据注水：服务端渲染的 store 存到 window.context 下面</span>\n    ctx<span class=\"token punctuation\">.</span>body <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">\n        &lt;html>\n            &lt;body>\n                &lt;div id=\"root\"></span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>content<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">&lt;/div>\n                &lt;script>\n                    window.context = { state: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span>store<span class=\"token punctuation\">.</span><span class=\"token function\">getState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> }\n                &lt;/script>\n                &lt;script src=\"/index.js\" >&lt;/script>\n            &lt;/body>\n        &lt;/html>\n    </span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n    ctx<span class=\"token punctuation\">.</span>body <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">render</span><span class=\"token punctuation\">(</span>ctx<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n</li>\n<li>\n<p>客户端渲染的时候，从 window.context 拿出数据直接使用 <strong>（数据脱水）</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// 数据脱水：客户端渲染初始化的时候，将 window.context 里的数据（即 SSR 请求返回的数据） 脱水，取出来，作为客户端渲染 store 中的初始值</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">getClientStore</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> defaultState <span class=\"token operator\">=</span> window<span class=\"token punctuation\">.</span>context<span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">createStore</span><span class=\"token punctuation\">(</span>reducer<span class=\"token punctuation\">,</span> defaultState<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n</li>\n</ol>\n<p>客户端渲染的时候不走 fetching 方法，在 componentDidMount 的时候判断 list 是否有值，有值的话不发请求。</p>\n<p>从其他页面跳转过来的时候，不走服务端渲染，因此 list 没有值，这时正常发送请求。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Home</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 服务端渲染时不会执行 componentDidMount 声明周期</span>\n    <span class=\"token function\">componentDidMount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>list<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span><span class=\"token function\">getHomeList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3>4. 服务端请求带上 cookie</h3>\n<p>服务器端发起请求的时候，不会像浏览器端请求那样携带 cookie 等信息</p>\n<p>这时候我们可以在 axios 的配置中加上 headers cookie，其他浏览器端的信息也可以通过这种形式引入</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">axios<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    headers<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        cookie<span class=\"token operator\">:</span> req<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'cookie'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> <span class=\"token string\">''</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h3>5. CSS 服务器端渲染</h3>\n<p>服务器端渲染不只包含 DOM 结构和页面交互，还包扩 CSS，如果服务器端渲染的时候不渲染样式，那么页面加载的时候会有抖动，举个例子，src/containers/Home 组件下引入 CSS，给 body 设置背景色，打包后页面首次渲染出来是没有背景色的，执行 index.js 时 JS 将 CSS 模块的代码插入到 style 标签中，第二次渲染时才会有背景色，打开控制台的 Performance 面板可以看到渲染的详细过程：</p>\n<img src=\"/img/react-ssr/performance.png\" style=\"width:100%; \" />\n<p>为了解决这个问题，我们需要在服务器端渲染的时候将 CSS 代码插入到 style 标签中返回。</p>\n<p>在 webpack.client.js 中配置 style-loader &#x26;&#x26; css-loader 可以支持引入 css 模块，但是在 webpack.server.js 中这样配置则 build 时会报错：</p>\n<div class=\"gatsby-highlight\" data-language=\"yaml\"><pre class=\"language-yaml\"><code class=\"language-yaml\">webpack<span class=\"token punctuation\">:</span>///./node_modules/style<span class=\"token punctuation\">-</span>loader/dist/runtime/injectStylesIntoStyleTag.js<span class=\"token punctuation\">?</span><span class=\"token punctuation\">:</span><span class=\"token number\">93</span>\n  var style = document.createElement('style');\n              ^\n<span class=\"token key atrule\">ReferenceError</span><span class=\"token punctuation\">:</span> document is not defined</code></pre></div>\n<p>这是因为服务端环境没有全局变量 window，将 style-loader 替换成 <a href=\"https://github.com/kriasoft/isomorphic-style-loader\">isomorphic-style-loader</a> 这个模块可以帮我们获取到所有模块的 CSS 代码，使用 insertCss 方法将这些代码插入到 style 标签中。</p>\n<h3>6. meta tags 渲染</h3>\n<p>使用 <a href=\"https://github.com/nfl/react-helmet\">React-helmet</a> 将 &#x3C;Helmet> 标签插入到组件中，即可修改 html 中 head 部分内容</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token operator\">&lt;</span>Helmet<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span>title<span class=\"token operator\">></span>Another Title<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>title<span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Helmet<span class=\"token operator\">></span></code></pre></div>\n<h3>7. 403 404 处理</h3>\n<p>react-router-dom 模块\nimport { Redirect } from ‘react-router-dom’;\n服务端渲染时，使用 react-router-config 的 renderRoutes 方法，可以自动获取路由下的重定向情况，并赋值到 context 上，组件里引入 react-router-dom，提供的 &#x3C;Redirect /> 可以被 renderRoutes 获取到：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> context <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> content <span class=\"token operator\">=</span> <span class=\"token function\">renderToString</span><span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>Provider store<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>store<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>StaticRouter location<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>ctx<span class=\"token punctuation\">.</span>request<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">}</span> context<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>context<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n            <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n                <span class=\"token punctuation\">{</span><span class=\"token function\">renderRoutes</span><span class=\"token punctuation\">(</span>routes<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n            <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>StaticRouter<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Provider<span class=\"token operator\">></span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 获取到路由重定向时</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">.</span>action <span class=\"token operator\">===</span> <span class=\"token string\">'REPLACE'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    ctx<span class=\"token punctuation\">.</span>status <span class=\"token operator\">=</span> <span class=\"token number\">301</span><span class=\"token punctuation\">;</span>\n    ctx<span class=\"token punctuation\">.</span><span class=\"token function\">redirect</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">.</span><span class=\"token constant\">NOT_FOUND</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">// 在 404 页面设置 flag，SSR 时即可拿到 404 的 flag</span>\n    ctx<span class=\"token punctuation\">.</span>status <span class=\"token operator\">=</span> <span class=\"token number\">404</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>在 route 配置中，所有配置项的末尾配置 NotFound 组件：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">NotFound</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">componentWillMount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> staticContext <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 在 404 页面设置 flag，SSR 时即可拿到 404 的 flag</span>\n        staticContext <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">(</span>staticContext<span class=\"token punctuation\">.</span><span class=\"token constant\">NOT_FOUND</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span><span class=\"token number\">404</span><span class=\"token operator\">!</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// route 配置：</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">{</span>\n    path<span class=\"token operator\">:</span> <span class=\"token string\">'/'</span><span class=\"token punctuation\">,</span>\n    component<span class=\"token operator\">:</span> <span class=\"token constant\">APP</span><span class=\"token punctuation\">,</span>\n    routes<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n        <span class=\"token operator\">...</span>allRoutes<span class=\"token punctuation\">,</span> <span class=\"token comment\">// 所有路由</span>\n        <span class=\"token punctuation\">{</span>\n            component<span class=\"token operator\">:</span> NotFound<span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></code></pre></div>","frontmatter":{"title":"浅谈 React 服务端渲染与同构","date":"May 28, 2020"},"excerpt":"一、什么是服务端渲染： 服务端渲染（SSR）区别于客户端渲染（CSR），当用户访问一个网址的时候，客户端渲染是服务端返回一部分 HTML 结构，通过执行 JavaScript 将余下的 HTML 渲染到页面上，而服务端渲染则是在服务端生成完整的 HTML 结构返回给浏览器。\n以 React 为例：在客户端渲染时一般 html 的 body 中只有一个 id 为 root 的标签，页面在浏览器上渲染出来后，通过执行 JavaScript…"}},"pageContext":{"slug":"/blog/2021-07-30-mars-ui/","previous":{"fields":{"slug":"/reading/2019-07-25-js-you-dont-know-1/"},"frontmatter":{"title":"你不知道的 JavaScript (上)","type":"reading","photos":null,"tags":["JS"],"process":[100,100]}},"next":{"fields":{"slug":"/blog/react-ssr/"},"frontmatter":{"title":"浅谈 React 服务端渲染与同构","type":"blog","photos":["/img/react-ssr/banner@sm.jpg"],"tags":["JavaScript"],"process":null}}}},"staticQueryHashes":["3128451518"]}