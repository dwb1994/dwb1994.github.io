<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[dwb-blog]]></title><description><![CDATA[A paginated starter blog demonstrating what Gatsby can do. Extension of gatsby-starter-blog.]]></description><link>https://dwb1994.github.io</link><generator>GatsbyJS</generator><lastBuildDate>Tue, 15 Sep 2020 07:48:34 GMT</lastBuildDate><item><title><![CDATA[No title]]></title><description><![CDATA[关于我 🐶 董文博，快手 · 前端工程师 🌈 连续…]]></description><link>https://dwb1994.github.io/about/</link><guid isPermaLink="false">https://dwb1994.github.io/about/</guid><content:encoded>&lt;h2&gt;关于我&lt;/h2&gt;
&lt;p&gt;🐶 董文博，快手 · 前端工程师&lt;/p&gt;
&lt;p&gt;🌈 连续 4 年素描画、水粉画的学习经验，对产品、交互、视觉设计一直保有浓厚兴趣，在追求用户体验的道路上持续探索&lt;/p&gt;
&lt;p&gt;📱 喜欢折腾各种电子产品，热爱互联网行业，很庆幸大学读了计科专业，现在有能力做些喜欢的事情&lt;/p&gt;
&lt;p&gt;💡 脑回路清奇，不喜欢枯燥乏味的事情&lt;/p&gt;
&lt;h2&gt;关于网站&lt;/h2&gt;
&lt;p&gt;本网站是我的个人博客，平时会记录我的工作、个人研究与兴趣爱好&lt;/p&gt;
&lt;h2&gt;个人链接&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.zhihu.com/people/dwbbb/activities&quot;&gt;知乎&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/dwb1994&quot;&gt;Github&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content:encoded></item><item><title><![CDATA[MPortal Design]]></title><description><![CDATA[作品信息 制作日期: 2018 年 2月 ~…]]></description><link>https://dwb1994.github.io/design/2020-07-20-mportal-design/</link><guid isPermaLink="false">https://dwb1994.github.io/design/2020-07-20-mportal-design/</guid><pubDate>Thu, 06 Aug 2020 00:00:00 GMT</pubDate><content:encoded>&lt;h2&gt;作品信息&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;制作日期: 2018 年 2月 ~ 6月&lt;/li&gt;
&lt;li&gt;设计师: 我 / &lt;a href=&quot;https://github.com/amnsss&quot;&gt;@文杰&lt;/a&gt; / &lt;a href=&quot;https://github.com/kitian616&quot;&gt;@田老师&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;简介: 便利, 快速, 高效的一站式持续交付平台。采用快速导航式开发流程，思路清晰，功能全面，让开发更快捷方便。&lt;/li&gt;
&lt;li&gt;背景: 初期整合了组内若干移动开发工具与平台，后面接入了持续集成、持续交付、客户端发布等功能，提供越来越完整的一站式开发体验。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;说明：设计稿中的描述和数据全部是虚构的，并非真实场景。&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;鸣谢&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Mportal 使用了 &lt;a href=&quot;https://ant.design/index-cn&quot;&gt;Ant Design&lt;/a&gt; 组件库&lt;/li&gt;
&lt;li&gt;感谢 &lt;a href=&quot;https://www.invisionapp.com/studio&quot;&gt;InVision&lt;/a&gt; 网站的交互设计，给了我很多的灵感！&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;设计思想&lt;/h2&gt;
&lt;h3&gt;1. 设计规范的制作与完善&lt;/h3&gt;
&lt;p&gt;在项目诞生之初指定初代的设计规范，在设计稿的制作中梳理通用规范，快速完善、迭代设计规范，形成闭环。&lt;/p&gt;
&lt;h3&gt;2. 链路式信息架构&lt;/h3&gt;
&lt;p&gt;开发人员不清楚自己所处在具体哪个阶段，不清楚有哪些好用的内部工具可以提高效率。&lt;/p&gt;
&lt;p&gt;基于这一点我们围绕整个开发流程梳理周边工具，形成链条，以流程图的形式，展示在网站的各个页面，我们称之为“链路式”信息架构方案：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;开发流程是一个完整的链条&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;打破信息罗列的固化思维：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;隐藏非必需的信息&lt;/li&gt;
&lt;li&gt;重要信息突出显示&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;时刻告诉用户：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;现在是何种状态&lt;/li&gt;
&lt;li&gt;我现在应该做什么&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;一些优化细节&lt;/h2&gt;
&lt;h3&gt;1. 时刻告诉用户现在的状态&lt;/h3&gt;
&lt;p&gt;借鉴新鲜出炉的 iOS 11 大标题设计（&lt;a href=&quot;https://www.zcool.com.cn/article/ZNTAzODA4.html&quot;&gt;IOS11的标题为什么那么大？&lt;/a&gt;），在设计规范的约束下，为页面提供更大的标题和描述，使用户能更快地知道“我在哪”“我现在要做什么”&lt;/p&gt;
&lt;div class=&quot;img-container&quot;&gt;
    &lt;img class=&quot;img-sm&quot; src=&quot;/img/md/pro1.png&quot;/&gt;
    &lt;img class=&quot;img-sm&quot; src=&quot;/img/md/pro2.png&quot;/&gt;
&lt;/div&gt;
&lt;h3&gt;2. “链路式” 设计贯穿整个应用&lt;/h3&gt;
&lt;p&gt;提供各种各种抽象的“流程图”，并明确标出现在所处状态，配合文字描述，清晰地告诉用户“现在是何种状态”、“我现在应该做什么”、“有什么工具可以帮助我”&lt;/p&gt;
&lt;div class=&quot;img-container&quot;&gt;
    &lt;img class=&quot;img-sm&quot; src=&quot;/img/md/liucheng.png&quot;/&gt;
    &lt;img class=&quot;img-sm&quot; src=&quot;/img/md/pack.png&quot;/&gt;
&lt;/div&gt;
&lt;h3&gt;3. “对话式”表单设计：&lt;/h3&gt;
&lt;p&gt;与传统的信息罗列不同，各种表单筛选连接成一句句完整的话，这更像是机器与人交流
&lt;img src=&quot;/img/md/form.png&quot;&gt;&lt;/p&gt;
&lt;h3&gt;4. 提供 FAQ 与 Help 功能&lt;/h3&gt;
&lt;p&gt;用户在使用系统时，难免遇到手足无措的时候，比如搜索不到想搜的项目，我们在后台根据路由分别配置了一些不同页面中可能想问的问题或快捷链接，避免形成 &lt;strong&gt;“断头路”&lt;/strong&gt;：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/img/md/faq.jpg&quot;&gt;&lt;/p&gt;
&lt;h3&gt;5. 更合理地组织信息层次&lt;/h3&gt;
&lt;p&gt;以往我们的中后台系统臃肿、信息杂乱且 &lt;strong&gt;主次关系不明朗&lt;/strong&gt;，看似操作数减少了，实际上找到想要的信息非常困难，这也是导致我们各种系统难用的根本原因。&lt;/p&gt;
&lt;p&gt;通过对基本设计原则的研究，在组织信息层次的时候我做了大胆的取舍。通过和业务方的深入交流，明确了信息的层次，将主要信息突出展示，次要信息弱化甚至隐藏为鼠标悬停时展示。&lt;/p&gt;
&lt;p&gt;不再纠结“一屏看到全部信息”，而是大胆使用纵向空间，这样看似操作数增加，实际上找到想要的信息变得非常轻松！&lt;/p&gt;
&lt;h4&gt;例：打包历史列表 ↓&lt;/h4&gt;
&lt;p&gt;板块标题是主要信息；在列表项中包含跟打包相关的特别多的信息，那么通过跟业务方交流，“ID”、“打包结果”是最常用的信息，而打包环境、打包日期、分支等信息是次要信息。&lt;/p&gt;
&lt;div class=&quot;img-container&quot;&gt;
    &lt;img class=&quot;img-sm&quot; src=&quot;/img/md/packHistory.png&quot;/&gt;
&lt;/div&gt;
&lt;h3&gt;6. 表单优化 - 分步填写与折叠&lt;/h3&gt;
&lt;p&gt;旧系统的表单配置项繁多，大部分配置项都是不常用的，但是在同一视觉层级展示，导致用户不敢用、不会用。因此我们重新梳理这些表单项之间的关系，将繁琐的配置分步填写：&lt;/p&gt;
&lt;p&gt;分步填写让各组表单项有了递进关系，可以通过前面步骤的表单项影响后面步骤表单项的展示与隐藏 ↓
&lt;img src=&quot;/img/md/step.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;某些表单项隐藏在“地下”，比如下面这种场景，当开启“上传资源”按钮时，下面会展开一块额外的空间，并提供与之联动的表单项 ↓
&lt;img src=&quot;/img/md/form2.png&quot;&gt;
展开与收起做了过渡效果处理，实际上通过动效表达一种隐喻：这部分空间的视觉层级是在表单层之下的一层，是当前空间断裂而展开的。通过隐喻能够表达更多的亲密性信息，省去了以往大段的文字描述（例如使用文档）。&lt;/p&gt;
&lt;h2&gt;LOGO 设计&lt;/h2&gt;
&lt;div class=&quot;img-container&quot;&gt;
    &lt;img class=&quot;img-sm&quot; src=&quot;/img/md/md.png&quot;/&gt;
&lt;/div&gt;
田老师出的最初版 LOGO，使用 sketch，全部是用正圆切的，后来我调整了一些细节，诞生了这一版 LOGO
&lt;h2&gt;部分页面展示：&lt;/h2&gt;
&lt;h3&gt;项目列表与改版：&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;/img/md/%E9%A1%B9%E7%9B%AE%E5%88%97%E8%A1%A8.png&quot;&gt;
&lt;img src=&quot;/img/md/%E9%A1%B9%E7%9B%AE%E5%88%97%E8%A1%A82.png&quot;&gt;&lt;/p&gt;
&lt;h3&gt;打包详情：&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;/img/md/%E6%89%93%E5%8C%85%E8%AF%A6%E6%83%85.jpg&quot;&gt;
&lt;img src=&quot;/img/md/%E5%AE%A2%E6%88%B7%E7%AB%AF%E8%AF%A6%E6%83%85%E9%A1%B5.jpg&quot;&gt;
&lt;img src=&quot;/img/md/%E6%89%93%E5%8C%85%E5%90%8E%E7%BB%93%E6%9E%9C%E5%B1%95%E7%A4%BA.jpg&quot;&gt;&lt;/p&gt;
&lt;h3&gt;全局遮罩：&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;/img/md/%E6%96%B0%E5%BB%BA-%E7%B1%BB%E5%9E%8B%E9%80%89%E6%8B%A9.jpg&quot;&gt;
&lt;img src=&quot;/img/md/%E6%96%B0%E5%BB%BA%E6%89%93%E5%8C%85-%E6%89%93%E5%8C%85%E9%85%8D%E7%BD%AE.jpg&quot;&gt;
&lt;img src=&quot;/img/md/%E6%96%B0%E5%BB%BA%E6%89%93%E5%8C%85-%E5%B7%A5%E4%BD%9C%E6%B5%81.jpg&quot;&gt;&lt;/p&gt;
&lt;h3&gt;小程序权限管理模块&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;/img/md/%E5%B0%8F%E7%A8%8B%E5%BA%8F-%E5%90%8D%E5%8D%95%E5%88%97%E8%A1%A8.png&quot;&gt;
&lt;img src=&quot;/img/md/%E5%B0%8F%E7%A8%8B%E5%BA%8F-%E7%94%B3%E8%AF%B7.png&quot;&gt;&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Youth Design]]></title><description><![CDATA[作品信息 制作日期: 2018 年 2月 ~ 6月 设计师: 我 / @情缘 / @田老师 简介: Youth Design 是一个多平台的设计语言。以青春、未来、科学为设计理念，服务于 YMFE 的众多移动端、PC 端框架。 背景:  在 YMFE…]]></description><link>https://dwb1994.github.io/design/2020-07-20-youth-design/</link><guid isPermaLink="false">https://dwb1994.github.io/design/2020-07-20-youth-design/</guid><pubDate>Thu, 06 Aug 2020 00:00:00 GMT</pubDate><content:encoded>&lt;h2&gt;作品信息&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;制作日期: 2018 年 2月 ~ 6月&lt;/li&gt;
&lt;li&gt;设计师: 我 / &lt;a href=&quot;https://github.com/xiaoyan-hou&quot;&gt;@情缘&lt;/a&gt; / &lt;a href=&quot;https://github.com/kitian616&quot;&gt;@田老师&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;简介: Youth Design 是一个多平台的设计语言。以青春、未来、科学为设计理念，服务于 YMFE 的众多移动端、PC 端框架。&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;背景: &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在 YMFE 开发与维护的众多项目中，由于成员更迭、缺少 UI 设计、技术栈不统一等因素，出现了各式各样的页面风格。我们希望编写一套设计规范，统一团队项目的前端 UI 设计，屏蔽设计的差异；统一 LOGO 形式、配色、文案等，以提升团队品牌形象，为团队众多项目注入灵魂。&lt;/li&gt;
&lt;li&gt;我们希望创造一个多平台设计语言，统一团队项目的前端 UI 设计。并探寻前沿的交互形式，力求为用户提供卓越的 WEB 应用使用体验。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;技术: react / react-sketchapp / styled-components&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;产出工具:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;设计规范生成器：使用 React 输出设计规范的一个工具，用于制作定制化的项目设计规范。修改配置文件中的变量，就可以轻松修改设计规范中的配色、文本字号、排版信息，并可以一键导出设计规范及组件库的 sketch 模板文件。&lt;/li&gt;
&lt;li&gt;iconfont sketch 插件：使用 skpm 开发，让设计师们更方便地使用内网的图标库。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;设计语言内容&lt;/h2&gt;
&lt;h4&gt;1. 设计语言&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;以图例的形式解释了四大基本设计原则（亲密性、对比、对齐、重复）在 UI 设计中的使用方式&lt;/li&gt;
&lt;li&gt;提供&lt;a href=&quot;https://ued.qunar.com/youth-design/design/language/color/project.html&quot;&gt;色彩使用规范&lt;/a&gt;，防止过度使用色彩&lt;/li&gt;
&lt;li&gt;提供文本规范，包括字体家族、文字排版、无障碍设计&lt;/li&gt;
&lt;li&gt;提供布局规范，布局方案分为 PC 端布局、移动端布局、响应式设计、栅格系统&lt;/li&gt;
&lt;li&gt;提供组件库的 UI 设计，包含通用(跨平台)组件设计，PC 端组件设计与移动端组件设计&lt;/li&gt;
&lt;/ol&gt;
&lt;h4&gt;2. 代码&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;提供组件库，包括移动端组件（公司内部的 React-Native、Hybrid 框架）与 PC 端组件（基于 Ant Design 封装的一套 PC 端组件）&lt;/li&gt;
&lt;li&gt;提供样式代码、&lt;a href=&quot;http://dwbbb.com/blog/improve-web-legibility/&quot;&gt;色板生成算法&lt;/a&gt;、&lt;a href=&quot;http://dwbbb.com/blog/improve-web-legibility/&quot;&gt;对比度算法&lt;/a&gt;，项目中可以直接使用&lt;/li&gt;
&lt;li&gt;设计规范生成器（命令行工具），通过配置生成 &lt;strong&gt;项目设计规范&lt;/strong&gt; 和 &lt;strong&gt;skech 模板包&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h4&gt;3. Sketch&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;skech 模板包（PC 端 &amp;#x26; 移动端），提高设计稿产出效率&lt;/li&gt;
&lt;li&gt;iconfont skech 插件，方便设计师使用内网图标库&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;LOGO 设计&lt;/h2&gt;
&lt;div class=&quot;img-container&quot;&gt;
    &lt;img class=&quot;img-sm&quot; src=&quot;/img/youth-design/logo.png&quot;/&gt;
&lt;/div&gt;
&lt;h2&gt;使用 React-Sketchapp 导出的 sketch 文件展示：&lt;/h2&gt;
&lt;h3&gt;调色板：&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;/img/youth-design/color.png&quot;&gt;&lt;/p&gt;
&lt;h3&gt;项目色彩规范：&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;/img/youth-design/develop-color.png&quot;&gt;&lt;/p&gt;
&lt;h3&gt;文字规范：&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;/img/youth-design/text.png&quot;&gt;&lt;/p&gt;
&lt;h3&gt;UI Kit (Mobile)：&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;/img/youth-design/uikit-mobile.png&quot;&gt;&lt;/p&gt;
&lt;h3&gt;UI Kit (PC)：&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;/img/youth-design/uikit-pc.png&quot;&gt;&lt;/p&gt;</content:encoded></item><item><title><![CDATA[高性能 JavaScript]]></title><description><![CDATA[读书笔记 - 未完待续]]></description><link>https://dwb1994.github.io/reading/js-perf/</link><guid isPermaLink="false">https://dwb1994.github.io/reading/js-perf/</guid><pubDate>Mon, 20 Jul 2020 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;读书笔记 - 未完待续&lt;/p&gt;</content:encoded></item><item><title><![CDATA[你不知道的 JavaScript (下)]]></title><description><![CDATA[读书笔记 - 未完待续]]></description><link>https://dwb1994.github.io/reading/js-you-dont-know-3/</link><guid isPermaLink="false">https://dwb1994.github.io/reading/js-you-dont-know-3/</guid><pubDate>Fri, 10 Jul 2020 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;读书笔记 - 未完待续&lt;/p&gt;</content:encoded></item><item><title><![CDATA[浅谈 React 服务端渲染与同构]]></title><description><![CDATA[一、什么是服务端渲染： 服务端渲染（SSR）区别于客户端渲染（CSR），当用户访问一个网址的时候，客户端渲染是服务端返回一部分 HTML 结构，通过执行 JavaScript 将余下的 HTML 渲染到页面上，而服务端渲染则是在服务端生成完整的 HTML…]]></description><link>https://dwb1994.github.io/blog/react-ssr/</link><guid isPermaLink="false">https://dwb1994.github.io/blog/react-ssr/</guid><pubDate>Thu, 28 May 2020 00:00:00 GMT</pubDate><content:encoded>&lt;h2&gt;一、什么是服务端渲染：&lt;/h2&gt;
&lt;p&gt;服务端渲染（SSR）区别于客户端渲染（CSR），当用户访问一个网址的时候，客户端渲染是服务端返回一部分 HTML 结构，通过执行 JavaScript 将余下的 HTML 渲染到页面上，而服务端渲染则是在服务端生成完整的 HTML 结构返回给浏览器。
以 React 为例：在客户端渲染时一般 html 的 body 中只有一个 id 为 root 的标签，页面在浏览器上渲染出来后，通过执行 JavaScript 将页面内容插入到这个标签中。而服务端渲染则在服务器端将页面内容插入到这个标签中，返回给浏览器的时候就已经有完整的页面结构了。&lt;/p&gt;
&lt;p&gt;由此我们可以看到服务端渲染具有如下优势：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;首屏渲染快：返回的 html 是完整的，不需要再发其他请求来不断地向页面填充内容，也不会在渲染过程中产生白屏或抖动，用户体验会好很多&lt;/li&gt;
&lt;li&gt;有利于 SEO：React 客户端渲染页面中只有一个 root 标签，搜索引擎很难爬取页面内容，而服务端渲染能给搜索引擎更多的数据，因此能获得更高的权重和排名&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;服务端渲染的这些优势，伴随着一定的代价：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;项目架构变得复杂，维护成本提高：客户端渲染时前端工程师只关注 JS，而做服务端渲染的话，则不仅需要关注同构部分的代码，还要关注 Node 服务端的代码；不仅要保证同构代码的正常运行，还要保证 Node 服务稳定。前端的 Node 服务部署上去之后，需要付出时间精力来进行服务器的运维&lt;/li&gt;
&lt;li&gt;服务端执行 react 性能消耗较大，对 Node SSR 服务器性能损耗更多，对网速、并发数都是考验&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;二、什么是同构：&lt;/h2&gt;
&lt;p&gt;用同一份代码在服务端和客户端分别执行一次。代码在服务端执行时渲染了页面，在客户端执行时接管了页面交互。&lt;/p&gt;
&lt;p&gt;这样做是因为事件绑定处理是浏览器的行为，服务端代码只能生成 html string，而客户端代码执行的时候使用 ReactDOM.hydrate 进行事件绑定。&lt;/p&gt;
&lt;h2&gt;三、怎样实现？&lt;/h2&gt;
&lt;p&gt;看完了上面这些概念，我们知道看了 SSR 的优势，那么如何用代码实现呢？&lt;/p&gt;
&lt;p&gt;一个最简单的，基于 Koa 的 SSR 实现如下：&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;js&quot;&gt;&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; Koa &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;koa&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; app &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Koa&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
app&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;use&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;ctx&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  ctx&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;body &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;
    &amp;lt;html&gt;
      &amp;lt;head&gt;
          &amp;lt;title&gt;title&amp;lt;/title&gt;
      &amp;lt;/head&gt;
      &amp;lt;body&gt;
          hello SSR
      &amp;lt;/body&gt;
    &amp;lt;/html&gt;
  &lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
app&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;listen&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;3000&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;网页上展示的内容都是服务器端返回的，这样只做到了服务器端渲染，没有做同构处理，当页面复杂一些，有一些交互的时候就不行了。&lt;/p&gt;
&lt;p&gt;引入 React 同构之后，一次完整的 React 同构 SSR 主要流程如下：&lt;/p&gt;
&lt;img src=&quot;/img/react-ssr/流程.png&quot; style=&quot;width:100%; max-width: 661px;&quot; /&gt;
&lt;p&gt;具体怎样实现呢？下面讲下几个关键步骤和一些细节：&lt;/p&gt;
&lt;h3&gt;1. 初始化目录与入口文件&lt;/h3&gt;
&lt;p&gt;源代码放到 /src 目录下，新建 /src/containers/Home.js 作为首页，containers 文件夹下放同构的组件，客户端和服务器端的入口文件都会引用这些组件来拼成页面：&lt;/p&gt;
&lt;p&gt;👇 /src/containers/Home.js&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;js&quot;&gt;&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; React&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; Component &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;react&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Home&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Component&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token function&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
            &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;div&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;Home page&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;div&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;default&lt;/span&gt; Home&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;在 /src 目录下新建 client 和 server 目录，分别存放客户端和服务器异构的代码&lt;/p&gt;
&lt;p&gt;👇 /src/client/index.js 客户端使用 containers 目录下的组件进行 React 组件渲染&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;js&quot;&gt;&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; React &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;react&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; Home &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;./containers/Home&apos;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;App&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;Home &lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
ReactDom&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;hydrate&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;App &lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; document&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getElementById&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;root&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;👇 /src/client/index.js 服务器端起服务，同时使用 containers 目录下的组件，使用 react-dom/server 提供的 renderToString 方法渲染页面&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;js&quot;&gt;&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; Koa &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;koa&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; app &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;Koa&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; Home &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;./containers/Home&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; renderToString &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;react-dom/server&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; content &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;renderToString&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;Home &lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

app&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;use&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;token parameter&quot;&gt;ctx&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; htmlStr &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;
    &amp;lt;html&gt;
        &amp;lt;head&gt;
            &amp;lt;title&gt;title&amp;lt;/title&gt;
        &amp;lt;/head&gt;
        &amp;lt;body&gt;
            &amp;lt;div id=&quot;root&quot;&gt;&lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;content&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&amp;lt;/div&gt;
            &amp;lt;script src=&quot;/index.js&quot;&gt;&amp;lt;/script&gt;
        &amp;lt;/body&gt;
    &amp;lt;/html&gt;
  &lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  ctx&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;body &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; htmlStr&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

app&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;listen&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;3000&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;started!&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;2. 环境搭建&lt;/h3&gt;
&lt;p&gt;安装依赖（react、react-dom、webpack、babel等），使用 webpack 进行打包。&lt;/p&gt;
&lt;p&gt;从上面的流程图可以看出，我们至少需要打包两份代码：一份是服务器端代码，用于 Node 端起服务、渲染页面；另一份是浏览器端拿到 html 文件后请求的客户端代码，用于接管页面交互。&lt;/p&gt;
&lt;p&gt;👇 webpack.base.js 导出公用的 webpack 配置&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;js&quot;&gt;&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;rules&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    test&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token regex&quot;&gt;/\.js?$/&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    loader&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;babel-loader&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    exclude&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token regex&quot;&gt;/node_modules/&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    options&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        presets&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;@babel/preset-react&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;@babel/preset-env&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
            targets&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
                browsers&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;last 2 versions&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
            &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;👇 webpack.client.js 导出客户端的配置，入口文件为 /src/client/index.js，导出到 public 目录下&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;js&quot;&gt;&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; path &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;path&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; merge &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;webpack-merge&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; base &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;./webpack.base&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; clientConfig &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    mode&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;development&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    entry&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;./src/client/index.js&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    output&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        filename&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;index.js&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
        path&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; path&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;resolve&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;__dirname&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;public&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
module&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;exports &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;merge&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;base&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; clientConfig&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;// 在server 端返回的 html 模板文件中引入导出的 index.js&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;// 这样浏览器请求页面的时候会下载客户端打包的 react 代码，进行页面渲染，接管页面交互&lt;/span&gt;
&lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;
  &amp;lt;script src=&quot;/index.js&quot;&gt;&amp;lt;/script&gt;
&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;👇 webpack.server.js 导出服务端的配置，入口文件为 /src/server/index.js，导出到 dist 目录下&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;js&quot;&gt;&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; path &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;path&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; nodeExternals &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;webpack-node-externals&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; merge &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;webpack-merge&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; config &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;./webpack.base&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; serverConfig &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    target&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;node&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    mode&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;development&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    entry&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;./src/server/index.js&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    output&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        filename&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;bundle.js&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
        path&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; path&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;resolve&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;__dirname&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;dist&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    externals&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;nodeExternals&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
module&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;exports &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;merge&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;config&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; serverConfig&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;注意配置中的 target 为 node 是告诉 webpack 打包的对象是 node 端的代码，这样一些原生模块webpack 就不会做处理。&lt;/p&gt;
&lt;p&gt;配置中的 webpack 的 externals 属性是告诉 webpack 在打包过程中，遇到 externals 中声明的模块不用处理。&lt;/p&gt;
&lt;p&gt;使用时调 node 执行 /dist/bundle.js 即可起服务器，监听端口，返回服务器端渲染的页面了。&lt;/p&gt;
&lt;p&gt;关于 Node 端代码打包，有兴趣的同学可以看小爝的这篇文章：&lt;a href=&quot;https://zhuanlan.zhihu.com/p/20782320&quot;&gt;https://zhuanlan.zhihu.com/p/20782320&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;3. 数据脱水和注水&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;服务端渲染只发生在第一次进入页面的时候&lt;/strong&gt;，再跳转的时候不是服务器端跳转，而是 JS 控制跳转（react 代码接管）。&lt;/p&gt;
&lt;p&gt;因此首次渲染应该在服务器端发送请求，将结果渲染到页面上返回，否则客户端渲染页面后再请求数据，页面会有空白。&lt;/p&gt;
&lt;p&gt;服务器端发送请求后，应该将请求的结果存起来，交给客户端直接使用，客户端不应该再发请求了。以 react-redux 为例，请求回来的数据存放到 store 中，渲染时依据 store 中的数据，渲染具体做法是：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;服务器端渲染的时候，给 window 挂一个 state = store.getState() &lt;strong&gt;（数据注水）&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;js&quot;&gt;&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Home&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;React&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Component&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;// 同构部分代码将服务器端发的请求独立出来（我们在这里命名为 fetching 方法）&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;fetching&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;dispatch&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;dispatch&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getListAction&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token function&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;服务端代码使用 react-router-config 匹配到所渲染路由的组件&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;js&quot;&gt;&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; matchRoutes &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;react-router-config&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
app&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;use&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;async&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;ctx&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; matchedRoutes &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;matchRoutes&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;routes&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; ctx&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;request&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;path&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; store &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;getStore&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; promises &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token comment&quot;&gt;// 遍历路由匹配到的组件中的 fetching 方法&lt;/span&gt;
    matchedRoutes&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;forEach&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;item&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;item&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;route&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;fetching&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;token comment&quot;&gt;// 代码优化：多个 promise 其中某个有错误, 走不到 all 里，而是直接进 catch，其他的请求会中断&lt;/span&gt;
            &lt;span class=&quot;token comment&quot;&gt;// 因此用 Promise 再包一层，让每个 promise 请求的 catch 都 resolve 回来，保证一定会走到 all 里&lt;/span&gt;
            &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; promise &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Promise&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;resolve&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; reject&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
                item&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;route&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;fetching&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;store&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;resolve&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;catch&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;resolve&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
            promises&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;promise&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;token comment&quot;&gt;// 函数执行后将返回数据存到 store&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; Promise&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;all&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;promises&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;catch&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;error&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        ctx&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;app&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;emit&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;error&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; err&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; ctx&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;token comment&quot;&gt;// 服务端渲染时候使用这个 store&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; content &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;renderToString&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
        &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;Provider store&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;store&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;
            &lt;span class=&quot;token operator&quot;&gt;...&lt;/span&gt;
        &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;Provider&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;token comment&quot;&gt;// 数据注水：服务端渲染的 store 存到 window.context 下面&lt;/span&gt;
    ctx&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;body &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;
        &amp;lt;html&gt;
            &amp;lt;body&gt;
                &amp;lt;div id=&quot;root&quot;&gt;&lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;content&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&amp;lt;/div&gt;
                &amp;lt;script&gt;
                    window.context = { state: &lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;JSON&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;stringify&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;store&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getState&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt; }
                &amp;lt;/script&gt;
                &amp;lt;script src=&quot;/index.js&quot; &gt;&amp;lt;/script&gt;
            &amp;lt;/body&gt;
        &amp;lt;/html&gt;
    &lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    ctx&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;body &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;ctx&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;客户端渲染的时候，从 window.context 拿出数据直接使用 &lt;strong&gt;（数据脱水）&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;js&quot;&gt;&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// 数据脱水：客户端渲染初始化的时候，将 window.context 里的数据（即 SSR 请求返回的数据） 脱水，取出来，作为客户端渲染 store 中的初始值&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;getClientStore&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; defaultState &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; window&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;context&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;state&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;createStore&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;reducer&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; defaultState&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;客户端渲染的时候不走 fetching 方法，在 componentDidMount 的时候判断 list 是否有值，有值的话不发请求。&lt;/p&gt;
&lt;p&gt;从其他页面跳转过来的时候，不走服务端渲染，因此 list 没有值，这时正常发送请求。&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;js&quot;&gt;&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Home&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;React&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Component&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token comment&quot;&gt;// 服务端渲染时不会执行 componentDidMount 声明周期&lt;/span&gt;
    &lt;span class=&quot;token function&quot;&gt;componentDidMount&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;props&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;list&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;length&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;props&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getHomeList&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;token function&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;4. 服务端请求带上 cookie&lt;/h3&gt;
&lt;p&gt;服务器端发起请求的时候，不会像浏览器端请求那样携带 cookie 等信息&lt;/p&gt;
&lt;p&gt;这时候我们可以在 axios 的配置中加上 headers cookie，其他浏览器端的信息也可以通过这种形式引入&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;js&quot;&gt;&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;axios&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;create&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    headers&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        cookie&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; req&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;cookie&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;&apos;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;5. CSS 服务器端渲染&lt;/h3&gt;
&lt;p&gt;服务器端渲染不只包含 DOM 结构和页面交互，还包扩 CSS，如果服务器端渲染的时候不渲染样式，那么页面加载的时候会有抖动，举个例子，src/containers/Home 组件下引入 CSS，给 body 设置背景色，打包后页面首次渲染出来是没有背景色的，执行 index.js 时 JS 将 CSS 模块的代码插入到 style 标签中，第二次渲染时才会有背景色，打开控制台的 Performance 面板可以看到渲染的详细过程：&lt;/p&gt;
&lt;img src=&quot;/img/react-ssr/performance.png&quot; style=&quot;width:100%; &quot; /&gt;
&lt;p&gt;为了解决这个问题，我们需要在服务器端渲染的时候将 CSS 代码插入到 style 标签中返回。&lt;/p&gt;
&lt;p&gt;在 webpack.client.js 中配置 style-loader &amp;#x26;&amp;#x26; css-loader 可以支持引入 css 模块，但是在 webpack.server.js 中这样配置则 build 时会报错：&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;yaml&quot;&gt;&lt;pre class=&quot;language-yaml&quot;&gt;&lt;code class=&quot;language-yaml&quot;&gt;webpack&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;///./node_modules/style&lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt;loader/dist/runtime/injectStylesIntoStyleTag.js&lt;span class=&quot;token punctuation&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;93&lt;/span&gt;
  var style = document.createElement(&apos;style&apos;);
              ^
&lt;span class=&quot;token key atrule&quot;&gt;ReferenceError&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; document is not defined&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这是因为服务端环境没有全局变量 window，将 style-loader 替换成 &lt;a href=&quot;https://github.com/kriasoft/isomorphic-style-loader&quot;&gt;isomorphic-style-loader&lt;/a&gt; 这个模块可以帮我们获取到所有模块的 CSS 代码，使用 insertCss 方法将这些代码插入到 style 标签中。&lt;/p&gt;
&lt;h3&gt;6. meta tags 渲染&lt;/h3&gt;
&lt;p&gt;使用 &lt;a href=&quot;https://github.com/nfl/react-helmet&quot;&gt;React-helmet&lt;/a&gt; 将 &amp;#x3C;Helmet&gt; 标签插入到组件中，即可修改 html 中 head 部分内容&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;js&quot;&gt;&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;Helmet&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;
    &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;title&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;Another Title&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;title&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;
&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;Helmet&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;7. 403 404 处理&lt;/h3&gt;
&lt;p&gt;react-router-dom 模块
import { Redirect } from ‘react-router-dom’;
服务端渲染时，使用 react-router-config 的 renderRoutes 方法，可以自动获取路由下的重定向情况，并赋值到 context 上，组件里引入 react-router-dom，提供的 &amp;#x3C;Redirect /&gt; 可以被 renderRoutes 获取到：&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;js&quot;&gt;&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; context &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; content &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;renderToString&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;Provider store&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;store&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;
        &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;StaticRouter location&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;ctx&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;request&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;path&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; context&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;context&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;
            &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;div&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;
                &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;renderRoutes&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;routes&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;div&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;
        &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;StaticRouter&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;
    &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;Provider&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;// 获取到路由重定向时&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;context&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;action &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;REPLACE&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    ctx&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;status &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;301&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    ctx&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;redirect&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;/&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;context&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;NOT_FOUND&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// 在 404 页面设置 flag，SSR 时即可拿到 404 的 flag&lt;/span&gt;
    ctx&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;status &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;404&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;在 route 配置中，所有配置项的末尾配置 NotFound 组件：&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;js&quot;&gt;&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;NotFound&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;React&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Component&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token function&quot;&gt;componentWillMount&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; staticContext &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;props&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token comment&quot;&gt;// 在 404 页面设置 flag，SSR 时即可拿到 404 的 flag&lt;/span&gt;
        staticContext &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;staticContext&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;NOT_FOUND&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;token function&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;div&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;404&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;div&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;// route 配置：&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    path&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;/&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    component&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;APP&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    routes&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;
        &lt;span class=&quot;token operator&quot;&gt;...&lt;/span&gt;allRoutes&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// 所有路由&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
            component&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; NotFound&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content:encoded></item><item><title><![CDATA[你不知道的 JavaScript (上)]]></title><description><![CDATA[读书笔记 - 未完待续]]></description><link>https://dwb1994.github.io/reading/2019-07-25-js-you-dont-know-1/</link><guid isPermaLink="false">https://dwb1994.github.io/reading/2019-07-25-js-you-dont-know-1/</guid><pubDate>Sun, 10 May 2020 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;读书笔记 - 未完待续&lt;/p&gt;</content:encoded></item><item><title><![CDATA[你不知道的 JavaScript (中)]]></title><description><![CDATA[读书笔记 - 未完待续]]></description><link>https://dwb1994.github.io/reading/2019-07-25-js-you-dont-know-2/</link><guid isPermaLink="false">https://dwb1994.github.io/reading/2019-07-25-js-you-dont-know-2/</guid><pubDate>Sun, 10 May 2020 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;读书笔记 - 未完待续&lt;/p&gt;</content:encoded></item><item><title><![CDATA[JavaScript 中的作用域]]></title><description><![CDATA[一、定义： 作用域（scope）是一套规则，用于确定“如何查找变量”以及“在何处查找变量”。 以“var a =…]]></description><link>https://dwb1994.github.io/blog/scope/</link><guid isPermaLink="false">https://dwb1994.github.io/blog/scope/</guid><pubDate>Mon, 20 Apr 2020 00:00:00 GMT</pubDate><content:encoded>&lt;h3&gt;一、定义：&lt;/h3&gt;
&lt;p&gt;作用域（scope）是一套规则，用于确定“如何查找变量”以及“在何处查找变量”。&lt;/p&gt;
&lt;p&gt;以“var a = 2”为例，变量的赋值操作会执行两个动作：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;编译器询问作用域中是否已经有该名称的变量存在于同一个作用域的集合中。如果是，编译器会忽略该声明，继续编译；否则在当前作用域集合中重新声明变量a&lt;/li&gt;
&lt;li&gt;编译器为引擎生成运行时需要的代码，处理 a = 2 这个赋值操作。运行时引擎会在作用域（链）中查找该变量，如果能找到就对它赋值，如果找不到就会抛出异常。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;作用域是一套在程序运行时控制变量访问的管理机制，规定了变量的可见区域、变量查找规则，嵌套时的检索方法。&lt;/p&gt;
&lt;h3&gt;二、如何查找变量&lt;/h3&gt;
&lt;p&gt;编译器为引擎生成了运行时需要的代码，引擎执行这段代码时，会查找变量 a 来判断它是否已经声明过。查找的过程由作用域进行协助，引擎执行查找的方式会影响查找结果，有两种方式：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;LHS （赋值操作的目标是谁）&lt;/li&gt;
&lt;li&gt;RHS（谁是赋值操作的源头）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;举例：&lt;/p&gt;
&lt;p&gt;console.log(a) 对 a 的引用是 RHS，这里没有对 a 进行赋值，需要查找并取到 a 的值，才能传递给console.log。&lt;/p&gt;
&lt;p&gt;a = 2 对 a 的引用是 LHS，我们并不关心 a 当前的值是什么，只是为了给 = 2 这个赋值操作找一个目标。&lt;/p&gt;
&lt;h3&gt;三、在何处查找变量&lt;/h3&gt;
&lt;p&gt;LHS 和 RHS 查询都会在当前执行作用域中开始，如果当前执行作用域中没找到变量，则向上级作用域继续查找，最后查找到全局作用域（顶层），无论找没找到都会停止查找。&lt;/p&gt;
&lt;p&gt;RHS 查找失败会抛出 ReferenceError 异常，LHS 查找失败会隐式创建一个全局变量（非严格模式下），严格模式下也会抛出 ReferenceError 异常。&lt;/p&gt;
&lt;h3&gt;四、词法作用域&lt;/h3&gt;
&lt;p&gt;作用域有两种主要的模型：动态作用域和静态作用域，JavaScript 中的作用域是静态作用于（也叫词法作用域），意味着作用域是由书写代码时函数声明的位置决定的。编译的词法分析阶段基本能够知道变量的位置及声明方式，从而能够预测在执行过程中如何对他们进行查找。&lt;/p&gt;
&lt;p&gt;JavaScript 中有两种方式“欺骗”词法作用域：eval 和 with。eval 对代码字符串进行运行（演算），并借此修改已经存在的词法作用域。而 with 将一个对象的引用作为作用域来处理。这两种方式都是“运行时”创建新的词法作用域。&lt;/p&gt;
&lt;p&gt;JavaScript 引擎在编译时对作用域的查找进行了优化，但上述的 eval 和 with 两种方式无法被优化（引擎认为这样的优化是无效的，因为运行时作用域有改变），因此代码允许会变慢，不建议使用这两种方式。&lt;/p&gt;
&lt;h3&gt;五、能够生成作用域的结构&lt;/h3&gt;
&lt;h4&gt;函数作用域&lt;/h4&gt;
&lt;p&gt;函数作用域是最常见的作用域单元，函数内部声明的变量或函数会在所处的作用域中“隐藏”起来。软件设计中有“最小暴露原则”：应该最小限度地暴露必要内容，而将其他内容“隐藏”起来，比如某个模块或 API 的设计。&lt;/p&gt;
&lt;h4&gt;块作用域&lt;/h4&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;jsx&quot;&gt;&lt;pre class=&quot;language-jsx&quot;&gt;&lt;code class=&quot;language-jsx&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; i&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; i&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; i&lt;span class=&quot;token operator&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
	console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;i&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;i&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// 3&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; b &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;b&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;b&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// 1&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;上面展示的 for、if 用法看似将变量声明在代码块的内部，但并不会生成块作用域。&lt;/p&gt;
&lt;p&gt;with、try/catch、let、const 这几种方式可以生成块作用域。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;let、const 为其声明的变量隐式地劫持了所在的块作用域，换句话说：用let、const 将变量附加在一个已存在的块作用域上的行为是隐式的。隐式的代码可读性弱，我们可以显式地创建块作用域，使变量的附属变得清晰。未来重构的话，显式创建的块作用域中的代码可以方便地移动。&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;垃圾回收时，块作用域可以让引擎清楚地知道有没有必要继续保留块作用域里的变量：&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;jsx&quot;&gt;&lt;pre class=&quot;language-jsx&quot;&gt;&lt;code class=&quot;language-jsx&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;process&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;token operator&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;// someBigData 执行后可被引擎销毁&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; someBigData &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;token function&quot;&gt;process&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;someBigData&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;let、const 在 for 循环头部定义，不仅可以将变量绑定到 for 循环的代码块中，还会将变量“重新绑定”到循环的每一次“迭代”中，确保上一个循环结束时的值重新进行赋值。（let声明附属于一个新的作用域，而不是当前函数的作用域）：&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;jsx&quot;&gt;&lt;pre class=&quot;language-jsx&quot;&gt;&lt;code class=&quot;language-jsx&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; i&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; i&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; i&lt;span class=&quot;token operator&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
	console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;i&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;i&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// ReferenceError&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;六、作用域与 this&lt;/h3&gt;
&lt;p&gt;在 JavaScript 中，作用域和对象类似，可见的标识符都是它的属性，但是作用域无法通过 JavaScript 代码访问，作用域存在于 JavaScript 引擎内部。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;作用域是一套规则，而 this 是个对象。&lt;/li&gt;
&lt;li&gt;作用域在词法分析时确定（编译时），而 this 是在运行时进行绑定的&lt;/li&gt;
&lt;li&gt;箭头函数根据函数所在的词法作用域来决定 this （包含的属性和值）&lt;/li&gt;
&lt;/ol&gt;</content:encoded></item><item><title><![CDATA[HTTP 权威指南]]></title><description><![CDATA[读书笔记 - 未完待续]]></description><link>https://dwb1994.github.io/reading/http/</link><guid isPermaLink="false">https://dwb1994.github.io/reading/http/</guid><pubDate>Thu, 25 Jul 2019 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;读书笔记 - 未完待续&lt;/p&gt;</content:encoded></item><item><title><![CDATA[JavaScript 高级程序设计]]></title><description><![CDATA[读书笔记 - 未完待续]]></description><link>https://dwb1994.github.io/reading/js-classic/</link><guid isPermaLink="false">https://dwb1994.github.io/reading/js-classic/</guid><pubDate>Wed, 24 Jul 2019 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;读书笔记 - 未完待续&lt;/p&gt;</content:encoded></item><item><title><![CDATA[redux 源码分析]]></title><description><![CDATA[前段时间我读了 redux 的源码，redux 的源码很简洁，但质量很高，非常值得一读。如果你已经了解了 redux 的基本使用，想深入了解一下的话，可以看一下本文帮助理解。 一、简介 redux 核心 API 很少，只有 5 个 exports 和一个 store API…]]></description><link>https://dwb1994.github.io/blog/redux-source-code/</link><guid isPermaLink="false">https://dwb1994.github.io/blog/redux-source-code/</guid><pubDate>Sat, 27 Apr 2019 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;前段时间我读了 redux 的源码，redux 的源码很简洁，但质量很高，非常值得一读。如果你已经了解了 redux 的基本使用，想深入了解一下的话，可以看一下本文帮助理解。&lt;/p&gt;
&lt;h2&gt;一、简介&lt;/h2&gt;
&lt;p&gt;redux 核心 API 很少，只有 5 个 exports 和一个 store API：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://redux.js.org/api/createstore&quot;&gt;createStore(reducer, [preloadedState], [enhancer])&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://redux.js.org/api/combinereducers&quot;&gt;combineReducers(reducers)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://redux.js.org/api/applymiddleware&quot;&gt;applyMiddleware(…middlewares)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://redux.js.org/api/bindactioncreators&quot;&gt;bindActionCreators(actionCreators, dispatch)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://redux.js.org/api/compose&quot;&gt;compose(…functions)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href=&quot;https://redux.js.org/api/store&quot;&gt;Store&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://redux.js.org/api/store#getState&quot;&gt;getState()&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://redux.js.org/api/store#dispatch&quot;&gt;dispatch(action)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://redux.js.org/api/store#subscribe&quot;&gt;subscribe(listener)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://redux.js.org/api/store#replaceReducer&quot;&gt;replaceReducer(nextReducer)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;二、各个 API 实现原理&lt;/h2&gt;
&lt;h3&gt;1. store API 与 createStore&lt;/h3&gt;
&lt;p&gt;store 是 Redux 最核心的概念，按照 Redux 的设计理念，一个应用应该只存在一个 store.&lt;/p&gt;
&lt;p&gt;store 存储了整个应用的状态树，dispatch action 是修改 store 的唯一方式, 通过 createStore 这个函数来创建 store.&lt;/p&gt;
&lt;p&gt;核心代码如下：&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;js&quot;&gt;&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;createStore&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;reducer&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token comment&quot;&gt;// 使用一个变量存储状态树&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; state&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token comment&quot;&gt;// 使用一个数组来存储当前的监听器, 监听器是一个函数&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; listeners &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;token comment&quot;&gt;// 获取 store 中存储的状态树&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;getState&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; state&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;token comment&quot;&gt;// dispatch 是修改 store 的唯一方式, &lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;dispatch&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;action&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token comment&quot;&gt;// 调用 reducer 生成新的状态树&lt;/span&gt;
        state &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;reducer&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;state&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; action&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token comment&quot;&gt;// &quot;依次&quot;执行listeners 数组中存储的监听器&lt;/span&gt;
        listeners&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;forEach&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;listener&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;listener&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;token comment&quot;&gt;// 设置监听函数, state 变化时执行&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;subscribe&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;listener&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token comment&quot;&gt;// 每设置一个监听函数, 就向 listeners 数组中添加一个监听器&lt;/span&gt;
        listeners&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;listener&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;token comment&quot;&gt;// subscribe 函数返回一个 unsubscribe 方法, 用于卸载监听函数, 即从 listeners 数组中移除&lt;/span&gt;
            listeners &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; listeners&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;l&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; l &lt;span class=&quot;token operator&quot;&gt;!==&lt;/span&gt; listener&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;token comment&quot;&gt;// 使用 createStore 创建 store 时, 调用 dispatch 来初始化 state &amp;amp; listeners&lt;/span&gt;
    &lt;span class=&quot;token function&quot;&gt;dispatch&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; dispatch&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; subscribe&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; getState &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;2. combineReducers&lt;/h3&gt;
&lt;p&gt;当应用复杂起来时，状态树会非常庞大，combineReducers 函数用于 Reducer 的拆分，提高代码可读性&lt;/p&gt;
&lt;p&gt;核心代码如下：&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;js&quot;&gt;&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// 传入的 reducers 是个对象，包含若干 reducer&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;combineReducers&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token parameter&quot;&gt;reducers&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token comment&quot;&gt;// combineReducers 最终返回一个总的 reducer&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;state &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; action&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token comment&quot;&gt;// 从传入的 reducers 对象中取出 key 组成数组迭代&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; Object&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;keys&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;reducers&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;reduce&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
            &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;nextState&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; key&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;token comment&quot;&gt;// 执行每个 reducers 以组成总的 reducer&lt;/span&gt;
                nextState&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;key&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; reducers&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;key&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;state&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;key&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; action&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; nextState&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// 第一个函数是一个回调函数，函数执行在数组中每个值&lt;/span&gt;
            &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// 第二个参数为初始值&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;3. applyMiddleware&lt;/h3&gt;
&lt;p&gt;中间件就是一个函数，参数是一个函数数组，对 store.dispatch 方法进行了改造，发出 Action 后，执行中间件，中间件处理完毕后，执行 Reducer 改变状态树。&lt;/p&gt;
&lt;p&gt;核心代码如下：&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;js&quot;&gt;&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;applyMiddleware&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;&lt;span class=&quot;token operator&quot;&gt;...&lt;/span&gt;middlewares&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token comment&quot;&gt;// 第一次调用 applyMiddleware 返回的是一个函数，返回的函数再返回一个增强的 createStore 函数&lt;/span&gt;
    &lt;span class=&quot;token comment&quot;&gt;// 如何实现增强的？见下一个代码片段&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token parameter&quot;&gt;createStore&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;&lt;span class=&quot;token operator&quot;&gt;...&lt;/span&gt;args&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; store &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;createStore&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;...&lt;/span&gt;args&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token comment&quot;&gt;// 中间件内部可以调用 getState 与 dispatch&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; middlewareAPI &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
            getState&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; store&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;getState&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;token function-variable function&quot;&gt;dispatch&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;&lt;span class=&quot;token operator&quot;&gt;...&lt;/span&gt;args&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;dispatch&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;...&lt;/span&gt;args&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;token comment&quot;&gt;// 中间件组成一个数组(chain)&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; chain &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; middlewares&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;middleware&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;middleware&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;middlewareAPI&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token comment&quot;&gt;// 该数组嵌套执行 (使用了 compose 后面会讲)，用于增强 dispatch&lt;/span&gt;
        dispatch &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;compose&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;...&lt;/span&gt;chain&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;store&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;dispatch&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token comment&quot;&gt;// 返回 store 的 api 和增强的 dispatch&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;...&lt;/span&gt;store&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; dispatch &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;applyMiddleware 即 enhancer，createStore 函数会首先判断是否有第三个参数 enhancer(即 applyMiddleware)，如果有的话调用 enhancer 来递归自己(前两个参数不变)，实现增强自己的效果。&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;js&quot;&gt;&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;createStore&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;reducer&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; preloadedState&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; enhancer&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token comment&quot;&gt;// 健壮性判断&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;typeof&lt;/span&gt; enhancer &lt;span class=&quot;token operator&quot;&gt;!==&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;undefined&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;typeof&lt;/span&gt; enhancer &lt;span class=&quot;token operator&quot;&gt;!==&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;function&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;token keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Error&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;Expected the enhancer to be a function.&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;token comment&quot;&gt;// enhancer 执行后返回增强后的 createStore，再次执行传入前两个参数不变&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;enhancer&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;createStore&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;reducer&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; preloadedState&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;使用 compose 来实现函数数组的嵌套执行，嵌套的函数会依次执行，这样做的好处是：方便编写插件。&lt;/p&gt;
&lt;p&gt;核心代码只是一个 reduce 函数：&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;js&quot;&gt;&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// compose 接收一个函数数组 返回嵌套执行的结果&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;compose&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;&lt;span class=&quot;token operator&quot;&gt;...&lt;/span&gt;funcs&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; funcs&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;reduce&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;a&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; b&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;&lt;span class=&quot;token operator&quot;&gt;...&lt;/span&gt;args&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;...&lt;/span&gt;args&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;虽然只有一行，但是这行代码很重要，funcs.reduce 传入的函数返回的也是个函数，返回的函数将迭代的两个数组项组合成一个新的函数，这么说比较抽象，举个例子：&lt;/p&gt;
&lt;p&gt;compose(functionA, functionB, functionC) 最终会返回 functionA( functionB( functionC(…args) ) ), 即执行顺序为 C &gt; B &gt; A . args 即 middlewareAPI&lt;/p&gt;
&lt;h3&gt;4. bindActionCreators&lt;/h3&gt;
&lt;p&gt;这是一个不常用的方法，将若干 actionCreator 转换成拥有同名 key 值的对象返回，返回的对象的每个属性都是一个函数，调用这些函数即可触发 dispatch&lt;/p&gt;
&lt;p&gt;核心代码如下：&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;js&quot;&gt;&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// 工具方法&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;bindActionCreator&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;actionCreator&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; dispatch&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;dispatch&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;actionCreator&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;apply&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; arguments&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;bindActionCreators&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;actionCreators&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; dispatch&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token comment&quot;&gt;// 健壮性处理: actionCreators 只传入一个函数&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;typeof&lt;/span&gt; actionCreators &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;function&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;bindActionCreator&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;actionCreators&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; dispatch&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
    
    &lt;span class=&quot;token comment&quot;&gt;// 绑定后的 actions 对象&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; boundActionCreators &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; key &lt;span class=&quot;token keyword&quot;&gt;in&lt;/span&gt; actionCreators&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; actionCreator &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; actionCreators&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;key&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;typeof&lt;/span&gt; actionCreator &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;function&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;token comment&quot;&gt;// 每个属性都是一个绑定了 action 的函数, 直接调用相当于触发 dispatch&lt;/span&gt;
            boundActionCreators&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;key&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;bindActionCreator&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;actionCreator&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; dispatch&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; boundActionCreators&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;三、感悟&lt;/h2&gt;
&lt;p&gt;Redux 的代码，给人一种优雅的感觉，个人感觉它出色之处：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;开发体验好：API 简洁明了，容易上手，属于小而美的类型；配合 DevTools 提高开发效率&lt;/li&gt;
&lt;li&gt;插件丰富：一个灵活好用的插件系统可以使得程序主体尽可能简洁的同时拥有丰富强大的扩展性，这也是 Redux 引以为傲的一点：强大的插件生态，常用的插件都能很方便地找到&lt;/li&gt;
&lt;li&gt;文档完整：由浅入深，循循善诱。除了基本的使用说明，还阐述了它的设计思想，与其说 Redux 是个工具，不如说是一种设计思想&lt;/li&gt;
&lt;/ol&gt;</content:encoded></item><item><title><![CDATA[提高网页设计里文本的易读性]]></title><description><![CDATA[…]]></description><link>https://dwb1994.github.io/blog/improve-web-legibility/</link><guid isPermaLink="false">https://dwb1994.github.io/blog/improve-web-legibility/</guid><pubDate>Mon, 24 Sep 2018 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;网页设计中，文本是最常用的元素之一，文本易读性非常重要，我们都希望页面更加清晰易读，而颜色在文本易读性中起到了至关重要的作用。
文本和背景颜色有一个“对比度”，了解并能正确调整这个对比度，将会让你的页面更加清晰易读，进而提高阅读效率和阅读体验。&lt;/p&gt;
&lt;h3&gt;问题的由来：拯救你惨不忍睹的页面设计&lt;/h3&gt;
&lt;p&gt;在缺乏专业设计的页面中，我们经常见到下面这样的画面：&lt;/p&gt;
&lt;p&gt;这是公司的某内部系统：
&lt;img src=&quot;/img/improve-web-legibility/006oPFLAly1fvo3kq4rgzj310q031ac9.jpg&quot; style=&quot;width:100%; max-width: 661px;&quot; /&gt;&lt;/p&gt;
&lt;p&gt;公司某内部工具：
&lt;img src=&quot;/img/improve-web-legibility/006oPFLAly1fvl0oz431pj30gc02at8t.jpg&quot; style=&quot;width:100%; max-width: 294px;&quot; /&gt;&lt;/p&gt;
&lt;p&gt;有没有觉得上面的文本特别刺眼，难以识别？&lt;/p&gt;
&lt;h2&gt;标准&lt;/h2&gt;
&lt;p&gt;上面的两个案例，本质上都是文本色与背景色的“对比度”不足导致的，足够的色彩“对比度”可让文字和图片更易于阅读和理解。&lt;/p&gt;
&lt;p&gt;“对比度”是指显示屏上两种相邻颜色之间的亮度或发出光线的强度的差异计算值。这个比值的范围在 1 到 21 之间（通常写为 1:1 到 21:1）；该值越大，则对比度越高。&lt;/p&gt;
&lt;p&gt;实际上，W3C 的 Web 无障碍推进组织制定了 &lt;a href=&quot;https://www.w3.org/Translations/WCAG20-zh/&quot;&gt;Web 内容无障碍指南(WCAG)&lt;/a&gt;，这个指南涉及了一些建议，这些建议可使 Web 内容更容易访问。遵循这些原则，能够让内容更易为广大残障人士所接受，包括失明和低视力、失聪和重听、学习障碍、认知障碍、行动不便、言语残疾、光过敏患者和这些病症的复合患者。遵循这些原则也可让普通用户更容易访问 Web 内容。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;简单总结一下这个标准：&lt;/strong&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&quot;left&quot;&gt;对比度等级&lt;/th&gt;
&lt;th align=&quot;left&quot;&gt;普通文本&lt;/th&gt;
&lt;th align=&quot;left&quot;&gt;大型文本&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&quot;left&quot;&gt;AA&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;4.5:1&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;3:1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;left&quot;&gt;AAA&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;7:1&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;4.5:1&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;对比度等级:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;AA 级: 符合要求的最小对比度&lt;/li&gt;
&lt;li&gt;AAA 级: 增强版的对比度，文字更清晰&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;字体大小的分界线：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;普通文本: 小于 18 磅的常规字体或 14 磅的加粗字体&lt;/li&gt;
&lt;li&gt;大型文本: 于 18 磅的常规字体或 14 磅的加粗字体&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;那么如何实现符合 WCAG 规范的对比度呢？如何在项目中渐变快捷地进行调整呢？&lt;/p&gt;
&lt;h2&gt;使用工具调整对比度&lt;/h2&gt;
&lt;p&gt;有很多工具可以调整对比度，这里列举一些我使用过的工具：&lt;/p&gt;
&lt;h3&gt;1. &lt;a href=&quot;https://contrast-ratio.com/&quot;&gt;色彩对比度计算器&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;一个在线的，计算任意两种有效 CSS 颜色之间对比度的工具。&lt;/p&gt;
&lt;p&gt;两侧分别为文本颜色与背景色，中间一个醒目的圆盘，显示二者的对比度，鼠标移动到这个圆盘上可以查看该对比度符合 AA/AAA 对比度标准。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/img/improve-web-legibility/006oPFLAly1fvm422c251j318c0md442.jpg&quot;&gt;&lt;/p&gt;
&lt;h3&gt;2. Chrome 浏览器控制台&lt;/h3&gt;
&lt;p&gt;对于开发的同学来说，这种方式也很快捷方便。新版的 Chrome 浏览器增强了 CSS 的调色功能：&lt;/p&gt;
&lt;p&gt;打开控制台，选中一个 &lt;strong&gt;文本元素&lt;/strong&gt; 然后在 Styles 中找到 color 属性，点击 &lt;strong&gt;颜色值&lt;/strong&gt;，可以看到一个调色板。
&lt;img src=&quot;/img/improve-web-legibility/006oPFLAly1fvoa81omdyj30hd09w40q.jpg&quot;&gt;&lt;/p&gt;
&lt;p&gt;然后点击调色板的 Contrast radio 选项，展开对比度计算工具，可以看到上方的调色板出现一条白线，这条白线就是符合 AA 级对比度标准的临界值。调色板中的圆圈就是当前选中的色值，拖动这个色值即可调整文本颜色，这时下方的对比度计算工具进行了实时计算：&lt;/p&gt;
&lt;div class=&quot;imgContainer&quot;&gt;&lt;img src=&quot;/img/improve-web-legibility/006oPFLAly1fvm4mbk5tpj306f0b1wfe.jpg&quot; /&gt;&lt;img src=&quot;/img/improve-web-legibility/006oPFLAly1fvm4vfw2h7g306f0b1x3p.gif&quot; /&gt;&lt;/div&gt;
&lt;h3&gt;3. 使用 JS 进行精准计算&lt;/h3&gt;
&lt;p&gt;通过构建工具即可在构建时进行对比度的验证，从而保证 UI 中的文本易读性符合标准。&lt;/p&gt;
&lt;p&gt;有一些开源的 JS 库可以进行对比度的计算，这里我找到了一个很好用的库： &lt;a href=&quot;https://github.com/bgrins/TinyColor#readability&quot;&gt;TinyColor&lt;/a&gt;, 通过 readability 函数计算两个颜色的对比度：&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;js&quot;&gt;&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;tinycolor&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;readability&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;#000&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;#000&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// 1&lt;/span&gt;
tinycolor&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;readability&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;#000&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;#111&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// 1.1121078324840545&lt;/span&gt;
tinycolor&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;readability&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;#000&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;#fff&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// 21&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;通过 isReadable 函数判断是否符合 AA/AAA 级对比度标准：&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;js&quot;&gt;&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;tinycolor&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;isReadable&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;#000&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;#111&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// false&lt;/span&gt;
tinycolor&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;isReadable&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;#ff0088&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;#5c1a72&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;level&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;AA&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;size&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;small&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;//false&lt;/span&gt;
tinycolor&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;isReadable&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;#ff0088&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;#5c1a72&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;level&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;AA&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;size&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;large&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;//true&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;通过 JS 进行对比度的计算，举个栗子，一个最常见的场景: 手机顶部状态栏中文本非常显眼，背景色多变，但文本色的正确搭配往往被忽视，下图是我们 APP 中某个页面的状态栏：&lt;/p&gt;
&lt;img src=&quot;/img/improve-web-legibility/006oPFLAly1fvm5vcxwwfj30f002aq3a.jpg&quot; style=&quot;width:100%; max-width: 540px;&quot; /&gt;
&lt;p&gt;可以看到状态栏的文本是黑色，而 header 中的文本颜色又是白色，一般来说状态栏的颜色设置为黑色或白色（iOS 中只能设置这两种颜色），这时状态栏的颜色最好根据 js 来计算，人为设置黑色或白色容易搭配不当或者遗漏配置。&lt;/p&gt;
&lt;h2&gt;一些技巧&lt;/h2&gt;
&lt;h3&gt;1. 文本使用带有半透明度的黑色或白色&lt;/h3&gt;
&lt;p&gt;在彩色背景上使用灰色文本会降低对比度:&lt;/p&gt;
&lt;img src=&quot;/img/improve-web-legibility/006oPFLAly1fvma9idexgj30iw07st9g.jpg&quot; style=&quot;width:100%; max-width: 680px;&quot; /&gt;
&lt;p&gt;最早是在 Material Design 的设计规范中看到的这个技巧，使用透明的黑白色文本和彩色背景的时候，文本颜色会混合成相应的深色，例如上图中的深粉色。这样做的好处是背景颜色变化的时候文本颜色会自动混合成对应的深色，不必改变文本的颜色值。&lt;/p&gt;
&lt;h3&gt;2. 告别五彩斑斓的文本&lt;/h3&gt;
&lt;p&gt;页面中色彩不宜过多，谨慎使用彩色文本，应该把彩色留给按钮、链接、开关等组件，这样做的好处是文本层次鲜明，&lt;strong&gt;失去控制&lt;/strong&gt;的过多色彩会让内容缺乏重点。&lt;/p&gt;
&lt;p&gt;正文使用黑白色（在大段的正文中使用彩色文本不利于阅读）&lt;/p&gt;
&lt;h3&gt;3. 使用不同半透明度的文本&lt;/h3&gt;
&lt;p&gt;按照功能的重要性，为文本制定不同半透明度的规范，从而对不同层次信息的对比度加以区分。&lt;/p&gt;
&lt;p&gt;使用不同半透明度的文本，用于区分标题、正文、描述文本、提示文本和icon。这样做可以让读者阅读起来有一定的优先级关系，可以让信息层次鲜明，有助于用户理解关键信息，减少阅读时候的疲劳感。&lt;/p&gt;
&lt;img src=&quot;/img/improve-web-legibility/006oPFLAly1fvmaudlnt7j315o0ekjun.jpg&quot; style=&quot;width:100%; max-width: 700px;&quot; /&gt;
&lt;h3&gt;4. 多种色彩的背景上使用文本&lt;/h3&gt;
&lt;p&gt;如果背景的色彩比较复杂（如渐变色、图案等），则可以根据平均值来作为背景色计算对比度。&lt;/p&gt;
&lt;p&gt;如果背景色的色彩差异较大，则应在文本和背景之间添加遮罩。&lt;/p&gt;
&lt;h3&gt;5. 使用 JS 进行对比度的计算&lt;/h3&gt;
&lt;p&gt;即上文提到的使用 &lt;a href=&quot;https://github.com/bgrins/TinyColor#readability&quot;&gt;TinyColor&lt;/a&gt; 工具进行精确计算，在构建工具中验证。&lt;/p&gt;
&lt;h3&gt;6. 根据实际场景调整对比度&lt;/h3&gt;
&lt;p&gt;虽然 WCAG 提出了 AA/AAA 级对比度标准，但是实际使用时应从用户角度出发，根据实际场景确定是否需要更强烈的对比度，举几个例子：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;设备质量：屏幕质量是否比较差、投影仪是否老化，显示效果不好的时候应提高对比度&lt;/li&gt;
&lt;li&gt;分散注意：用户在跑步、乘车、嘈杂环境这样的不稳定场景中使用，分散在界面上的注意力会大打折扣，这时应提高对比度&lt;/li&gt;
&lt;li&gt;用户视觉能力：近视、散光甚至色盲、色弱的比例&lt;/li&gt;
&lt;li&gt;其他影响：是否有其他光源影响显示&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;算法探究与优化&lt;/h2&gt;
&lt;h3&gt;Material Design 根据对比度判断使用黑色/白色的源码&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/material-components/material-components-web/blob/master/packages/mdc-theme/_functions.scss&quot;&gt;源码链接&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;这段代码用 sass 实现了若干函数，其中：&lt;/p&gt;
&lt;p&gt;** 1. @function mdc-theme-contrast-tone ** 传入一个颜色值，返回该颜色背景上应该使用的颜色为 &lt;strong&gt;light / dark&lt;/strong&gt; 颜色&lt;/p&gt;
&lt;p&gt;** 2. @function mdc-theme-tone ** 传入一个颜色值，返回该颜色为 &lt;strong&gt;light / dark&lt;/strong&gt; 颜色，核心代码：&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;scss&quot;&gt;&lt;pre class=&quot;language-scss&quot;&gt;&lt;code class=&quot;language-scss&quot;&gt;  &lt;span class=&quot;token comment&quot;&gt;// 传入的颜色值为 $color&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;&lt;span class=&quot;token variable&quot;&gt;$lightContrast&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;mdc-theme-contrast&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token variable&quot;&gt;$color&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; white&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// 计算传入颜色和白色的对比度&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;&lt;span class=&quot;token variable&quot;&gt;$darkContrast&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;mdc-theme-contrast&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token variable&quot;&gt;$color&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;rgba&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;black&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; .87&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// 计算传入颜色和黑色的对比度&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;&lt;span class=&quot;token variable&quot;&gt;$minimumContrast&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 3.1&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// 设置最小对比度&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;@if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token variable&quot;&gt;$lightContrast&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;token variable&quot;&gt;$minimumContrast&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token variable&quot;&gt;$darkContrast&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token variable&quot;&gt;$lightContrast&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token comment&quot;&gt;// 传入的颜色值和白色的对比度小于最小对比度 并且 和黑色的对比度更高&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;@return&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;light&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// 我们认为传入的颜色是浅色&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;@else&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token comment&quot;&gt;// 我们认为传入的颜色是深色&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;@return&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;dark&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;3.👆 上面的代码中用到了计算对比度的函数 &lt;strong&gt;mdc-theme-contrast&lt;/strong&gt; 也在这段代码中，对比度是这样计算的：&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;scss&quot;&gt;&lt;pre class=&quot;language-scss&quot;&gt;&lt;code class=&quot;language-scss&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// 计算颜色的相对亮度（relative luminance）&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;@function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;mdc-theme-luminance&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token variable&quot;&gt;$color&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;&lt;span class=&quot;token variable&quot;&gt;$red&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;nth&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token variable&quot;&gt;$mdc-theme-linear-channel-values&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;red&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token variable&quot;&gt;$color&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; 1&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;&lt;span class=&quot;token variable&quot;&gt;$green&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;nth&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token variable&quot;&gt;$mdc-theme-linear-channel-values&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;green&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token variable&quot;&gt;$color&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; 1&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;&lt;span class=&quot;token variable&quot;&gt;$blue&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;nth&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token variable&quot;&gt;$mdc-theme-linear-channel-values&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;blue&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token variable&quot;&gt;$color&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; 1&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;@return&lt;/span&gt; .2126 &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;token variable&quot;&gt;$red&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; .7152 &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;token variable&quot;&gt;$green&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; .0722 &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;token variable&quot;&gt;$blue&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;// 计算两个颜色的对比度（contrast ratio）&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;@function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;mdc-theme-contrast&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token variable&quot;&gt;$back&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token variable&quot;&gt;$front&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;&lt;span class=&quot;token variable&quot;&gt;$backLum&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;mdc-theme-luminance&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token variable&quot;&gt;$back&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; .05&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;&lt;span class=&quot;token variable&quot;&gt;$foreLum&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;mdc-theme-luminance&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token variable&quot;&gt;$front&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; .05&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;@return&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;max&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token variable&quot;&gt;$backLum&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token variable&quot;&gt;$foreLum&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;min&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token variable&quot;&gt;$backLum&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token variable&quot;&gt;$foreLum&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这里用到了一个对比度计算公式： &lt;a href=&quot;https://www.w3.org/TR/WCAG20-TECHS/G17.html#G17-tests&quot;&gt;https://www.w3.org/TR/WCAG20-TECHS/G17.html#G17-tests&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;可以看到一些有趣的参数：&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;scss&quot;&gt;&lt;pre class=&quot;language-scss&quot;&gt;&lt;code class=&quot;language-scss&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;@return&lt;/span&gt; .2126 &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;token variable&quot;&gt;$red&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; .7152 &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;token variable&quot;&gt;$green&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; .0722 &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;token variable&quot;&gt;$blue&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;相同的色值，绿色要显得亮一些，相反蓝色要显得暗一些。&lt;/strong&gt;&lt;/p&gt;
&lt;h3&gt;优化：支持半透明度颜色混合&lt;/h3&gt;
&lt;p&gt;Material Design 在计算传入颜色和黑色的对比度时，传入的是一个带有半透明度的色值，实际上在执行时会按照纯黑色(不带有半透明度)进行解析。&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;scss&quot;&gt;&lt;pre class=&quot;language-scss&quot;&gt;&lt;code class=&quot;language-scss&quot;&gt;&lt;span class=&quot;token property&quot;&gt;&lt;span class=&quot;token variable&quot;&gt;$darkContrast&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;mdc-theme-contrast&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token variable&quot;&gt;$color&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;rgba&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;black&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; .87&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// 计算传入颜色和黑色的对比度&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;我理解的 &lt;strong&gt;rgba(black, .87)&lt;/strong&gt; 指的是 Material Design 规定的正文字体颜色（深色），因此这里按照半透明色进行解析会更好一些，这样我们判断颜色是深色还是浅色时的依据就是页面上最深的文本颜色 (#000 87%) 和最浅的背景颜色 (#fff 100%) 了。&lt;/p&gt;
&lt;p&gt;用 js 来实现这个混合的过程 (依赖 tinycolor)：&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;js&quot;&gt;&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// Alpha 合成 支持前景色半透明&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;mixColor&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;front&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; back&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; rgbFront &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;tinycolor&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;front&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;toRgb&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; rgbBack &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;tinycolor&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;back&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;toRgb&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; alphaFront &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; rgbFront&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;a&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; mixR &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; alphaFront &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; rgbFront&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;r &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt; alphaFront&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; rgbBack&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;r&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; mixG &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; alphaFront &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; rgbFront&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;g &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt; alphaFront&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; rgbBack&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;g&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; mixB &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; alphaFront &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; rgbFront&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;b &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt; alphaFront&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; rgbBack&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;b&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; res &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;tinycolor&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; r&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; mixR&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; g&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; mixG&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; b&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; mixB &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;toHexString&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; res&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Alpha 合成算法来自： &lt;a href=&quot;https://zh.wikipedia.org/wiki/Alpha%E5%90%88%E6%88%90&quot;&gt;维基百科 - Alpha 合成&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;优化：支持调节最小对比度&lt;/h3&gt;
&lt;p&gt;Material Design 中最小对比度是写死的 &lt;strong&gt;3.1&lt;/strong&gt;，不知道为什么没有设置为 AA/AAA 级对比度标准，这里可以传入参数来指定最小对比度：&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;js&quot;&gt;&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;contrast&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;color&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; contrast&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;color &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;light&apos;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;||&lt;/span&gt; color &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;dark&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; color&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; minimumContrast &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; contrast &lt;span class=&quot;token operator&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;3.5&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; lightContrast &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;getContrast&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;color&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;#fff&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; darkContrast &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;getContrast&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;color&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;#000&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;lightContrast &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt; minimumContrast &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; darkContrast &lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; lightContrast&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;light&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;dark&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;用 js 实现&lt;/h3&gt;
&lt;p&gt;上文提到的 Material Design 的源码包含的几个函数，在 &lt;a href=&quot;https://github.com/bgrins/TinyColor&quot;&gt;TinyColor&lt;/a&gt; 这个工具里都有实现。&lt;/p&gt;
&lt;p&gt;我按照 Material Design 的实现思路，用 js 实现了一遍，增加了上文提到的两个优化点 (支持半透明度颜色混合 / 支持调节最小对比度): &lt;a href=&quot;https://github.com/dwb1994/lightordark&quot;&gt;源码地址&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;参考资料&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://support.google.com/accessibility/android/answer/7158390?hl=zh-Hans&quot;&gt;Android accessibility 帮助 - 色彩对比度&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://developer.apple.com/design/human-interface-guidelines/ios/app-architecture/accessibility/&quot;&gt;Human Interface Guidelines - iOS - Accessibility&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://material.io/design/color/text-legibility.html#&quot;&gt;Material Design - Text legibility&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;style&gt;
.imgContainer {
  display: flex;
}

@media (max-width: 767px) {
  .imgContainer {
    display: block;
  }
}

&lt;/style&gt;</content:encoded></item><item><title><![CDATA[YApi Design]]></title><description><![CDATA[作品信息 制作日期: 2017年 8月 ~ 10月 设计师: 我自己 简介: 17k+ Star 的明星开源项目！ YApi 是一个可本地部署的、打通前后端及QA的、可视化的接口管理平台。 背景: 本人参与了 YApi…]]></description><link>https://dwb1994.github.io/design/design-yapi/</link><guid isPermaLink="false">https://dwb1994.github.io/design/design-yapi/</guid><pubDate>Fri, 01 Jun 2018 00:00:00 GMT</pubDate><content:encoded>&lt;h2&gt;作品信息&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;制作日期: 2017年 8月 ~ 10月&lt;/li&gt;
&lt;li&gt;设计师: 我自己&lt;/li&gt;
&lt;li&gt;简介: &lt;strong&gt;17k+ Star 的明星开源项目！&lt;/strong&gt; YApi 是一个可本地部署的、打通前后端及QA的、可视化的接口管理平台。&lt;/li&gt;
&lt;li&gt;背景: 本人参与了 YApi 一期、二期的开发，其中一期开发没有设计稿，只有简单的原型图。因此在二期开发之前我根据二期开发的需求和交互稿，利用一个周末时间画出了8张界面设计稿，并制作了新版首页(没有设计稿，一边设计一边写页面)。&lt;/li&gt;
&lt;li&gt;链接: &lt;a href=&quot;https://hellosean1025.github.io/yapi/&quot;&gt;YApi 官网&lt;/a&gt; 丨 &lt;a href=&quot;https://github.com/YMFE/yapi&quot;&gt;Github&lt;/a&gt; | &lt;a href=&quot;http://yapi.demo.qunar.com/&quot;&gt;开放 Demo&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;鸣谢&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;YApi 使用了 &lt;a href=&quot;https://ant.design/index-cn&quot;&gt;Ant Design&lt;/a&gt; 组件库，这套设计语言非常棒，当时使用了 Ant Design 提供的 sketch 模板在很短的时间里产出了 8 张设计稿，非常给力！&lt;/li&gt;
&lt;li&gt;感谢 &lt;a href=&quot;https://stripe.com/&quot;&gt;stripe&lt;/a&gt; 网站的设计，给了我很多的灵感！&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;LOGO 设计&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;https://tva1.sinaimg.cn/large/006oPFLAly1frrknd8z9lj306o06o3zd.jpg&quot;&gt;&lt;/p&gt;
&lt;p&gt;红绿蓝，三原色，作为 LOGO 的配色，三个条纹夹角为 120°，相交于一个白色的圆形纽扣，相互连接。&lt;/p&gt;
&lt;p&gt;YApi 接口管理平台旨在为开发、产品、测试人员提供更优雅的接口管理服务，因此这个 LOGO 寓意着打通“开发”、“产品”、“测试”三者之间的沟壑，共同获取更优雅的使用体验。&lt;/p&gt;
&lt;h2&gt;页面设计&lt;/h2&gt;
&lt;h3&gt;首页：&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;https://tva1.sinaimg.cn/large/006oPFLAly1frrk5f11cnj32484pt15q.jpg&quot;&gt;&lt;/p&gt;
&lt;h3&gt;登录页：&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;https://tva1.sinaimg.cn/large/006oPFLAly1frrkrxyy0vj327g18iqv5.jpg&quot;&gt;&lt;/p&gt;
&lt;h3&gt;项目广场：&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;https://tva1.sinaimg.cn/large/006oPFLAly1frrkvr495ej3280254ana.jpg&quot;&gt;&lt;/p&gt;
&lt;h3&gt;接口列表：&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;https://tva1.sinaimg.cn/large/006oPFLAly1frrkvq5764j328016679h.jpg&quot;&gt;&lt;/p&gt;
&lt;h3&gt;接口预览：&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;https://tva1.sinaimg.cn/large/006oPFLAly1frrkvr7l2tj3280314wvc.jpg&quot;&gt;&lt;/p&gt;
&lt;h2&gt;强调一下&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;链接: &lt;a href=&quot;https://hellosean1025.github.io/yapi/&quot;&gt;YApi 官网&lt;/a&gt; 丨 &lt;a href=&quot;https://github.com/YMFE/yapi&quot;&gt;Github&lt;/a&gt; | &lt;a href=&quot;http://yapi.demo.qunar.com/&quot;&gt;开放 Demo&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content:encoded></item><item><title><![CDATA[YMFE 文化衫 2017]]></title><description><![CDATA[作品信息 制作日期: 2017年 7月 7日 设计师: 我自己 简介: 2017年 团队文化衫： 黑色圆领T恤 LOGO 设计  配色使用了 YMFE 的主题色，也是我们 LOGO 的颜色 ； 使用了这一年比较流行的渐变色风格，并在 YMFE LOGO…]]></description><link>https://dwb1994.github.io/design/design-2017TShirt/</link><guid isPermaLink="false">https://dwb1994.github.io/design/design-2017TShirt/</guid><pubDate>Tue, 29 May 2018 00:00:00 GMT</pubDate><content:encoded>&lt;h2&gt;作品信息&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;制作日期: 2017年 7月 7日&lt;/li&gt;
&lt;li&gt;设计师: 我自己&lt;/li&gt;
&lt;li&gt;简介: &lt;strong&gt;2017年 团队文化衫： 黑色圆领T恤&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;LOGO 设计&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;https://tva1.sinaimg.cn/large/006oPFLAly1frs0lrrvrhj33wv2jv7e7.jpg&quot;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;配色使用了 YMFE 的主题色，也是我们 LOGO 的颜色 &lt;code class=&quot;language-text&quot;&gt;#ff561b&lt;/code&gt;；&lt;/li&gt;
&lt;li&gt;使用了这一年比较流行的渐变色风格，并在 YMFE LOGO中再次使用不同种渐变以强调LOGO的四个字母；&lt;/li&gt;
&lt;li&gt;整个图案是一台向前飞驰的自行车，由若干字母与少量图案拼成，主体的单词包括“YMFE”、“WE”、“CREATE”、“INSPIRATION”、“POWER”、“LOVE”；&lt;/li&gt;
&lt;li&gt;有若干英文短句用作了气流残影，例如 “Talk is cheap show me your code”；&lt;/li&gt;
&lt;li&gt;两个原型车轮（二零）中嵌入了 1 7 两个数字，合起来即“2017”。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;实物展示&lt;/h2&gt;
&lt;h3&gt;合照：&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;https://tva1.sinaimg.cn/large/006cGJIjly1fj1zp6yrkvj31jk1117ei.jpg&quot;&gt;
&lt;img src=&quot;https://tva1.sinaimg.cn/large/006oPFLAly1frs12ay89mj30zk0qodit.jpg&quot;&gt;
&lt;img src=&quot;https://tva1.sinaimg.cn/large/006oPFLAly1frs12azzmkj30zk0qoadc.jpg&quot;&gt;&lt;/p&gt;</content:encoded></item><item><title><![CDATA[YDoc Design]]></title><description><![CDATA[作品信息 制作日期: 2018年 3月 ~ 4月 设计师: 我和@文杰 简介: YDoc 是一个更懂你的文档站构建工具，基于 markdown 轻松生成完整静态站点。目前 Github 500+ star 链接: YDoc 官网 丨 Github 本作品包含一整套 Web…]]></description><link>https://dwb1994.github.io/design/design-ydoc/</link><guid isPermaLink="false">https://dwb1994.github.io/design/design-ydoc/</guid><pubDate>Fri, 04 May 2018 00:00:00 GMT</pubDate><content:encoded>&lt;h2&gt;作品信息&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;制作日期: 2018年 3月 ~ 4月&lt;/li&gt;
&lt;li&gt;设计师: 我和&lt;a href=&quot;https://github.com/amnsss&quot;&gt;@文杰&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;简介: YDoc 是一个更懂你的文档站构建工具，基于 markdown 轻松生成完整静态站点。目前 Github 500+ star&lt;/li&gt;
&lt;li&gt;链接: &lt;a href=&quot;https://ydoc.ymfe.org/&quot;&gt;YDoc 官网&lt;/a&gt; 丨 &lt;a href=&quot;https://github.com/YMFE/ydoc&quot;&gt;Github&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;本作品包含一整套 Web 站点的设计，采用移动优先原则：优先进行移动端页面的设计与开发，并在 PC 端实现响应式设计，有兴趣的同学可以在 YDoc 的源码里发现这一设计。&lt;/p&gt;
&lt;h2&gt;设计规范&lt;/h2&gt;
&lt;p&gt;YDoc 的设计稿经过设计师的几度推敲重做，诞生了现在你看到的默认主题 🤓，YDoc 有如下设计理念：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;💃青春：使用大胆、活泼的配色方案，体现 YMFE 的产品文化&lt;/li&gt;
&lt;li&gt;🤗科学：以科学的态度对待视觉设计、功能设计，让设计有迹可循&lt;/li&gt;
&lt;li&gt;🤔简洁：以 无形 代替 有形，从 UI 到开发体验，不断去除冗余的设计，使用户专注于写作与阅读&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在设计之前，我们制定了一系列的&lt;a href=&quot;https://ydoc.ymfe.org/standard/style-guide.html&quot;&gt;设计规范&lt;/a&gt;，包含色彩(配色方案)、字体(字号、行高等)，并在编码阶段首先实现这部分规范，以便于样式代码的复用。
设计规范如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://tva1.sinaimg.cn/large/006oPFLAly1fqg5gc8g3uj328018qqhk.jpg&quot; alt=&quot;YDoc Design 设计规范&quot;&gt;&lt;/p&gt;
&lt;p&gt;对 YDoc 的设计规范感兴趣的同学可以查看 &lt;a href=&quot;https://ydoc.ymfe.org/standard/style-guide.html&quot;&gt;YDoc 官网中设计规范的介绍&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;LOGO 设计&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;https://tva1.sinaimg.cn/large/006oPFLAly1fqynlfth2fj31f40p6h5w.jpg&quot; alt=&quot;LOGO&quot;&gt;&lt;/p&gt;
&lt;p&gt;使用狗狗的头像作为 YDoc 的 LOGO，狗狗作为人类的好朋友，有着敏捷、灵动的特点。&lt;/p&gt;
&lt;p&gt;在进行 LOGO 设计的过程中，我在 google 图片上面搜索了大量狗狗的头像，最终选择了这只看起来很有灵性的狗狗。选好“模特”后，在 Photoshop 里进行了加工，色彩模式变为灰度来观察阴影关系，调高饱和度和对比度观察头像轮廓。&lt;/p&gt;
&lt;p&gt;观察后用 sketch 的矢量工具手撸出了这个头像。&lt;/p&gt;
&lt;h2&gt;banner 设计&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;https://tva1.sinaimg.cn/large/006oPFLAly1frrj8lpon4j316s0b0di3.jpg&quot;&gt;&lt;/p&gt;
&lt;h2&gt;页面设计&lt;/h2&gt;
&lt;h3&gt;首页：&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;https://tva1.sinaimg.cn/large/006oPFLAly1frrjetnwjyj32801u048k.jpg&quot;&gt;&lt;/p&gt;
&lt;h3&gt;文档页&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;https://tva1.sinaimg.cn/large/006oPFLAly1frrjh8of2xj328018mdp6.jpg&quot;&gt;&lt;/p&gt;
&lt;h3&gt;移动端&lt;/h3&gt;
&lt;div class=&quot;img-container&quot;&gt;
    &lt;img class=&quot;img-sm&quot; src=&quot;https://tva1.sinaimg.cn/large/006oPFLAly1frrjjeo799j30ku112tbm.jpg&quot;&gt;
    &lt;img class=&quot;img-sm&quot; src=&quot;https://tva1.sinaimg.cn/large/006oPFLAly1frrjjes1p5j30ku112jwg.jpg&quot;&gt;
    &lt;img class=&quot;img-sm&quot; src=&quot;https://tva1.sinaimg.cn/large/006oPFLAly1frrjjemv8uj30ku112ac7.jpg&quot;&gt;
&lt;/div&gt;
&lt;h2&gt;插件(小部件)&lt;/h2&gt;
&lt;div class=&quot;img-container&quot;&gt;
    &lt;img class=&quot;img-sm&quot; src=&quot;https://tva1.sinaimg.cn/large/006oPFLAly1frrjoporv0j30og0q2djk.jpg&quot;&gt;
    &lt;img class=&quot;img-sm&quot; src=&quot;https://tva1.sinaimg.cn/large/006oPFLAly1frrjopqvasj30qq0lmn0c.jpg&quot;&gt;
    &lt;img class=&quot;img-sm&quot; src=&quot;https://tva1.sinaimg.cn/large/006oPFLAly1frrjopli32j30iu0d2gmz.jpg&quot;&gt;
&lt;/div&gt;
&lt;h2&gt;强调一下&lt;/h2&gt;
&lt;p&gt;链接: &lt;a href=&quot;https://ydoc.ymfe.org/&quot;&gt;YDoc 官网&lt;/a&gt; 丨 &lt;a href=&quot;https://github.com/YMFE/ydoc&quot;&gt;Github&lt;/a&gt;&lt;/p&gt;</content:encoded></item><item><title><![CDATA[使用 React 管理你的设计资产]]></title><description><![CDATA[前言 最近在整理设计规范的过程中，尝试使用了 Airbnb 公司发布的 react-sketchapp 工具，感觉非常好用，在这里墙裂推荐一哈，顺便聊一聊使用过程中的体会： 这是一个使用 React 生成 Sketch 文件的命令行工具，主要用于生成设计系统(design…]]></description><link>https://dwb1994.github.io/blog/react-sketchapp-build-design-system/</link><guid isPermaLink="false">https://dwb1994.github.io/blog/react-sketchapp-build-design-system/</guid><pubDate>Sun, 15 Apr 2018 00:00:00 GMT</pubDate><content:encoded>&lt;h2&gt;前言&lt;/h2&gt;
&lt;p&gt;最近在整理设计规范的过程中，尝试使用了 Airbnb 公司发布的 &lt;a href=&quot;https://github.com/airbnb/react-sketchapp&quot;&gt;react-sketchapp&lt;/a&gt; 工具，感觉非常好用，在这里墙裂推荐一哈，顺便聊一聊使用过程中的体会：&lt;/p&gt;
&lt;p&gt;这是一个使用 React 生成 Sketch 文件的命令行工具，主要用于生成设计系统(design system)，**简单来说就是使用 &lt;code class=&quot;language-text&quot;&gt;代码&lt;/code&gt; 生成 &lt;code class=&quot;language-text&quot;&gt;设计稿&lt;/code&gt; **。这个跨界的工具提供了一种很新颖的思路，在某些特定情况下有其应用场景。&lt;/p&gt;
&lt;p&gt;设计师同学们可能不了解 React，如果你们想了解一点点编程的话，从这个工具开始学习，可能是一个很好的入口 😁&lt;/p&gt;
&lt;h2&gt;为什么要用代码生成设计稿&lt;/h2&gt;
&lt;p&gt;用代码生成设计稿是一种新颖的思路，那么为什么要这样做呢？这样做有什么好处？官方是这样介绍的：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Managing the assets of design systems in Sketch is complex, error-prone and time consuming. Sketch is scriptable, but the API often changes. React provides the perfect wrapper to build reusable documents in a way already familiar to JavaScript developers.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;简言之：&lt;strong&gt;代码可以更好地控制设计资产的版本迭代&lt;/strong&gt;。这也是我们使用这个工具的核心原因：设计资产的稳定迭代能够提高设计师与零设计团队的工作效率。&lt;/p&gt;
&lt;p&gt;在设计规范逐渐复杂时，对规范的版本迭代变得越来越难。以往设计师需要手动去修改规范，这样往往容易出错，而且速度比较慢，尤其是制作一些重复性较强的内容的时候，例如调色板上面可能会有上百种颜色，这些色彩可能会频繁调整。&lt;/p&gt;
&lt;p&gt;除此以外，使用代码生成设计稿还有一些优点：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;代码可以方便地输出重复性的视图&lt;/li&gt;
&lt;li&gt;React-sketchapp 这个工具使用 React 的语法，有利于程序上的复用，包括组件代码及其样式。个人感觉写起来很像 React Native&lt;/li&gt;
&lt;li&gt;使用真实数据或组件生成设计稿，这将使设计稿与最终产出的页面更接近&lt;/li&gt;
&lt;li&gt;基于 Sketch 定制一些效率工具，举个栗子：&lt;strong&gt;通过简单的配置生成完整设计规范&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;如何使用？&lt;/h2&gt;
&lt;h3&gt;快速上手&lt;/h3&gt;
&lt;p&gt;上手 react-sketchapp 很简单，首先确保你已经安装了 43 及以上版本的 sketch，确保安装了 npm。&lt;/p&gt;
&lt;p&gt;然后在终端中执行下面两句命令：&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;bash&quot;&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token function&quot;&gt;git&lt;/span&gt; clone https://github.com/airbnb/react-sketchapp.git // 从 github 上将 react-sketchapp 项目克隆到本地
&lt;span class=&quot;token builtin class-name&quot;&gt;cd&lt;/span&gt; react-sketchapp/examples/basic-setup // 进入项目的 /examples/basic-setup 目录
&lt;span class=&quot;token function&quot;&gt;npm&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;install&lt;/span&gt; // 安装 &lt;span class=&quot;token function&quot;&gt;npm&lt;/span&gt; 依赖&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;安装完成后&lt;strong&gt;新建一个 sketch 文件&lt;/strong&gt;，这里注意一定要&lt;strong&gt;新建文件&lt;/strong&gt;，react-sketchapp 会在当前&lt;strong&gt;最新&lt;/strong&gt;打开的 sketch 文件进行输出！&lt;/p&gt;
&lt;p&gt;然后在终端中输入下面这条命令并执行（执行后请不要关闭终端窗口）：&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;bash&quot;&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token function&quot;&gt;npm&lt;/span&gt; run render&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;在 sketch 文件中看到下图的样子说明配置成功：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/img/react-sketchapp-build-design-system/006oPFLAly1fqg3cdlfs9j31js0v0474.jpg&quot;&gt;&lt;/p&gt;
&lt;p&gt;用编辑器打开 react-sketchapp 目录，里面 /examples/basic-setup/src/my-command.js 就是上图的代码，现在可以复制官方给的一段示例代码到这个文件中简单地看下效果：&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;jsx&quot;&gt;&lt;pre class=&quot;language-jsx&quot;&gt;&lt;code class=&quot;language-jsx&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; React &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;react&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; render&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; Text&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; Artboard &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;react-sketchapp&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;App&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token parameter&quot;&gt;props&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
  &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Artboard&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Text&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;style&lt;/span&gt;&lt;span class=&quot;token script language-javascript&quot;&gt;&lt;span class=&quot;token script-punctuation punctuation&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; fontFamily&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;Comic Sans MS&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; color&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;hotPink&apos;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;props&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;message&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Text&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Artboard&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token function&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;App&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;Hello world!&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;/&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; context&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;document&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;currentPage&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;点击保存，sketch 文件会自动刷新，刷新后是下图的效果：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/img/react-sketchapp-build-design-system/006oPFLAly1fqg3ky8d5qj318g0loq7m.jpg&quot;&gt;&lt;/p&gt;
&lt;h3&gt;使用 API&lt;/h3&gt;
&lt;p&gt;react-sketchapp 提供了全面的 API，包含了绝大部分 sketch 的功能&lt;/p&gt;
&lt;p&gt;首先打开 &lt;a href=&quot;http://airbnb.io/react-sketchapp/docs/API.html#document&quot;&gt;API 文档地址&lt;/a&gt;, 左侧的 &lt;strong&gt;API Reference&lt;/strong&gt; 就是 API 列表，这里面我常用的 API 有：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Document: sketch 文档&lt;/li&gt;
&lt;li&gt;Page: 页面&lt;/li&gt;
&lt;li&gt;Artboard: 画板&lt;/li&gt;
&lt;li&gt;Image: 图像&lt;/li&gt;
&lt;li&gt;Text: 文字&lt;/li&gt;
&lt;li&gt;View: 文件夹（矩形），类似 React Native 中的 View 组件&lt;/li&gt;
&lt;li&gt;StyleSheet: react-sketchapp 封装了一些样式的函数，使用它可以更好的复用代码&lt;/li&gt;
&lt;li&gt;TextStyles: 共享文本样式&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;使用这些组件的时候，需要在文件顶部进行 API 的引用，以逗号分隔，不引入则会报错：&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;jsx&quot;&gt;&lt;pre class=&quot;language-jsx&quot;&gt;&lt;code class=&quot;language-jsx&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; Document&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; Page&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; Artboard &lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;react-sketchapp&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;现在来尝试组合使用上述 API，输出一个页面：&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;jsx&quot;&gt;&lt;pre class=&quot;language-jsx&quot;&gt;&lt;code class=&quot;language-jsx&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; React &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;react&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; render&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; Document&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; Page&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; Artboard&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; View&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; Text&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; Image &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;react-sketchapp&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;App&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token parameter&quot;&gt;props&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
  &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Document&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Page&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Artboard&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;ymfe.org&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;View&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;box&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;style&lt;/span&gt;&lt;span class=&quot;token script language-javascript&quot;&gt;&lt;span class=&quot;token script-punctuation punctuation&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; width&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;140&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; height&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;140&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; backgroundColor&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;#333&apos;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;
          &lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Text&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;title&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;style&lt;/span&gt;&lt;span class=&quot;token script language-javascript&quot;&gt;&lt;span class=&quot;token script-punctuation punctuation&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; color&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;#fff&apos;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;Hello&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Text&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;
          &lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Image&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;source&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;https://tva1.sinaimg.cn/large/006oPFLAly1fqg4tqz7d2j30be06mjrl.jpg&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;style&lt;/span&gt;&lt;span class=&quot;token script language-javascript&quot;&gt;&lt;span class=&quot;token script-punctuation punctuation&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; height&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;120&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; width&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;140&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;/&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;View&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Artboard&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Page&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Document&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token function&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;App&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;/&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; context&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;document&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;currentPage&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;上述案例的输出结果是：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/img/react-sketchapp-build-design-system/006oPFLAly1fqg4z3eol9j318g0saq94.jpg&quot;&gt;&lt;/p&gt;
&lt;p&gt;除了上述这些基本功能，react-sketchapp 甚至还可以输出 Symbol，例如如下代码：&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;jsx&quot;&gt;&lt;pre class=&quot;language-jsx&quot;&gt;&lt;code class=&quot;language-jsx&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; React &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;react&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; render&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; View&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; Artboard&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; makeSymbol &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;react-sketchapp&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;BlueSquare&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
  &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;View&lt;/span&gt;&lt;/span&gt;
    &lt;span class=&quot;token attr-name&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;Blue Square&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;
    &lt;span class=&quot;token attr-name&quot;&gt;style&lt;/span&gt;&lt;span class=&quot;token script language-javascript&quot;&gt;&lt;span class=&quot;token script-punctuation punctuation&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; width&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; height&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; backgroundColor&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;blue&apos;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;/&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; BlueSquareSymbol &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;makeSymbol&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;BlueSquare&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;Main&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
  &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Artboard&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;BlueSquareSymbol&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;/&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Artboard&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token function&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Main&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;/&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; context&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;document&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;currentPage&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;执行后输出结果是：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/img/react-sketchapp-build-design-system/006oPFLAly1fqg4bqnuu8j30k409kt99.jpg&quot;&gt;&lt;/p&gt;
&lt;p&gt;这将带来更大的可能性：&lt;strong&gt;直接用代码输出完整 UI Kit 模板文件&lt;/strong&gt;&lt;/p&gt;
&lt;h2&gt;我们的实践&lt;/h2&gt;
&lt;p&gt;我们根据一系列色彩、字号参数，使用 react-sketchapp 制作了设计规范的调色板、文字规范及项目色彩规范。&lt;/p&gt;
&lt;p&gt;由于开发的项目独立性较强，有些项目需要进行一定的定制（一般是字号、颜色），因此基于 &lt;strong&gt;顶级设计规范&lt;/strong&gt; 来制定 &lt;strong&gt;项目设计规范&lt;/strong&gt;，我们在 &lt;a href=&quot;https://ydoc.ymfe.org/&quot;&gt;YDoc - 优雅的文档站构建工具&lt;/a&gt; 中率先使用了导出的项目设计规范，并严格执行，取得了不错的效果：&lt;/p&gt;
&lt;p&gt;有兴趣同学可以查看 &lt;a href=&quot;https://ydoc.ymfe.org/standard/style-guide.html#ydoc-%E9%A1%B9%E7%9B%AE%E8%AE%BE%E8%AE%A1%E8%A7%84%E8%8C%83-%E9%A1%B9%E7%9B%AE%E8%A7%84%E8%8C%83%E6%96%87%E4%BB%B6&quot;&gt;YDoc 项目规范文件&lt;/a&gt; , 完全用 react-sketchapp 输出的 sketch 文件：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/img/react-sketchapp-build-design-system/006oPFLAly1fqg5gc8g3uj328018qqhk.jpg&quot;&gt;&lt;/p&gt;
&lt;h2&gt;进一步思考&lt;/h2&gt;
&lt;h3&gt;1. 零设计团队需要设计规范吗&lt;/h3&gt;
&lt;p&gt;国内很多团队缺少设计师，或者设计资源不够充足，往往需要程序员直接上手进行设计（尤其是中后台系统），这时程序员就会跟着感觉走，写出丑陋的页面甚至难以维护的代码。缺乏规范的页面即使使用了美观的 UI 库也会成为东施效颦，不伦不类。&lt;/p&gt;
&lt;p&gt;因此对于这样的团队来说，程序员学习一些设计规范的基本使用方式，将会大大改善这一情况：遵循一定的设计规范进行设计将会快速提高这些页面的颜值，工具赏心悦目，使用者使用起来工作也会很开心。&lt;/p&gt;
&lt;h3&gt;2. 效率工具&lt;/h3&gt;
&lt;p&gt;前面提到了 React-sketchapp 可以基于 Sketch 定制一些效率工具，这其实带来了无限的可能性：&lt;/p&gt;
&lt;p&gt;这些工具的输入可以是非常简单的一些配置项，例如产品的颜色、文本大小等，而这些工具的最终产物可能是 Sketch 文件、PDF文件、也可能是代码或图片，其中 Sketch 文件可用于生成设计规范，提供给设计师进行业务组件的二次设计；PDF 可以直接用于浏览打印；图片可以单独使用，也能够以 &lt;code class=&quot;language-text&quot;&gt;案例图&lt;/code&gt; 的形式存在。&lt;/p&gt;
&lt;p&gt;React-sketchapp 只是提供了一个思路，打通程序与设计后，诸如此类的工具还有非常大的空间等待挖掘。&lt;/p&gt;
&lt;h3&gt;3. 关于程序员使用设计工具&lt;/h3&gt;
&lt;p&gt;由于程序学习成本很高，我们仅在自研项目中做了这样的尝试，因此在设计稿中经常会看到一些工程师思维 😂&lt;/p&gt;
&lt;p&gt;在设计规范的制作中，我们团队遇到了这样一种情况：有同学进行了一次有趣的尝试，将 JavaScript 中 &lt;code class=&quot;language-text&quot;&gt;原型链(prototype)&lt;/code&gt; 的思想应用到 Sketch 的 Symbol 中，由于 Symbols 中很多组件都类似，因此相似组件继承自同一个 Symbol 而只改变文本颜色、边框、背景色等属性，如下图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/img/react-sketchapp-build-design-system/006oPFLAly1fqg5nse1i4j31q20tun3j.jpg&quot;&gt;&lt;/p&gt;
&lt;p&gt;此外，还将常用属性制作成配置项，只需进行选择即可修改组件样式：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/img/react-sketchapp-build-design-system/006oPFLAly1fqg5tsnjqkj31b00qc44d.jpg&quot;&gt;&lt;/p&gt;
&lt;p&gt;这些优化其实有点过度封装了：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;前者原型链模式可读性太差，设计师很难理解，但是可以&lt;strong&gt;把原型写到程序里，在 sketch 设计稿中隐藏这一概念&lt;/strong&gt;，这样既有利于维护设计稿，又利于 sketch 文件的使用；&lt;/li&gt;
&lt;li&gt;后者封装的配置项过于死板，不够灵活：实际开发中设计师往往将设计稿中的组件分离，对属性逐个调整，而我们预设的配置项往往无法满足各式各样的需求，反而会增加设计稿的制作成本。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;总结：&lt;/h2&gt;
&lt;p&gt;用代码控制设计规范的迭代，是一个很新颖的想法，在设计与技术之间跨界，实现难度比较大。react-sketchapp 这个工具提供了很多可能性，让艺术与技术能够更紧密地联系起来，让技术可以为艺术提供更好的支持。&lt;/p&gt;
&lt;p&gt;我们尚在摸索中前行，做了一些大胆的尝试，就让时间证明它创造的价值吧 👻&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Ant Design 色板生成算法演进之路]]></title><description><![CDATA[前言 最近我在整理一套团队内部使用的设计规范，其中颜色部分参考了 Ant Design 的 “色彩” 部分，恰逢 Ant Design 发布了 3.0 版本，调色板做了调整，借此机会我学习了一下 Ant Design…]]></description><link>https://dwb1994.github.io/blog/ant-design-palettes/</link><guid isPermaLink="false">https://dwb1994.github.io/blog/ant-design-palettes/</guid><pubDate>Mon, 25 Dec 2017 00:00:00 GMT</pubDate><content:encoded>&lt;h2&gt;前言&lt;/h2&gt;
&lt;p&gt;最近我在整理一套团队内部使用的设计规范，其中颜色部分参考了 Ant Design 的 &lt;a href=&quot;https://ant.design/docs/spec/colors-cn&quot;&gt;“色彩”&lt;/a&gt; 部分，恰逢 Ant Design 发布了 3.0 版本，调色板做了调整，借此机会我学习了一下 Ant Design 迄今为止三个版本色板生成算法的源码，感觉其“确定”设计思想非常值得学习。&lt;/p&gt;
&lt;p&gt;“确定” 作为 Ant Design 的设计理念之一，在调色板这一隅发挥得淋漓尽致：用科学定义设计，在设计有迹可循的同时提高了代码的可维护性，减少开发阶段样式代码的不确定性。&lt;/p&gt;
&lt;p&gt;Ant Design 三个大版本的色板生成算法各不相同，却一直在完善，本文对其三个版本的色板生成算法进行解读，聊一聊我的体会。&lt;/p&gt;
&lt;p&gt;在本文中我会使用一些名词，如果你不知道这些词的含义建议先简单了解一下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://zh.wikipedia.org/wiki/HSL%E5%92%8CHSV%E8%89%B2%E5%BD%A9%E7%A9%BA%E9%97%B4&quot;&gt;色相、饱和度、明度&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://zh.wikipedia.org/wiki/HSL%E5%92%8CHSV%E8%89%B2%E5%BD%A9%E7%A9%BA%E9%97%B4&quot;&gt;HSL和HSV色彩空间&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.html-js.com/article/1628&quot;&gt;贝塞尔曲线扫盲&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;关于调色板&lt;/h2&gt;
&lt;h3&gt;什么是调色板&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;在电脑图形学中，调色板（英语：Palette）要么是指用于数字图像管理的给定有限颜色组（颜色表），要么是显示屏上一组有限选择的小图形单元（诸如“工具选板”）。&lt;/p&gt;
&lt;p&gt;引用自维基百科 &lt;a href=&quot;https://zh.wikipedia.org/wiki/%E8%AA%BF%E8%89%B2%E7%9B%A4_(%E9%9B%BB%E8%85%A6%E5%9C%96%E5%BD%A2%E5%AD%B8)&quot;&gt;调色板 (电脑图形学)&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;调色板本来是混合各种颜色颜料使用的板，在 Ant Design 中，调色板指的是一份颜色表（如下图），颜色表由一系列具有一定代表性的基本色彩及它们的渐变色组成，我们可以在调色板中寻找需要的颜色并获取颜色值。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/img/ant-design-palettes/006oPFLAly1fmrzdewgzzj30mh0f840i.jpg&quot; alt=&quot;Ant Design 调色板的一部分&quot;&gt;&lt;/p&gt;
&lt;h3&gt;怎样使用调色板&lt;/h3&gt;
&lt;p&gt;设计师与程序员都需要使用调色板工具，以 Ant Design 为例，设计师需要根据调色板上的色值来进行设计稿的制作，而程序员在缺乏设计稿的时候也可以直接在调色板上取色。&lt;/p&gt;
&lt;p&gt;一般来说在进行设计稿制作的时候，直接使用 Ant Design 的一种基本色彩或与基本色彩相近的颜色作为主色，主色的渐变色可以用于组件的特殊状态，如 hover/active 状态。&lt;/p&gt;
&lt;h3&gt;如何制作调色板&lt;/h3&gt;
&lt;p&gt;Ant Design 的调色板由一系列具有一定代表性的基本色彩及它们的渐变色组成，其中基本色彩可以由主设计师来钦定，其渐变色由色板生成算法计算得到。&lt;/p&gt;
&lt;h2&gt;Ant Design 1.x 色板生成算法&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;http://1x.ant.design/docs/spec/colors&quot;&gt;Ant Design 1.x 色彩部分&lt;/a&gt;，第一版的实现较为简单，这部分主要介绍了：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;对颜色部分进行了简要的说明&lt;/li&gt;
&lt;li&gt;提供了一套调色板，并介绍了每种颜色的含义，但不能直接复制色值&lt;/li&gt;
&lt;li&gt;提供了交互指引，介绍了色板生成工具的使用方法&lt;/li&gt;
&lt;li&gt;“色彩识别”部分，用简单的标签数值计算来确定对比度是否符合要求，这对于新人的使用特别友好&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;原理&lt;/h3&gt;
&lt;p&gt;选取一个主色作为 5 号色,&lt;/p&gt;
&lt;p&gt;将主色与纯白色(#fff)混合，主色与纯白色之间分成 100 份， 20/40/60/80 的位置分别分割，得到 4/3/2/1 号色;&lt;/p&gt;
&lt;p&gt;将主色与纯黑色(#000)混合，主色与纯黑色之间分成 100 份， 20/40/60/80 的位置分别分割，得到 6/7/8/9 号色;&lt;/p&gt;
&lt;p&gt;通过以上方式得到一条完整渐变色板。&lt;/p&gt;
&lt;p&gt;Ant Design 将这一版本的色板生成算法称之为 “tint/shade 色彩系统”。&lt;/p&gt;
&lt;h3&gt;实现&lt;/h3&gt;
&lt;p&gt;这一版本我在 github 上没看到色彩生成算法的代码，后来我 google 到了这篇文章：&lt;a href=&quot;https://css-tricks.com/snippets/sass/tint-shade-functions/&quot;&gt;Tint and Shade Functions&lt;/a&gt;，作者认为单纯通过改变颜色亮度实现颜色的渐变效果并不理想，于是实现如下：&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;// 变亮
@function tint($color, $percentage) {
    @return mix(white, $color, $percentage);
}
// 变暗
@function shade($color, $percentage) {
    @return mix(black, $color, $percentage);
}
// 使用
.useage {
    background-color: tint(#2db7f5, 80%);
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;使用了 sass 的 mix 方法来进行颜色值的混合，只需传入主色色值和百分比即可，使用 less 同理。&lt;/p&gt;
&lt;h3&gt;评价&lt;/h3&gt;
&lt;p&gt;这一版的实现简单粗暴，在研究颜色色彩之前，我对渐变色板的第一想法也是这样的实现，后来通过一些调研发现这样实现并不好：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;自然界中几乎没有纯白/纯灰/纯黑色的东西&lt;/strong&gt;，因此在 WEB 中使用这三种颜色给人的感觉不真实，在生成渐变色板的时候每一种主色都在向着“不真实”的终点进行过渡，这当然是不妥的；&lt;/li&gt;
&lt;li&gt;当主色亮度或饱和度过低的时候，色号小于 5 / 大于 5 的变化速率差异增大，这在开发的时候渐变色的与主色的对比度可能会失衡，视觉效果不好。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;Ant Design 2.x 色板生成算法&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;http://2x.ant.design/docs/spec/colors-cn&quot;&gt;Ant Design 2.x 色彩部分&lt;/a&gt;，相对于第一版，第二版的调色板的颜色过渡更加平滑，提供了点击调色板复制颜色值的功能。&lt;/p&gt;
&lt;h3&gt;原理&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;经过设计师和程序员的精心调教，结合了色彩加白、加黑、加深，贝塞尔曲线，以及针对冷暖色的不同旋转角度，得出一套色板生成算法（用以取代我们原来的 tint/shade 色彩系统）。使用者只需指定主色，便可导出一条完整的渐变色板。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;最初一看这个原理赶紧很复杂，其实不是那么难以理解：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;选取一个颜色作为主色(6 号色)；&lt;/li&gt;
&lt;li&gt;判断减淡或加深，进行颜色混合&lt;/li&gt;
&lt;li&gt;若减淡，则主色与纯白色(#fff)混合，根据色号，获取贝塞尔曲线上的对应值。&lt;/li&gt;
&lt;li&gt;若加深，则主色与&lt;strong&gt;它对应的深色&lt;/strong&gt;混合，根据色号，获取贝塞尔曲线上的对应比例值。加深时主色对应的深色进行了明度与色相的调整，其中对色相的调整也就是上述引用中说的“针对冷暖色的旋转”；&lt;/li&gt;
&lt;li&gt;分别取1~9色号的色值，得到一条完整渐变色板。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;实现&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/ant-design/ant-design/blob/2.x-stable/components/style/color/colorPalette.less&quot;&gt;源码&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;核心代码：&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;js&quot;&gt;&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; primaryEasing &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;colorEasing&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0.6&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function-variable function&quot;&gt;colorPalette&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;color&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; index&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; currentEasing &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;colorEasing&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;index &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0.1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token comment&quot;&gt;// return light colors after tint&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;index &lt;span class=&quot;token operator&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; tinycolor&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;mix&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
      &lt;span class=&quot;token string&quot;&gt;&apos;#ffffff&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
      color&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
      currentEasing &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;100&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt; primaryEasing
    &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;toHexString&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; tinycolor&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;mix&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;token function&quot;&gt;getShadeColor&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;color&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    color&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;currentEasing &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt; primaryEasing&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt; primaryEasing&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;100&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;toHexString&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;使用了一个叫 &lt;a href=&quot;https://github.com/bgrins/TinyColor#color-utilities&quot;&gt;tinycolor&lt;/a&gt; 的库， mix 方法与上面介绍的 mix 方法类似，也是传入三个参数：(目标色值，初始色值，比例)，不同的是第三个参数是 0-100 的一个数字，因此计算比例后还需 *100 来符合参数单位要求。&lt;/p&gt;
&lt;p&gt;这里的 colorEasing 使用了另一个库 &lt;a href=&quot;https://github.com/gre/bezier-easing/blob/master/src/index.js&quot;&gt;bezier-easing&lt;/a&gt; 用于建立一条贝塞尔曲线并从中取值，在源码中我看到了获取贝塞尔曲线的四个参数为 &lt;strong&gt;(0.26, 0.09, 0.37, 0.18)&lt;/strong&gt;，生成的曲线如下图，基本上与 k=1 的曲线区别不大，我觉得作者可能是想调整的是1号色、2号色这样的浅色更浅，其实这样的调整很细微，达到一个大家都满意的色值即可(即文档里说的“经过设计师和程序员的精心调教”)：&lt;/p&gt;
&lt;img src=&quot;/img/ant-design-palettes/006oPFLAly1fms7qkkvz6j30ig0j4dh3.jpg&quot; style=&quot;width: 332px;&quot;&gt;
&lt;p&gt;与浅色混合依然与纯白色混合，但与深色混合的时候与 1.x 版本不同，没有使用纯黑，而是区别冷暖色进行不同程度的加深与色相值的旋转：2.x 版的色板使用了 &lt;strong&gt;HSL&lt;/strong&gt; 模型，“旋转”这个词很有趣：在 HSL 模型中 “H” 表示色相，即色彩名称，下图是 HSL 模型的 3D 模型图，可以看到图 (a) 中 HSL 圆柱坐标系中，绕圆柱中轴线旋转的角度（Hue 色相值）就是颜色种类的调整：&lt;/p&gt;
&lt;img src=&quot;/img/ant-design-palettes/006oPFLAly1fmt49rl7bbj30m80brwfo.jpg&quot; style=&quot;width: 400px;&quot;/&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;js&quot;&gt;&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; warmDark &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0.5&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;     &lt;span class=&quot;token comment&quot;&gt;// warm color darken radio&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; warmRotate &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;26&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;  &lt;span class=&quot;token comment&quot;&gt;// warm color rotate degree&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; coldDark &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0.55&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;     &lt;span class=&quot;token comment&quot;&gt;// cold color darken radio&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; coldRotate &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;   &lt;span class=&quot;token comment&quot;&gt;// cold color rotate degree&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;// 暖色，则旋转 HSL 色轮，使颜色更暖&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;shadeColor&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;toRgb&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;r &lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; shadeColor&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;toRgb&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;b&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; shadeColor&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;darken&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;shadeColor&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;toHsl&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;l &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; warmDark &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;spin&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;warmRotate&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;toHexString&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;// 冷色，则旋转 HSL 色轮，使颜色更冷&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; shadeColor&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;darken&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;shadeColor&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;toHsl&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;l &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; coldDark &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;spin&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;coldRotate&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;toHexString&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ol&gt;
&lt;li&gt;首先判断冷暖色，RGB模型中，红色是暖色，蓝色是冷色，绿色是中性色，因此用 r 与 b 的值判断冷暖色；&lt;/li&gt;
&lt;li&gt;然后根据冷暖色进行不同程度的加深与色相值的旋转。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;评价&lt;/h3&gt;
&lt;p&gt;Ant Design 2.x 使用了 HSL 模型、贝塞尔曲线等复杂的逻辑对色彩进行渐变，得到完整的渐变色板，相比 1.x 版本来说，色彩过渡更加平滑，添加了冷暖色的细节处理。但实现逻辑较为复杂，难以理解，事实上作者也在&lt;a href=&quot;https://github.com/ant-design/ant-design/blob/2.x-stable/components/style/color/colorPalette.less#L4&quot;&gt;代码注释&lt;/a&gt;里开了个玩笑说没人看得懂(他还卖上萌了)：&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;// We create a very complex algorithm which take the place of original tint/shade color system
// to make sure no one can understand it 👻&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;其实 2.x 的算法也有一些缺憾：与 1.x 版本相同，我不认为应该以纯白色作为浅色渐变的终点；实现算法过于复杂，难以维护。&lt;/p&gt;
&lt;h2&gt;Ant Design 3.x 色板生成算法&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;http://2x.ant.design/docs/spec/colors-cn&quot;&gt;Ant Design 3.x 色彩部分&lt;/a&gt;，相对于第二版，增加了几种主色，整个色板的饱和度更高，色板生成算法进行了重构，不再使用贝塞尔曲线。&lt;/p&gt;
&lt;h3&gt;原理&lt;/h3&gt;
&lt;p&gt;Ant Design 3.x 使用了 &lt;strong&gt;HSV&lt;/strong&gt; 模型，对于 HSV 还是 HSL 更适合于人类用户界面是有争议的，这里不做讨论。&lt;/p&gt;
&lt;p&gt;3.x 版本没有继续使用与某个浅色/深色值进行混合的形式获取渐变色板，而是直接用 HSV 模型的值进行递减/递增得到完整渐变色板，不知为何 HSL 更换成 HSV ，可能是便于计算。&lt;/p&gt;
&lt;h3&gt;实现&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/ant-design/ant-design/blob/master/components/style/color/colorPalette.less&quot;&gt;源码&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;3.x 色板生成算法的实现很简洁优雅：&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;function main(color, index) {
    var isLight = index &amp;lt;= 6;
    var hsv = tinycolor(color).toHsv();
    var i = isLight ? lightColorCount + 1 - index : index - lightColorCount - 1;
    // i 为index与6的相对距离
    console.log(hsv)
    return tinycolor({
        h: getHue(hsv, i, isLight),
        s: getSaturation(hsv, i, isLight),
        v: getValue(hsv, i, isLight),
    }).toHexString();
};&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;根据颜色值、色号与主色色号(6)差的绝对值、减淡/加深这三个参数获取渐变后的色值，其中 HSV 的三个值分别经过了渐变调整：&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;js&quot;&gt;&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// getHue 获取色相渐变&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; hueStep &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;hsv&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;h &lt;span class=&quot;token operator&quot;&gt;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;60&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; hsv&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;h &lt;span class=&quot;token operator&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;240&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token comment&quot;&gt;// 冷色调&lt;/span&gt;
    &lt;span class=&quot;token comment&quot;&gt;// 减淡变亮 色相顺时针旋转 更暖&lt;/span&gt;
    &lt;span class=&quot;token comment&quot;&gt;// 加深变暗 色相逆时针旋转 更冷&lt;/span&gt;
    hue &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; isLight &lt;span class=&quot;token operator&quot;&gt;?&lt;/span&gt; hsv&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;h &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt; hueStep &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; i &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; hsv&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;h &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; hueStep &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; i&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token comment&quot;&gt;// 暖色调&lt;/span&gt;
    &lt;span class=&quot;token comment&quot;&gt;// 减淡变亮 色相逆时针旋转 更暖&lt;/span&gt;
    &lt;span class=&quot;token comment&quot;&gt;// 加深变暗 色相顺时针旋转 更冷&lt;/span&gt;
    hue &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; isLight &lt;span class=&quot;token operator&quot;&gt;?&lt;/span&gt; hsv&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;h &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; hueStep &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; i &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; hsv&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;h &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt; hueStep &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; i&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;“Hue”(色相)的渐变核心代码如上，首先判断冷暖色调，与 2.x 版本不同的是，不再根据 rgb 中 r 与 b 的大小关系判断冷暖色调，而是根据 Hue 色相判断，对于冷暖色调在减淡与加深的时候进行不同的处理，如冷色调减淡的时候变亮的同时色相更暖，这样更符合人们对于色彩的认知：&lt;/p&gt;
&lt;img src=&quot;/img/ant-design-palettes/v2-99c16c13253c3f5d859e9d8d99b2fd00_1440w.jpg&quot; style=&quot;width: 254px;&quot;&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;js&quot;&gt;&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// getSaturation 获取饱和度渐变&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; saturationStep &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;16&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; saturationStep2 &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; darkColorCount &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;isLight&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token comment&quot;&gt;// 减淡变亮 饱和度迅速降低&lt;/span&gt;
    saturation &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; Math&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;round&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;hsv&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;s &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt; saturationStep &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; i&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;i &lt;span class=&quot;token operator&quot;&gt;==&lt;/span&gt; darkColorCount&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token comment&quot;&gt;// 加深变暗-最暗 饱和度提高&lt;/span&gt;
    saturation &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; Math&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;round&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;hsv&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;s &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; saturationStep&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token comment&quot;&gt;// 加深变暗 饱和度缓慢提高&lt;/span&gt;
    saturation &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; Math&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;round&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;hsv&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;s &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; saturationStep2 &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; i&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;“Saturation”饱和度的渐变核心代码如上，对于减淡与加深的饱和度进行了不同的处理，其中减淡递减的值更大，说明减淡的过程中饱和度迅速下降，而由于主色的饱和度一般较高，因此加深的时候饱和度不必增张过快，尤其是最深的颜色，进行了特殊处理，使得 9 号色与 10 号色的饱和度相差无几。&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;js&quot;&gt;&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// getValue 获取明度渐变&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; brightnessStep1 &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; brightnessStep2 &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;15&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;getValue&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;hsv&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; i&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; isLight&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;isLight&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token comment&quot;&gt;// 减淡变亮&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; Math&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;round&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;hsv&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;v &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; brightnessStep1 &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; i&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;token comment&quot;&gt;// 加深变暗幅度更大&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; Math&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;round&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;hsv&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;v &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt; brightnessStep2 &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; i&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;“Value”明度的渐变核心代码如上，对于减淡与加深的明度进行了不同的处理，其中加深递减的值更大，说明加深的过程中明度迅速下降，这是由于主色的明度一般较高，因此减淡的时候明度不宜增长过多。&lt;/p&gt;
&lt;h3&gt;评价&lt;/h3&gt;
&lt;p&gt;综合来看 3.x 色板生成算法的实现可以看到，主色的选取很重要，一般主色选取饱和度较高、明度较高的颜色才能更好地匹配这个色板生成算法。&lt;/p&gt;
&lt;p&gt;3.x 版本舍弃了与某个浅色/深色值进行混合的形式获取渐变色板的方式，而是直接对 HSV 的三个值进行递减/递增，这样做使得代码容易理解，但是也有一些弊端，比如上面提到了，饱和度递减的值/明度递减的值很大，这对于&lt;strong&gt;主设计师&lt;/strong&gt;对主色的正确选取的要求很高：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如果主色的饱和度过低，则渐变色板减淡的部分饱和度迅速递减，1/2/3色号相差无几，而加深部分饱和度增长缓慢显得色板不够饱和(如下图左侧)；&lt;/li&gt;
&lt;li&gt;如果主色的明度过低，则渐变色板加深的部分明度迅速递减，9/10色号相差无几，而减淡部分由于明度增长缓慢显得颜色过深(如下图右侧)：&lt;/li&gt;
&lt;/ul&gt;
&lt;img src=&quot;/img/ant-design-palettes/006oPFLAly1fmsbhrbbowj30vo0p6q5b.jpg&quot; style=&quot;width: 570px;&quot;&gt;
&lt;h2&gt;Ant Design 色板生成算法现存的问题&lt;/h2&gt;
&lt;p&gt;虽然经历了几个版本的迭代，但是我还是觉得不够完美，有可能是 Ant Design 本身不完善，也有可能是我理解得不到位，暂时记录在这里供大家讨论：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Ant Design 文档介绍说，第 6 格色彩单元格普遍满足4.5:1 最小对比度（AA 级），但是我发现部分主色的相对对比度不满足 4.5:1 标准，比如色号同为 6 的酱紫与日出(黄色)两种颜色，黄色的对比度过低导致文本难以识别：&lt;/p&gt;
&lt;img src=&quot;/img/ant-design-palettes/006oPFLAly1fmsbxu44rcj30fe04oaaf.jpg&quot; style=&quot;width: 227px;&quot;&gt;
&lt;blockquote&gt;
&lt;p&gt;注：在由浅至深的色板里，第 6 格色彩单元格普遍满足 WCAG 2.0 的 4.5:1 最小对比度（AA 级），我们将其定义为色板的默认品牌色。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;同色号的不同颜色差异过大，尤其经过渐变色板放大这个差异后，是否不再适合搭配使用？例如下图中同色号的酱紫色的明度低于日出色(黄色)：
&lt;img src=&quot;/img/ant-design-palettes/006oPFLAly1fmsc53v6qfj30th04swer.jpg&quot; style=&quot;width: 530px;&quot;&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;感悟&lt;/h2&gt;
&lt;p&gt;Ant Design 一直在探索更优雅的色板生成算法，经历几次迭代后发展越来越好。作为前端工程师，我很欣喜地看到技术对于用户体验优化的实践，很欣赏这种科学定义设计的方式。路漫漫其修远兮，吾将上下而求索，希望前端对于用户体验能有更多的思考与实践。&lt;/p&gt;</content:encoded></item><item><title><![CDATA[第二届前端体验大会]]></title><description><![CDATA[…]]></description><link>https://dwb1994.github.io/blog/第二届前端体验大会/</link><guid isPermaLink="false">https://dwb1994.github.io/blog/第二届前端体验大会/</guid><pubDate>Sun, 17 Dec 2017 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;&lt;img src=&quot;/img/fe-ex-meeting/006oPFLAly1fmpec5k5fvj31hc0u27v4.jpg&quot;&gt;&lt;/p&gt;
&lt;p&gt;今天我参加了『本固枝荣』第二届前端体验大会(北京站)，收获了很多。&lt;/p&gt;
&lt;p&gt;首先感谢一下新浪和腾讯组织这次大会，质量很高，干货满满，举办方准备了丰富的小礼物、茶歇和美味的午餐，主持人风趣幽默，声音很有磁性。&lt;/p&gt;
&lt;p&gt;其次，这次大会有个小插曲，原定的地点在新浪总部大厦，后来由于报名的小伙伴太多，原会场规模不足，大会前一天临时将地点改为了北京天信亮酒店。可见：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;前端开发的技术分享氛围非常火热。&lt;/li&gt;
&lt;li&gt;前端对于用户体验的重视程度越来越高。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;前端程序直接和用户进行沟通，我们的目标就是给与用户更加卓越的视觉体验，前端开发者对于用户体验的探究将会越来越深入。&lt;/p&gt;
&lt;p&gt;本次大会有六位大牛进行演讲，围绕着『用户体验』，从视觉设计、交互设计、性能优化、开发体验、团队协作等角度阐述了自己的理解，大有百家争鸣、争芳斗艳的局面，非常精彩！&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/img/fe-ex-meeting/006oPFLAly1fmk6k6ej60j31400u00vj.jpg&quot; alt=&quot;大会现场&quot;&gt;&lt;/p&gt;
&lt;h2&gt;一、代码解锁设计之美&lt;/h2&gt;
&lt;p&gt;腾讯 MXD 的&lt;strong&gt;刘远涛&lt;/strong&gt;老师带来了这场演讲，演讲嘉宾中唯一一位设计师开场，演讲可以说非常有激情，看得我热血澎湃：原来这些酷炫的动效的设计与开发是由同一个人完成，原来这些富有视觉冲击力的动画可以纯编码实现。&lt;/p&gt;
&lt;p&gt;代码解锁设计之美，最开始看到这个题目还以为将的是某种屏幕解锁的交互设计😂，原来是给设计师说的，用编码来进行设计，解锁设计的新姿势，这个思路非常新颖，讲师也为我们介绍了他们团队的 FE 与 UI 配合的新开发模式，振聋发聩，原来团队协作还可以这么玩儿😂，可是这种协作方式实现难度好大。&lt;/p&gt;
&lt;p&gt;Q&amp;#x26;A 环节，我有幸请教了讲师关于设计规范执行的问题，非常感谢刘远涛老师的解答🤓👇。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/img/fe-ex-meeting/006oPFLAly1fmk6lgh7prj310h0ocawx.jpg&quot; alt=&quot;现场提问&quot;&gt;&lt;/p&gt;
&lt;h2&gt;二、CSS: 从呈现到控制&lt;/h2&gt;
&lt;p&gt;魅族科技的&lt;strong&gt;龚伟&lt;/strong&gt;老师带来了这场演讲，令我印象最深刻的一点是：用css实现一部分功能，省去了js的执行过程，这样在性能上提升很大，加快了加载速度。&lt;/p&gt;
&lt;p&gt;此外介绍了很多 CSS 的新特性以及这些特性的应用，Houdini 草案的新规范等等，这些用法的巧妙令我非常震撼。&lt;/p&gt;
&lt;h2&gt;三、如何优雅的设计和实现一个 JSBridge&lt;/h2&gt;
&lt;p&gt;这场分享的演讲者是前端名人&lt;strong&gt;&lt;a href=&quot;https://www.zhihu.com/people/xiao-jue-83/activities&quot;&gt;小爝&lt;/a&gt;&lt;/strong&gt;，一上来就开了个玩笑，说看了前面讲得css，要说一句 JavaScript 才是最好的语言 😂 (没毛病啊)&lt;/p&gt;
&lt;p&gt;可能是临近午饭时间，小爝讲得有些匆忙，简单介绍 Hybrid &amp;#x26; JSBridge 的概念，然后讲了 JSBridge 在新浪的应用，以新浪新闻客户端为例，展示了 JSBridge 应用的效果，展示的过程中我发现该客户端的交互体验做得非常好，得益于首屏速度优化，和一些良好的交互设计。后面还从 Android、iOS、前端方面详细介绍了 JSBridge 的实现原理、JSBridge 的设计原则(适配性、易上手，学习成本低，扩展方便)、路由设计的进化，满满的干货啊。&lt;/p&gt;
&lt;h2&gt;四、性能优化三部曲&lt;/h2&gt;
&lt;p&gt;来自百度外卖的&lt;strong&gt;徐辛承&lt;/strong&gt;老师带来的这场演讲，随着产品的使用量的增加，每天可能产生上百万的 PV，从性能角度进行优化，可以提升用户体验。&lt;/p&gt;
&lt;p&gt;徐辛承老师总结了性能优化的方法论：首先搞清楚为什么做性能优化。然后就是性能优化的三部曲：收集性能数据，找到性能瓶颈。制定最终优化目标&amp;#x26;方案，并执行。持续优化迭代，可以不必一次性做很多性能优化。&lt;/p&gt;
&lt;p&gt;开发一套工具来监控性能，如跑分平台属于非侵入式，不植入代码即可进行测试，但这种非侵入式的方式得到的结果不准确，不是线上用户真实的结果。通过在代码中埋点的形式，进行侵入式的性能监控要更加准确。工具对白屏时间、下载时间、用户可操作时间、首屏时间等指标进行收集，进而制定模板。&lt;/p&gt;
&lt;p&gt;对于短期的页面，如活动页，不需要持续优化，可以使用一些通用的优化方案，例如：图片懒加载2.0(先下载小尺寸图片展示出来模糊的图片，再下载原图，给用户一个页面加载中的感觉)与智能打包等。&lt;/p&gt;
&lt;h2&gt;五、WebGL 地图渲染&lt;/h2&gt;
&lt;p&gt;腾讯地图的&lt;strong&gt;庞凤&lt;/strong&gt;老师为我们带来了腾讯地图在地图这一领域的使用体验的探究，涉及大量的交互细节，如修正文字在透视效果和方位旋转中的影响、隐藏掉不可见的部分等。&lt;/p&gt;
&lt;p&gt;介绍了WebGL的由来，现状，和未来，未来可以制作更酷炫的效果，因此 WebGL 带来了卓越的用户体验。介绍了地图渲染过程的进化过程，从请求img到请求json 绘制canvas。&lt;/p&gt;
&lt;p&gt;地图已经存在了近千年，时代在发展，地图也会变得越来越酷炫，演讲者将地图分解成一个瓦片拼接的世界观。当然酷炫不是重要的，地图的终极目标是重现真实世界，这就需要跨越维度鸿沟，因为 2D 地图重现真实世界是 3D 的。好的地图应该清晰流畅，在性能和效果直接做平衡，优化过程：聚焦中心、聚焦道路，聚焦可视部分的理念。&lt;/p&gt;
&lt;p&gt;此外庞凤老师也提出了方法论：压缩提升数据传输效率、重用(缓存)、合并数据和操作、分离(多线程拆分繁重的计算任务)&lt;/p&gt;
&lt;h2&gt;六、前端可持续化集成&lt;/h2&gt;
&lt;p&gt;这位分享者是一位 80 后的大叔，&lt;strong&gt;邱博&lt;/strong&gt;老师，来自联想，曾在北京站三站担任火车司机，真·老司机👇&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/img/fe-ex-meeting/006oPFLAly1fmk7imwn2lj30be0afaak.jpg&quot;&gt;&lt;/p&gt;
&lt;p&gt;大叔声音低沉，像一节缓缓前进的车厢，车厢里有位老人讲故事，讲了很多持续优化过程中的思考和感悟，感觉有点上升到哲学的高度了，听完后感觉充满正能量得。&lt;/p&gt;
&lt;p&gt;谈到了理解需求的本质：理解不是扼杀自主意识，而是要带动大家主动思考。了解需求方的意图、大家的想法、团队的想法。还有效果重于效率：在快速并行开发的时候注重质量。&lt;/p&gt;
&lt;h3&gt;总结&lt;/h3&gt;
&lt;p&gt;『本固枝荣』，主干强固，枝叶才能茂盛，大会的官网背景就是这样一棵独木成林的榕树，恰似前端的发展：能力不断深入，泛上下游专业的知识日趋完善。&lt;/p&gt;
&lt;p&gt;再次感谢活动的组织者们！希望明年能带来更精彩的内容！&lt;/p&gt;</content:encoded></item><item><title><![CDATA[漫谈 Material Design & Ant Design]]></title><description><![CDATA[一、背景 近些年来前端的 UI 框架越来越多，其中不乏优质的作品如 Bootstrap 提供一套基础的 UI…]]></description><link>https://dwb1994.github.io/blog/MaterialDesignAntDesign/</link><guid isPermaLink="false">https://dwb1994.github.io/blog/MaterialDesignAntDesign/</guid><pubDate>Sat, 07 Oct 2017 00:00:00 GMT</pubDate><content:encoded>&lt;h2&gt;一、背景&lt;/h2&gt;
&lt;p&gt;近些年来前端的 UI 框架越来越多，其中不乏优质的作品如 Bootstrap 提供一套基础的 UI 组件库供用户(主要是开发者)使用，使用成熟的组件库可大大提高开发效率。随着用户对产品质量要求的提高，往往需要个性化定制组件库的样式，因此这些组件库往往设计得足够基础，但不够美观。在个性化定制之路上，每位设计师都有不尽相同的想法，使得设计风格不统一，随着设计成员更迭，设计风格将难以持续维护。&lt;/p&gt;
&lt;p&gt;后来出现的 Material Design 与 Ant Design，从设计的角度思考，推出一套设计与语言来规范开发者的设计。这样做即使开发语言不同、平台不同依然可以保证一致的、有灵魂的设计风格。&lt;/p&gt;
&lt;p&gt;在 YMFE 开发与维护的众多项目中，由于成员更迭、缺少 UI 设计、技术栈不统一等因素，出现了各式各样的页面风格。我们希望编写一套设计规范，统一团队项目的前端 UI 设计，屏蔽设计的差异，为团队众多项目注入灵魂，营造个性的团队文化，因此笔者进行了关于设计规范的一些调研。&lt;/p&gt;
&lt;h2&gt;二、明确概念&lt;/h2&gt;
&lt;p&gt;经常谈到设计规范，设计规范指的具体是什么呢？&lt;/p&gt;
&lt;p&gt;在 web 开发中 &lt;code class=&quot;language-text&quot;&gt;Style Guide&lt;/code&gt; 与 &lt;code class=&quot;language-text&quot;&gt;Pattern Library&lt;/code&gt; 都具有设计规范的含义，二者有所区别：&lt;/p&gt;
&lt;h3&gt;1. Style Guide&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Style Guide 更侧重视觉，对设计的文字、颜色、LOGO、ICON 等设计作出规范，产出物一般称为 &lt;code class=&quot;language-text&quot;&gt;Guideline&lt;/code&gt;；&lt;/li&gt;
&lt;li&gt;一般适用于设计团队维护一套统一的视觉设计风格，便于风格的统一与复用，规范；&lt;/li&gt;
&lt;li&gt;实例：&lt;a href=&quot;https://developer.apple.com/ios/human-interface-guidelines/overview/themes/&quot;&gt;iOS Human Interface Guidelines&lt;/a&gt; 、 &lt;a href=&quot;https://material.io/guidelines/&quot;&gt;Material Guidelines&lt;/a&gt;；&lt;/li&gt;
&lt;li&gt;难点：使设计团队甚至开发团队理解设计理念并不是容易的事情，例如 Material Design 中 “Material” 的隐喻比较抽象，难以理解与使用。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;2. Pattern Library&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Pattern Library 更侧重前端开发，对界面元素的样式进行实现，其代码可供预览使用，产出物一般称为 &lt;code class=&quot;language-text&quot;&gt;组件库&lt;/code&gt; &lt;code class=&quot;language-text&quot;&gt;UI 框架&lt;/code&gt;等；&lt;/li&gt;
&lt;li&gt;一般用于开发团队协作，提高组件复用性的同时保证了用户体验的一致性；&lt;/li&gt;
&lt;li&gt;实例：&lt;a href=&quot;http://www.bootcss.com/&quot;&gt;Bootstrap&lt;/a&gt;；&lt;/li&gt;
&lt;li&gt;难点：使开发团队完全使用组件库提供的组件来构建页面有一定难度，开发者在找不到所需组件时往往自行编写样式，在没有设计稿的情况下非常容易做出与整体风格不一致的样式。&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;设计规范的定义引用自知乎 &lt;a href=&quot;https://www.zhihu.com/question/29936125/answer/46700406&quot;&gt;“如何建立一套 UI 设计规范”&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Material Design Guideline 属于 Style Guide，除了 Guideline 以外，Material Design 也提供了组件库的实现: &lt;a href=&quot;https://material.io/components/&quot;&gt;Material Components&lt;/a&gt; 和 &lt;a href=&quot;https://getmdl.io/&quot;&gt;Material Design Lite&lt;/a&gt;。 Ant Design 和前者类似，既包含&lt;a href=&quot;https://ant.design/docs/spec/introduce&quot;&gt;设计指引&lt;/a&gt;又提供了&lt;a href=&quot;https://ant.design/docs/react/introduce&quot;&gt;React 实现&lt;/a&gt;。&lt;/p&gt;
&lt;h2&gt;三、概览&lt;/h2&gt;
&lt;p&gt;前面从设计规范的概念阐述了 Material Design &amp;#x26; Ant Design 二者的联系，下面从其他方面了解二者的区别。&lt;/p&gt;
&lt;h3&gt;Material Design&lt;/h3&gt;
&lt;p&gt;做为一套较为成熟的设计语言，它的应用场景是极其广泛的，包含了谷歌的全线产品：Chrome OS、PC端、移动端(包括 iOS)，围绕“Material”的隐喻构建了完整、卓越的交互体验，对于它 “跨平台的底层系统” 的目标是实现了并且日趋进步的：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;从动画效果(以下简称动效)、样式、布局、组件、模式、增长传播策略、可用性、平台、资源这些分类来介绍设计语言。&lt;/li&gt;
&lt;li&gt;在电子屏幕上创造了全新的虚拟世界观。&lt;/li&gt;
&lt;li&gt;提供全面、科学的交互效果示例，非常值得研究学习。&lt;/li&gt;
&lt;li&gt;适用于不同平台。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Ant Design&lt;/h3&gt;
&lt;p&gt;从设计语言的层面来讲和 Material Design 还相差甚远，但对于它 “全面提高中台产品体验和研发效率” 的目标是实现的不错的：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;从指引、组件、模式、资源这些分类来介绍设计语言。&lt;/li&gt;
&lt;li&gt;对设计原则进行整理，总结了十大设计原则，使用文字介绍配以图片示例，使这些设计原则通俗易懂地为我们所接受。&lt;/li&gt;
&lt;li&gt;对于中台产品复杂的交互逻辑，尤其是表格、表单设计做了相对深入的研究，并展示了通俗易懂的示例。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;从二者的目标来看，服务于中后台系统的 Ant Design 显然不如 Material Design 的目标深远。
二者的目标亦有共同点：都是要建立相对底层的系统，实际上设定了设计的底线，基于此规范建立的系统拥有相对一致的表现样式而且不会很难看。从美观性上来看，Material Design 布局更鲜明大气，动效尤为出众，而 Ant Design 的设计中规中矩，布局紧凑，比较朴素严谨。&lt;/p&gt;
&lt;h2&gt;四、进一步对比&lt;/h2&gt;
&lt;h3&gt;1.理念&lt;/h3&gt;
&lt;h4&gt;Material Design&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;“Material” 的隐喻 (Material is the metaphor)，随着电子屏幕的普及，“电子纸”这一材料的概念被前沿设计者们不断探索，在电子屏幕上形成了别具特色的交互体验。&lt;/li&gt;
&lt;li&gt;鲜明、形象、有意义 (Bold, graphic, intentional)，遵循基础的平面设计规范以科学地构建出用户在视觉上的感知，鲜明形象的用户界面使用户获得沉浸式交互体验。&lt;/li&gt;
&lt;li&gt;有意义的动效 (Motion provides meaning)，动效尤为重要，它可以给用户暗示和指引，从而顺其自然地知晓界面发生的交互行为。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Ant Design&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;微小，追求细节上的精益求精，用户在使用中不断发现令人惊喜的细节。&lt;/li&gt;
&lt;li&gt;确定，用科学定义设计，用通俗的形式解读设计原则。&lt;/li&gt;
&lt;li&gt;幸福，追求『用户』和『设计者』的幸福，流畅地完成一次次交互。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;二者的设计理念中，科学定义设计这一点是共通的，在视觉设计方面二者都对科学保持敬畏的态度。其他的理念中，Material Design 对动效和排版的追求更进一步，Ant Design 虽然动效的设计不足，虽然受到其中台系统的约束，不会鲜明激进地表现设计(中台系统追求简洁明确也是理所应当的)，但对整个系统的交互设计也是尤为重视的。&lt;/p&gt;
&lt;h3&gt;2.动效&lt;/h3&gt;
&lt;h4&gt;Material Design&lt;/h4&gt;
&lt;p&gt;Material Design 对于动效尤为重视，个人认为 Material Design 特有的动效是这个设计的精髓之一，很多 Material Design 的设计作品只学习了基本样式、使用了一些特色鲜明的组件(如 &lt;a href=&quot;https://material.io/guidelines/components/buttons-floating-action-button.html&quot;&gt;Floating Action Button&lt;/a&gt;)，却严重缺乏动效的设计，这样的设计作品并不是好的 Material Design 作品(如国内的 &lt;a href=&quot;https://www.mdui.org/&quot;&gt;MDUI&lt;/a&gt; 对动效的表现实在不充分)。&lt;/p&gt;
&lt;p&gt;Material Design 文档对动效进行了全面而形象的阐述，强烈建议各位欣赏一下 Material Design 官网对动效的阐述和示例：
&lt;a href=&quot;https://material.io/guidelines/motion/material-motion.html&quot;&gt;Material Design 文档 - motion&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;Ant Design&lt;/h4&gt;
&lt;p&gt;Ant Design 虽然对动效的处理没有 Material Design 那样耀眼，但也差强人意。在一些细节上体现了对动效的重视，例如模态框(Modal)的弹出和收起的动画，有一个从按钮到屏幕中心的过渡效果。&lt;/p&gt;
&lt;p&gt;Ant Design 将动效单独提取出来成为 &lt;a href=&quot;https://motion.ant.design/&quot;&gt;Motion Design&lt;/a&gt; ，提供了 React 的动画方案。Ant Design 并没有像 Material Design 那样提出电子纸之类的新概念，但也与前者不约而同地从现实世界的角度思考界面元素的动效，推出了一套动画设计语言及其解决方案，更多地从页面内容展现的角度去思考，巧妙地用动效带来的暗示来构建与延伸虚拟空间。&lt;/p&gt;
&lt;p&gt;对比了二者对动效的处理，发现国人对交互设计也是一直在努力探索。但在我所接触的日常项目开发中，交互设计稍显匮乏，在有交互设计师参与的项目中，交互设计师一般不会做特复杂的动效设计(尤其是追求开发效率的 H5 页面)；在没有交互设计师参与的项目中，UI 设计师一般只提供静态的设计图，而交互设计一般由前端开发者自行设计。&lt;/p&gt;
&lt;p&gt;任何一项好的作品，都会历经从无到有，从有到优的过程。在从有到优的阶段，通过严谨科学的交互设计来做动效，提高交互体验，可以让作品的质量更上一层楼。&lt;/p&gt;
&lt;h3&gt;3.组件库&lt;/h3&gt;
&lt;p&gt;单独的 Guideline 一般服务于设计师，Guldeline 要配合组件库才能为更多开发者所接受。&lt;/p&gt;
&lt;h4&gt;Material Design&lt;/h4&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/material-components&quot;&gt;Material Components&lt;/a&gt;，分为 android、ios、web 三部分，分别用Java、Objective-C、JavaScript实现。
&lt;a href=&quot;https://github.com/google/material-design-lite&quot;&gt;Material Design Lite&lt;/a&gt;，JavaScript实现。&lt;/p&gt;
&lt;p&gt;第三方的实现 &lt;a href=&quot;https://github.com/callemall/material-ui&quot;&gt;material-ui&lt;/a&gt; 和 &lt;a href=&quot;https://github.com/Dogfalo/materialize&quot;&gt;materialize&lt;/a&gt; 也很受欢迎。&lt;/p&gt;
&lt;h4&gt;Ant Design&lt;/h4&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/ant-design/ant-design/&quot;&gt;ant-design&lt;/a&gt;，JavaScript实现。&lt;/p&gt;
&lt;p&gt;也有其他框架的&lt;a href=&quot;https://ant.design/docs/spec/introduce-cn#%E5%89%8D%E7%AB%AF%E5%AE%9E%E7%8E%B0&quot;&gt;实现&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;虽然 ant-design 的 star 少一些，但增速也很快，而且中文文档很完整。&lt;/p&gt;
&lt;h3&gt;4.指引&lt;/h3&gt;
&lt;p&gt;除了组件库之外，设计指引也是不可或缺的，并不是每个团队或者每个项目都有 UI/UX 人员支持，设计指引可以指导 UI/UX 人员进行定制化开发，也可以帮助前端开发者在没有设计人员的情况下也可以开发出拥有良好交互体验和美观性的页面。&lt;/p&gt;
&lt;h4&gt;Material Design&lt;/h4&gt;
&lt;p&gt;对动效、布局规则、界面设计模式、增长传播策略、可用性、平台方面对设计进行指引，可以说既全面又专业。对于每一类指引，Material Design 都以图文配合的形式做出通俗易懂的示例，对用户来说非常容易理解。&lt;/p&gt;
&lt;p&gt;与 Ant Design 相比多了很多其他平台适配和移动端交互的指引。&lt;/p&gt;
&lt;h4&gt;Ant Design&lt;/h4&gt;
&lt;p&gt;对设计原则、色彩、图标、字体、布局、导航、数据录入展示、反馈、动效、界面设计模式、资源这些方面进行指引，分类较多。针对中台系统展示了一些实践案例，对表单表格有着较为深入的研究，并在界面设计模式的介绍中展示出来。&lt;/p&gt;
&lt;p&gt;Ant Design 还有一处亮点是使用通俗的语言介绍了十大设计原则，配合图文的形式告诉使用者在 web 开发中如何正确使用这些原则，这正是其理念中“确定”的概念。&lt;/p&gt;
&lt;p&gt;两种设计语言都做了尽可能全面且通俗易懂的指引，对于前端开发者来说，即使不使用他们的组件库，通过浏览这些设计指引来学习一些设计和交互的基础知识也是很值得的。&lt;/p&gt;
&lt;h3&gt;5.使用成本&lt;/h3&gt;
&lt;p&gt;Material Design &amp;#x26; Ant Design 作为设计语言，都有各种编程语言的实现。&lt;/p&gt;
&lt;h4&gt;Material Design 使用成本要高一些：&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;Material&lt;/code&gt; 的概念不容易理解；&lt;/li&gt;
&lt;li&gt;英文文档在国内还是有很多开发者不容易接受；&lt;/li&gt;
&lt;li&gt;空间层次划分太多(24层)；&lt;/li&gt;
&lt;li&gt;需要较高水平的视觉和交互设计才能真正发挥其优势。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Ant Design 使用成本低很多：&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Guideline 相比 Material Design 更容易学习掌握；&lt;/li&gt;
&lt;li&gt;中文文档健全；&lt;/li&gt;
&lt;li&gt;没有复杂的层次和材料的概念；&lt;/li&gt;
&lt;li&gt;组件库的示例相对更完整；&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;五、总结&lt;/h2&gt;
&lt;p&gt;Material Design 与 Ant Design 都是高质量的设计语言，虽然目标不同、理念不同，但二者都为了更优雅地解决问题。&lt;/p&gt;
&lt;p&gt;随着互联网行业的迅猛发展，人们对用户体验的要求越来越高。前端开发者的程序直接和用户进行沟通，因此在进行业务开发的同时应提高视觉与交互方面的素养，才能更好地理解所开发产品的设计理念，并给予用户更加卓越的使用体验。&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Git Commit Message 规范]]></title><description><![CDATA[零、前言 最近帮公司团队整理了一套 git commit message 的规范，遵循这种规范可以使团队在git上清晰地看到每次提交是什么类型的内容，便于追踪提交记录。 以下是规范的内容和在项目中配置commit message格式验证的脚本： 一、Message…]]></description><link>https://dwb1994.github.io/blog/Git-Commit-Message/</link><guid isPermaLink="false">https://dwb1994.github.io/blog/Git-Commit-Message/</guid><pubDate>Wed, 14 Jun 2017 00:00:00 GMT</pubDate><content:encoded>&lt;h2&gt;零、前言&lt;/h2&gt;
&lt;p&gt;最近帮公司团队整理了一套 git commit message 的规范，遵循这种规范可以使团队在git上清晰地看到每次提交是什么类型的内容，便于追踪提交记录。&lt;/p&gt;
&lt;p&gt;以下是规范的内容和在项目中配置commit message格式验证的脚本：&lt;/p&gt;
&lt;h2&gt;一、Message格式&lt;/h2&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;html&quot;&gt;&lt;pre class=&quot;language-html&quot;&gt;&lt;code class=&quot;language-html&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;type&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;(&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;scope&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;): &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;subject&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
// 空一行
&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;body&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
// 空一行
&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;footer&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;二、描述&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;type&lt;/li&gt;
&lt;/ol&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&quot;left&quot;&gt;Tables&lt;/th&gt;
&lt;th align=&quot;left&quot;&gt;Are&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&quot;left&quot;&gt;feat&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;新功能 (feature)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;left&quot;&gt;fix&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;修复问题&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;left&quot;&gt;docs&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;修改文档/注释等 (documentation)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;left&quot;&gt;refactor&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;对原提交的修改或重构（理论上不影响现有功能）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;left&quot;&gt;chore&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;修改构建工具/依赖等&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;left&quot;&gt;refactor&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;对原提交的修改或重构（理论上不影响现有功能）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;left&quot;&gt;opti&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;优化(样式/交互/逻辑)等&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;注意事项&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;type名称全部小写&lt;/li&gt;
&lt;li&gt;type后面紧跟英文冒号&lt;/li&gt;
&lt;li&gt;冒号后需要保留一个空格&lt;/li&gt;
&lt;li&gt;&lt;scope&gt;(可选)
修改文件的范围（包括但不限于 doc, middleware, core, config, plugin）&lt;/li&gt;
&lt;li&gt;subject
少于100字，简短清晰地阐述提交内容
行末空一行&lt;/li&gt;
&lt;li&gt;body(可选)
补充subject，如必要性、解决的问题、可能影响的地方，可以换行
如果有链接一定附上链接&lt;/li&gt;
&lt;li&gt;footer(可选)
bug的id、issue的id等&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;三、示例&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;简单示例
&lt;code class=&quot;language-text&quot;&gt;feat: 完成登录页面布局&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;完整示例(执行 git commit 即可编辑多行的commit message)&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;docs: 使用ydoc3.1更新文档
添加新版本说明，包括新功能的使用方式
修复首页标题的错别字和链接地址错误 http://ued.qunar.com/ydoc/
Close #321&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;四、在项目中配置commit message格式验证&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;使用npm安装验证工具
&lt;code class=&quot;language-text&quot;&gt;npm install validate-commit-msg ghooks --save-dev&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;在package.json文件中添加配置&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;json&quot;&gt;&lt;pre class=&quot;language-json&quot;&gt;&lt;code class=&quot;language-json&quot;&gt;&lt;span class=&quot;token property&quot;&gt;&quot;config&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;&quot;ghooks&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token property&quot;&gt;&quot;commit-msg&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;validate-commit-msg&quot;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;&quot;validate-commit-msg&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token property&quot;&gt;&quot;types&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;
      &lt;span class=&quot;token string&quot;&gt;&quot;feat&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;token string&quot;&gt;&quot;fix&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;token string&quot;&gt;&quot;docs&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;token string&quot;&gt;&quot;test&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;token string&quot;&gt;&quot;chore&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;token string&quot;&gt;&quot;refactor&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;token string&quot;&gt;&quot;opti&quot;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token property&quot;&gt;&quot;warnOnFail&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token property&quot;&gt;&quot;maxSubjectLength&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token property&quot;&gt;&quot;subjectPattern&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;.+&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token property&quot;&gt;&quot;subjectPatternErrorMsg&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;请输入message信息!&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token property&quot;&gt;&quot;helpMessage&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;Commit message 格式错误, \n请查看规范: https://dwbbb.com/blog/Git-Commit-Message/&quot;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content:encoded></item><item><title><![CDATA[使用 Sketch 制作 APP 视觉设计稿]]></title><description><![CDATA[大讲堂App视觉稿地址 一、背景 前段时间在公司实习培训，做一个项目，使用React Native开发一个新的在线学习APP，时间比较紧(4人开发 每人9天的时间)，如何在较短的时间内开发成熟可用、易于维护、简洁美观的APP…]]></description><link>https://dwb1994.github.io/blog/sketch-design/</link><guid isPermaLink="false">https://dwb1994.github.io/blog/sketch-design/</guid><pubDate>Sun, 09 Apr 2017 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;&lt;a href=&quot;http://dwbbb.com/projects/qtown/&quot;&gt;大讲堂App视觉稿地址&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;一、背景&lt;/h2&gt;
&lt;p&gt;前段时间在公司实习培训，做一个项目，使用React Native开发一个新的在线学习APP，时间比较紧(4人开发 每人9天的时间)，如何在较短的时间内开发成熟可用、易于维护、简洁美观的APP是我那些天一直在思考和实践的事情。&lt;/p&gt;
&lt;p&gt;在这个项目中，我们较为严格按照项目流程来开发，由于开发人员和产品经理都是实习生，经验很少，有两个主要问题：一个问题是缺乏经验的人非常容易在开发中修改需求，每一次需求变更都可能牵一发而动全身；第二个问题是前端页面每个人都做独立的页面，做出来的样式不容易统一，包括颜色值、字体大小、行高、边距、圆角等等，如果多个页面视觉效果不统一，那么即使再美观也失去了意义，在UI设计原则中，易用性和一致性都是非常重要的原则，重要性都要高于美观性。&lt;/p&gt;
&lt;p&gt;因此我觉得应该在要求的项目中再加入原型设计和视觉设计的步骤，虽然多花了两三天时间，但是为了减少需求变更、为了视觉效果统一、为了更高效更有条理地开发，我认为值得进行这两步。&lt;/p&gt;
&lt;p&gt;由于我们只有4前端 + 1 android + 1 ios + 1 产品经理，没有UI、UE，因此做原型图和视觉设计稿（以下简称视觉稿）的任务就只能自己来完成。&lt;/p&gt;
&lt;p&gt;由于开发需要，我们申请了mac，终于使用到了一直想尝试使用的sketch工具，并决定使用sketch来制作视觉设计稿。&lt;/p&gt;
&lt;p&gt;开发时间：2017.4.3~2017.4.4&lt;/p&gt;
&lt;p&gt;视觉稿开发工时：和培训组的另一位前端同学（&lt;a href=&quot;https://venoral.github.io/&quot;&gt;@许欣&lt;/a&gt;）开发，每人 &amp;#x3C; 2天时间&lt;/p&gt;
&lt;h2&gt;二、什么是sketch？&lt;/h2&gt;
&lt;p&gt;Sketch 是一款适用于所有设计师的矢量绘图应用。矢量绘图也是目前进行网页，图标以及界面设计的最好方式。但除了矢量编辑的功能之外，还包含一些基本的位图工具，比如模糊和色彩校正。&lt;/p&gt;
&lt;p&gt;对于绝大多数的数字产品设计，Sketch 都能替代 Adobe Photoshop，Illustrator 和 Fireworks，在本次开发中，我们使用了sketch完成了12个页面的设计和LOGO设计。&lt;/p&gt;
&lt;h2&gt;三、使用sketch有什么好处？&lt;/h2&gt;
&lt;p&gt;相对于photoshop来说，sketch更专注于Web界面设计，组件复用非常方便。&lt;/p&gt;
&lt;p&gt;Sketch的measure插件可以将设计稿生成为html页面，离线检查所有涉及细节，包括各种css样式。&lt;/p&gt;
&lt;p&gt;使用photoshop开发时，前端同学需要安装ps，在ps里面手动测量距离、颜色值等信息；而sketch无需安装，在sketch导出的html页面中，只需要鼠标选中某个元素即可查看到所有样式，通过鼠标悬停可以查看到元素距离各个其他元素的距离，完全不需要手动测量。这对于前端切图来说，效率提升非常大！&lt;/p&gt;
&lt;h2&gt;四、如何使用sketch制作视觉设计稿？&lt;/h2&gt;
&lt;h3&gt;1.确定设计风格&lt;/h3&gt;
&lt;p&gt;sketch提供了几种风格的UI元件，可以直接使用，一般我们可以套用iOS Design或者Material Design，分别是iOS和Android的主流设计风格，如下图，在新建文件时选择Templates可以选择UI模板。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/img/others/QQ20170523-183329@2x.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;遵循UI设计的一致性原则，在设计之前确定整体风格非常重要，这就需要分析用户的特征、考虑开发难度。&lt;/p&gt;
&lt;p&gt;a.分析用户特征&lt;/p&gt;
&lt;p&gt;在本次开发中，开发的产品用户是公司内部的成员，这些用户比较年轻，乐于接受新事物，iOS用户比例较高。&lt;/p&gt;
&lt;p&gt;b.考虑开发难度&lt;/p&gt;
&lt;p&gt;在本次开发中使用 &lt;a href=&quot;http://ued.qunar.com/qrn/&quot;&gt;QRN&lt;/a&gt;（Qunar 基于 React Native 深度定制的移动平台框架）开发，这个框架抹平了iOS和Android平台的差异，代码复用率高，这在开发周期短的情况下可以节约大量的开发成本。而且QRN的UI属于iOS风格，因此在本次sketch的设计中选择了iOS的模板为基础。&lt;/p&gt;
&lt;p&gt;Android &amp;#x26; iOS的设计风格统一有哪些好处，可以看这篇知乎上的讨论：&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.zhihu.com/question/20405376&quot;&gt;Android &amp;#x26; iOS 跨平台统一化设计的优劣？&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;2.确定配色&lt;/h3&gt;
&lt;p&gt;根据产品文化背景、用户特征和使用场景来进行配色。&lt;/p&gt;
&lt;p&gt;a.文化背景&lt;/p&gt;
&lt;p&gt;例如运动类的app配色可以更鲜艳，表现有活力的文化背景；知识分享类的app配色可以使用蓝色，表现科技、知识的文化背景，在本应用中，由于是qunar公司内部app，我们选用了一种与“qunar蓝”同色系的颜色，与qunar的app logo保持设计的一致性。&lt;/p&gt;
&lt;p&gt;b.用户特征&lt;/p&gt;
&lt;p&gt;如果是用户比较年轻的话，可以接受更鲜艳的颜色。&lt;/p&gt;
&lt;p&gt;c.使用场景&lt;/p&gt;
&lt;p&gt;app的使用场景越不稳定，就需要越高的对比度才能区别不同对比度的颜色，例如人们在坐地铁时使用手机的话，需要分散注意力在其他人身上、地铁报站等，分散注意代价很高，分配到app上的注意力比较少，因此更加不容易区分不同对比度的文字。&lt;/p&gt;
&lt;p&gt;确定APP中使用率最高的几种基本颜色，确定配色方案可以保证APP不会出现五花八门的颜色。这里推荐一个在线配色的网站：&lt;a href=&quot;https://coolors.co/&quot;&gt;https://coolors.co/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;一般APP需要基本颜色包括：&lt;/p&gt;
&lt;p&gt;主色、黑色、警告色、提示色。&lt;/p&gt;
&lt;p&gt;a.主色&lt;/p&gt;
&lt;p&gt;应用于绝大部分元素，例如文本、header、icon、边框、按钮、背景等，确定主色之后尽可能多的元素都使用这个颜色值，体现设计的一致性。&lt;/p&gt;
&lt;p&gt;b.黑灰色&lt;/p&gt;
&lt;p&gt;应用于文本，在确定色调时应该确定不同深度的黑灰色，以区别标题、文本与提示文字等，便于用户分清信息的主次关系。&lt;/p&gt;
&lt;p&gt;c.警告色&lt;/p&gt;
&lt;p&gt;应用于错误提示、按钮等，一般使用红色系的颜色。&lt;/p&gt;
&lt;p&gt;d.提示色&lt;/p&gt;
&lt;p&gt;应用于其他提示、按钮等，一般使用与主色相近但明度较高的颜色或者蓝色、绿色。信息的提示如果不是错误提示不要使用红色，红色会让用户以为发生了错误。&lt;/p&gt;
&lt;p&gt;扁平化设计中一般不会选择饱和度过高的颜色，这些颜色过于刺眼，黑色同样如此，纯黑的#000会与其他扁平化元素的色调不符，因此一般在设计规范中体现出来最深的黑灰色值，场景越稳定，最深的黑灰色值可以更浅。&lt;/p&gt;
&lt;p&gt;这里有一个小技巧：减少颜色的重量(提高明度)可以使文本看起来更细，这是一种视觉错觉，在font-weight兼容性不好的情况下可以通过改变颜色明度来调整文字的粗细程度。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/img/others/1a535c-4ecdc4-f7fff7-ff6b6b-080705.png&quot; alt=&quot;本应用的配色方案&quot;&gt;&lt;/p&gt;
&lt;h3&gt;3.确定基准设备&lt;/h3&gt;
&lt;p&gt;在移动开发中设备分辨率、像素密度、高宽比差异化明显，在制作设计稿时需要选择一个基准设备(如果做响应式设计可能有多个基准设备)，其他设备可以进行屏幕适配，屏幕适配方案在本文不做讨论。&lt;/p&gt;
&lt;p&gt;基准设备要考虑用户使用设备的类型比例，在商业应用中，多数公司选择了以苹果的设备为基准，一方面iOS用户消费能力更强，另一方面Android碎片化严重而iOS设备差异化较小，一般做好iphone6和iphone6 plus的适配即可。本应用以iphone6/7的分辨率为基准进行设计稿的制作。&lt;/p&gt;
&lt;h3&gt;4.新建项目&lt;/h3&gt;
&lt;p&gt;a.打开sketch，选择“新建文档”。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/img/others/QQ20170525-225447@2x.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;b.点击左上角的“+”号，选择“画板”。
&lt;img src=&quot;/img/others/14AF9F0B-D78B-41FB-A36B-721B2C4D3468.jpg&quot; width=&quot;50%&quot;&gt;&lt;/p&gt;
&lt;p&gt;c.在右侧选择“iphone7”。&lt;/p&gt;
&lt;img src=&quot;/img/others/180F4BB6-98A6-4C5A-9CE1-11B83EE018FA.jpg&quot; width=&quot;50%&quot;&gt;
&lt;p&gt;d.点击左上角的“展开页面列表”&lt;/p&gt;
&lt;img src=&quot;/img/others/030151A2-71F1-46DE-B746-F6221D0E3E93.jpg&quot; width=&quot;60%&quot;&gt;
&lt;p&gt;e.如果想新建一个页面，请点击右侧的“+”号或者复制页面。&lt;/p&gt;
&lt;img src=&quot;/img/others/QQ20170525-230308@2x.png&quot; width=&quot;60%&quot;&gt;
&lt;img src=&quot;/img/others/7480EC40-F4F8-42DF-A432-AB4F230192AC.jpg&quot; width=&quot;50%&quot;&gt;
&lt;p&gt;以上是新建画板和页面的方式，需要注意的是二者的区别：画板是我们绘图的范围，一个画板可以有多个页面。我们制作APP设计稿时需要在同一个范围内绘制不同页面，因此只需要在同一个画板里新建不同页面即可。&lt;/p&gt;
&lt;h3&gt;5.开始搬运，学会临摹&lt;/h3&gt;
&lt;p&gt;设计并不是完全凭空想象出来的，而是用已有的元素创造新的元素。尤其是在缺乏设计能力的时候，临摹是一条捷径。&lt;/p&gt;
&lt;p&gt;a.原生UI&lt;/p&gt;
&lt;p&gt;在sketch中，新建文件时可以选择新建ios模板，里面是绝大多数ios的设计中使用的元素，我们可以直接复制粘贴到我们的项目中，再加以个性化定制。在个性化定制时应遵循设计的一致性原则，尽量不改变复制过来的元素的圆角大小、字体字号、边距等样式，一般修改元素的文本颜色就足够了。&lt;/p&gt;
&lt;p&gt;b.临摹其他产品的设计&lt;/p&gt;
&lt;p&gt;在设计之前可以多浏览同类产品相似元素的设计，例如大讲堂APP中有一些图文列表，这些列表在在线教育、视频、直播类APP中经常出现，因此在确定这个元素时，综合对比了同类APP的列表元素设计，分析了各种设计的优缺点，结合自己产品的需求和背景确定了自己的设计。&lt;/p&gt;
&lt;p&gt;临摹的关键在于临摹的字号、行高行距、边距边框、阴影、圆角距离等样式，这些样式在没有设计稿的程序开发中往往被忽视，恰恰这些基本样式才是一个设计的基石，基本样式往往遵循了某个成熟的设计规范或自己定制的一套设计规范，因此临摹这些样式是必须的。&lt;/p&gt;
&lt;h3&gt;6.技巧&lt;/h3&gt;
&lt;p&gt;a. 使用iconfont
首先下载iconfont的字体文件，安装字体到系统中。
然后启动(重启)sketch，复制iconfont图标(注意是图标，不是编码)到sketch中，粘贴图标，会看到sketch的画布上出现一个问号和方框，在右侧面板可以选择该图标的字体，我们选择刚刚安装字体的名称即可看到问号变成了我们要的图标。
&lt;img src=&quot;/img/others/QQ20170723-220500.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;b. 善用参考线
使用参考线可以快速、准确地对齐某些元素。
在sketch的面板中，选择“显示” - “画布” - “显示标尺”(快捷键Control+R)。然后鼠标在标尺上点击(鼠标悬浮在标尺上时可以看到坐标数值，用于精确插入参考线)，即可插入参考线，拖拽已存在的参考线到标尺尽头即可删除该参考线。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/img/others/QQ20170723-220928.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/img/others/WX20170723-221224.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;c. 制作物理1px的细线
物理1px是移动开发的一个概念，移动设备中“物理像素”和“设备独立像素”存在设备像素比(dpr)，css中使用的1px实际上可能是多个物理像素，在本文不详细介绍，有兴许同学可以看这篇文章：
&lt;a href=&quot;http://www.cocoachina.com/webapp/20150715/12585.html&quot;&gt;解惑好文：移动端H5页面高清多屏适配方案&lt;/a&gt;
在sketch中绘制物理1px的线条有个窍门：使用“矩形工具”而不是“直线工具”绘制，例如我们画板的尺寸是iphone7的(375*667)，想绘制一条贯穿屏幕的横线，应该绘制高0.5px、宽375px的矩形。
使用矩形而不是直线的原因是：
使用矩形工具在设置位置时，以矩形左上角为坐标中心，宽与高的坐标依次相对坐标中心相加；而使用直线工具则是以直线一段左上角的坐标加上直线的边框厚度的一半为坐标中心，计算相对麻烦一些，并且这时显示的边框宽度实际上是我们前端所需的“border-width”的一半：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/img/others/juxing.png&quot; alt=&quot;使用矩形工具&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/img/others/WX20170726-111124.png&quot; alt=&quot;使用直线工具&quot;&gt;&lt;/p&gt;
&lt;p&gt;d.分页面与分组
分页面也是一种分组，给不同的页面起对应的名字，在导出的时候能让别人明确地知道这个页面是什么，一般我取名都是“xx页”，这个名字在设计和开发中会被反复提及，所以应该简短、清晰易懂。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;点击左上角页面右侧的“+”新建页面并取名字：&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;/img/others/createPage.png&quot; alt=&quot;新建页面&quot;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在页面中新画板(Artboard):
可以在同一个页面中插入多个画板，也可以在不同页面中单独插入画板:&lt;/li&gt;
&lt;/ul&gt;
&lt;img src=&quot;/img/others/insertArtboard.png&quot; width=&quot;50%&quot;&gt;
&lt;p&gt;&lt;img src=&quot;/img/others/WX20170724-213539.png&quot; alt=&quot;新建画板&quot;&gt;&lt;/p&gt;
&lt;p&gt;e.持续集成
制作设计稿是一个比较耗时的过程，在制作过程中建议一边制作一边导出查看效果，这样避免大量的返工。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;导出成html查看坐标及距离是否准确，导出方式见下方第7点。&lt;/li&gt;
&lt;li&gt;导出成jpg图片，在手机上查看设计是否符合预期要求，左侧选中一个画板，点击右下角的“导出图层”，根据手机的dpr填写对应的大小(例如iphone6/7填写2x，iphone6/7plus填写3x)：&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;/img/others/WX20170724-213624.png&quot; alt=&quot;选择画板&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/img/others/WX20170724-213724.png&quot; alt=&quot;设置导出尺寸&quot;&gt;&lt;/p&gt;
&lt;h3&gt;7.导出&lt;/h3&gt;
&lt;p&gt;安装&lt;a href=&quot;http://sketch.im/plugins/1&quot;&gt;Sketch Measure插件&lt;/a&gt;，用于导出设计稿，使用这个插件可以导出成HTML文件，在打开的网页中可以看到各个组件之间的距离，甚至能看到css代码，十分方便，省去了photoshop文件切图的时间，提高很多工作效率。
&lt;img src=&quot;/img/others/WX20170724-214722@2x.png&quot; alt=&quot;Sketch Measure插件导出的html&quot;&gt;&lt;/p&gt;
&lt;h2&gt;五、后记&lt;/h2&gt;
&lt;p&gt;制作这个大讲堂的UI稿时刚接触sketch，第一次使用就被它创造的价值震撼，它高效、易用、多人开发保证一致的样式，在接下来的开发中不断印证这些优势。在敏捷开发中，抽出一两天时间用于制作sketch设计稿是非常划算的。&lt;/p&gt;</content:encoded></item><item><title><![CDATA[移动端 300ms 延迟解决方案及其优化]]></title><description><![CDATA[移动端的click事件存在300ms延迟，这是为“双击放大”的效果提供一个反应时间，即300ms内双击屏幕放大页面，两次点击间隔超过300ms时不放大页面。 但是这种效果的体验不好，在不需要用户双击放大的时候，click事件会在300ms…]]></description><link>https://dwb1994.github.io/blog/300ms-optimize-mobile/</link><guid isPermaLink="false">https://dwb1994.github.io/blog/300ms-optimize-mobile/</guid><pubDate>Wed, 01 Feb 2017 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;移动端的click事件存在300ms延迟，这是为“双击放大”的效果提供一个反应时间，即300ms内双击屏幕放大页面，两次点击间隔超过300ms时不放大页面。&lt;/p&gt;
&lt;p&gt;但是这种效果的体验不好，在不需要用户双击放大的时候，click事件会在300ms后执行，给用户一种反应迟钝的感觉，那么如何消除这300ms延迟的影响呢？&lt;/p&gt;
&lt;h2&gt;方案一&lt;/h2&gt;
&lt;p&gt;设置viewport的user-scalable：no，禁止用户手动缩放页面，则使用click事件不会产生延迟。&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;html&quot;&gt;&lt;pre class=&quot;language-html&quot;&gt;&lt;code class=&quot;language-html&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;meta&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;viewport&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;content&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;user-scalable=no&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;但是这样设置页面就无法缩放了，有时这个功能还是有必要存在的。&lt;/p&gt;
&lt;h2&gt;方案二&lt;/h2&gt;
&lt;p&gt;首先分析一下：HTML5中新增了移动端的触摸事件，我们可以用其中的touchstart、touchmove和touchend事件来模拟点击的过程，由于touch相关事件没有延迟，因此用来模拟click事件可以解决300ms延迟的问题。&lt;/p&gt;
&lt;p&gt;梳理一下实现思路：
我们要模拟的click事件，是在这个DOM（或冒泡到这个DOM）上手指触摸开始，且手指未曾在屏幕上移动（某些浏览器允许移动一个非常小的位移值），且在这个dom上手指离开屏幕，且触摸和离开屏幕之间的间隔时间较短（某些浏览器不检测间隔时间，也会触发click）才能触发。&lt;/p&gt;
&lt;p&gt;事件的触发顺序是：touchstart早于touchend早于click。&lt;/p&gt;
&lt;p&gt;为了统一浏览器间差异：&lt;/p&gt;
&lt;p&gt;1.用touchmove检测手指移动的距离，超过设定的值则不触发click事件；&lt;/p&gt;
&lt;p&gt;2.如果touchstart与touchend间隔时间过长，则不触发click事件。&lt;/p&gt;
&lt;p&gt;理清思路后，开始具体实现：&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;onTap&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;element&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; handler&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    element &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; document&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;querySelectorAll&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;element&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// 获取元素&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; initX&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; initY&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; movedX&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; movedY&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; distance&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; startTime&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; delay&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token comment&quot;&gt;// 监听touchstart事件&lt;/span&gt;
    element&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;addEventListener&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;touchstart&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        startTime &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; Date&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;now&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// 记录touchstart的时间戳&lt;/span&gt;
        distance &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// 初始化手指移动距离&lt;/span&gt;
        initX &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; e&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;changedTouches&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;clientX&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// 初始化touchstart时的X/Y坐标&lt;/span&gt;
        initY &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; e&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;changedTouches&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;clientY&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token comment&quot;&gt;// 监听touchmove事件&lt;/span&gt;
        element&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;addEventListener&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;touchmove&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
            movedX &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; e&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;changedTouches&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;clientX&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// 实时获取touchmove时的X/Y坐标&lt;/span&gt;
            movedY &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; e&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;changedTouches&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;clientY&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;token comment&quot;&gt;// 计算手指位移距离&lt;/span&gt;
            distance &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; Math&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;sqrt&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt; Math&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;pow&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;movedX &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt; initX&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; Math&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;pow&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;movedY &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt; initY&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token comment&quot;&gt;// 监听touchend事件&lt;/span&gt;
    element&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;addEventListener&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;touchend&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        delay &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; Date&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;now&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt; startTime&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// 获取touchend和touchstart的时间间隔&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;delay&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;300&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; distance&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;30&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;token function&quot;&gt;handler&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// 执行传入的回调函数&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
        distance &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// 重置距离&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;进一步优化&lt;/h2&gt;
&lt;p&gt;这样实现了上述的效果，不过依然存在问题。&lt;/p&gt;
&lt;p&gt;问题1：“点击穿透”现象；&lt;/p&gt;
&lt;p&gt;问题2：点击时，被点击元素没有反馈。&lt;/p&gt;
&lt;p&gt;先来说问题1：“点击穿透”现象：&lt;/p&gt;
&lt;p&gt;在上述代码中，如果页面中两个元素相互重叠，上层元素点击消失或移出点击范围，且下层元素有监听点击事件时，上层的点击会触发下层的点击事件。&lt;/p&gt;
&lt;p&gt;这是因为click事件有300ms的延迟，在touchend的时候隐藏了上层元素，而延时300ms的click事件点击到了下层的元素，即为“点击穿透”。&lt;/p&gt;
&lt;p&gt;解决方案：&lt;/p&gt;
&lt;p&gt;为touchend事件阻止默认动作：e.preventDefault();点击时，被点击元素经历如下事件流：touchstart-&gt;touchend-&gt;click。touchend时阻止默认行为，可以阻止后面事件的触发。&lt;/p&gt;
&lt;p&gt;再来说问题2：&lt;/p&gt;
&lt;p&gt;“所有能够响应触屏操作的元素在触屏后都应该有一个视觉上的反馈。这也是为什么一个”web”应用总是显得不够”原生”的主要原因之一。” —— React Native官方文档，TouchableWithoutFeedback&lt;/p&gt;
&lt;p&gt;解决：为元素在被点击时添加一个class，这个class应该由用户以参数形式传入，用户可以使用这个class添加反馈的样式。&lt;/p&gt;
&lt;h2&gt;优化后的代码：&lt;/h2&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;onTap&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;element&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; handler&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; touchClass&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    element &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; document&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;querySelectorAll&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;element&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; initX&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; initY&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; movedX&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; movedY&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; distance&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; startTime&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; delay&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    element&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;addEventListener&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;touchstart&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        startTime &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; Date&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;now&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        distance &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        initX &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; e&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;changedTouches&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;clientX&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        initY &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; e&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;changedTouches&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;clientY&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token comment&quot;&gt;// 如果touchClass参数存在则为点击的元素添加class&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;touchClass&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
            element&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;classList&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;touchClass&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;token comment&quot;&gt;// 长按元素超过300ms不触发点击事件，移除touchClass&lt;/span&gt;
            &lt;span class=&quot;token function&quot;&gt;setTimeout&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
                element&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;classList&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;remove&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;touchClass&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;300&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
        element&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;addEventListener&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;touchmove&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
            movedX &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; e&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;changedTouches&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;clientX&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
            movedY &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; e&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;changedTouches&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;clientY&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
            distance &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; Math&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;sqrt&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt; Math&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;pow&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;movedX &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt; initX&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; Math&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;pow&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;movedY &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt; initY&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;touchClass &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; distance &lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;30&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
                element&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;classList&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;remove&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;touchClass&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    element&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;addEventListener&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;touchend&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        e&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;preventDefault&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// 阻止默认动作&lt;/span&gt;
        delay &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; Date&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;now&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt; startTime&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;delay &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;300&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; distance &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;30&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;token function&quot;&gt;handler&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;token comment&quot;&gt;// 点击事件发生后移除touchClass&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;touchClass&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; element&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;classList&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;remove&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;touchClass&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        distance &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content:encoded></item><item><title><![CDATA[React 组件之间如何交流 (ES6)]]></title><description><![CDATA[首先感谢这篇文章：React组件之间如何交流 在最近的实习中，我使用react(es6)进行项目开发，在项目里收获了一些经验。 由于上面文章是es5写的，我在此基础上提炼一下，使用es6，结合自己项目里的思考，在这里记录一下： React…]]></description><link>https://dwb1994.github.io/blog/react-component/</link><guid isPermaLink="false">https://dwb1994.github.io/blog/react-component/</guid><pubDate>Sun, 11 Dec 2016 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;首先感谢这篇文章：&lt;a href=&quot;https://segmentfault.com/a/1190000004044592&quot;&gt;React组件之间如何交流&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;在最近的实习中，我使用react(es6)进行项目开发，在项目里收获了一些经验。&lt;/p&gt;
&lt;p&gt;由于上面文章是es5写的，我在此基础上提炼一下，使用es6，结合自己项目里的思考，在这里记录一下：&lt;/p&gt;
&lt;p&gt;React将视图抽象为一个个组件，每个组件都有一个state，记录组件的状态。当状态发生改变的时候，react内部执行diff判断组件是否需要更新，若需要更新则重新渲染。&lt;/p&gt;
&lt;p&gt;组件之间的交流分为三类：&lt;/p&gt;
&lt;h2&gt;一、父组件向子组件传值：&lt;/h2&gt;
&lt;p&gt;通过props传值，父组件将需要传的值写在子组件的属性值里，子组件通过props可以访问到这个值。&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Father&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;React&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Component&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token function&quot;&gt;constructor&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;props&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;props&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;state &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
            value&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;father\&apos;s value&apos;&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;token function&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
            &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;div&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;
                father&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;state&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;value&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
                &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;Child value&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;state&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;value&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;
            &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;div&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Child&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;React&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Component&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token function&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
            &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;p&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;child&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;props&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;value&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;p&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;二、子组件向父组件传值：&lt;/h2&gt;
&lt;p&gt;以回调函数的形式影响父组件。父组件将组件内自定义的回调函数的引用以属性的形式传给子组件，子组件内部可以通过props访问到这个函数，子组件在逻辑完成后调用这个回调函数即可执行父组件内部的函数。&lt;/p&gt;
&lt;p&gt;注意：这里有个坑，组件内自定义的函数无法直接取到this的引用，需要用bind将this传进去，或者使用es6的箭头函数，个人认为后者更容易一些。（如下面Child组件的onCheckboxChange方法）&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;MyContainer&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Component&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token function&quot;&gt;constructor&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;props&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;props&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;state &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
            checked&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;false&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;token function-variable function&quot;&gt;onChildChanged&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;newState&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;setState&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
            checked&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; newState
        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;token function&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
            &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;div&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;点击状态&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;JSON&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;stringify&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;state&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;checked&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;Child callbackParent&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;onChildChanged&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
            initialChecked &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;state&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;checked&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;
            &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;div&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Child&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Component&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token function-variable function&quot;&gt;onCheckboxChange&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; newState &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;props&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;initialChecked&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;props&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;callbackParent&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;newState&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;token function&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
            &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;div&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;
                &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;label&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;请点击&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;label&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;
                &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;input type&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;checkbox&quot;&lt;/span&gt;
                checked&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;props&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;initialChecked&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
                onChange&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;onCheckboxChange&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
                &lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;
            &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;div&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;三、组件之间传值：&lt;/h2&gt;
&lt;p&gt;这里我为了实现一个需求，企图通过用一个input输入框记录一个组件的值，通过这个输入框的onchange事件将change之后的值传给另一个组件，实现组件间的交流。实际上这样不可行，抛开写法混乱、违背了react数据单向流动的初衷不谈，本身是不可行的，&lt;strong&gt;onchange监听不到脚本引起的value值的改变&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;通过网上查阅资料及咨询同事，我将需要传值的两个组件包含在同一个父组件之中，将传的值以state的形式存储于顶级组件中，通过一个组件调用回调函数影响顶级组件的state，再通过props来影响另一个子组件的渲染。&lt;/p&gt;
&lt;p&gt;也可以使用refs，设置子组件的ref值，通过父组件的refs访问到子组件的自定义方法(回调函数)从而执行子组件的方法。&lt;/p&gt;
&lt;p&gt;除了上述的行为外，两个不属于同一父组件的组件应该也可能有通信的需求，在上面的文章里有涉及，感兴趣的同学可以看一看。由于项目中没遇到，我就不在这里总结了。&lt;/p&gt;</content:encoded></item><item><title><![CDATA[手淘 flexible.js 分析]]></title><description><![CDATA[flexible是手淘移动端自适应的方案，github地址： https://github.com/amfe/lib-flexible flexible.js源码： https://github.com/amfe/lib-flexible/blob/master/src…]]></description><link>https://dwb1994.github.io/blog/flexible/</link><guid isPermaLink="false">https://dwb1994.github.io/blog/flexible/</guid><pubDate>Wed, 05 Oct 2016 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;flexible是手淘移动端自适应的方案，github地址：&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/amfe/lib-flexible&quot;&gt;https://github.com/amfe/lib-flexible&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;flexible.js源码：&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/amfe/lib-flexible/blob/master/src/flexible.js&quot;&gt;https://github.com/amfe/lib-flexible/blob/master/src/flexible.js&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;在网易实习的时候主要开发的项目是网易有钱h5项目，一直在用flexible做移动端自适应。在开发中我查看了flexible的源码，结合项目里遇到的一些坑，在这里总结一下这个框架的优缺点。&lt;/p&gt;
&lt;h2&gt;一、源码结构&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;meta名称为viewport的标签设置了scale时，将根据scale手动设置dpr(dpr用于实现flexible其他功能)。&lt;/li&gt;
&lt;li&gt;meta名称为flexible的标签存在时，手动设置dpr(本来没有这个标签，flexible源码添加了这个API并解析这个标签的属性，详见文档)。&lt;/li&gt;
&lt;li&gt;根据js获取到的devicePixelRatio设置dpr及scale，scale是dpr的倒数。(ios系统根据dpr的值设置为1、2、3，Android统一设置dpr为1)。&lt;/li&gt;
&lt;li&gt;添加meta标签，设置name为viewport，content根据scale设置缩放比(默认、最大、最小缩放比)。&lt;/li&gt;
&lt;li&gt;resize事件与pageshow事件延时300毫秒触发fontSize的重置(这里用了防抖函数，防止resize事件被高频触发可能引起的性能问题)&lt;/li&gt;
&lt;li&gt;为body设置fontSize，值为12*dpr+”px”&lt;/li&gt;
&lt;li&gt;扩展一些方法：获取页面dpr，获取rem基准值，rem与px相互转换，重置dpr，这些方法可以在引入flexible.js之后调用，使用方式参考api文档。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;以上是源码整体的结构，实际上我们在使用的时候很多功能用不到，比如手动设置scale和dpr、flexible标签、扩展方法等等。因此在默认设置的时候，flexible核心的操作如下：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;为html添加data-dpr属性和style属性，style添加font-size作为1rem的基准值。&lt;/li&gt;
&lt;li&gt;改写meta标签，根据dpr设置设备的缩放比。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;二、flexible优点&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;可以适配众多不同终端的设备。&lt;/li&gt;
&lt;li&gt;使用简便，只需引入 flexible.js 即可。&lt;/li&gt;
&lt;li&gt;由手淘团队维护，相对稳定。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;三、flexible缺点&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;不是纯css的移动适配方案，需要引入js文件。&lt;/li&gt;
&lt;li&gt;高宽比变化引起呈现变化，一般公司里的UI设计稿是以iphone6的屏幕为画布，高宽比为16:9，flexible的rem长度本质上是基于设备宽度的百分比长度，因此在设备高宽比非16:9的时候将会不再是设计稿希望呈现的布局比例。(较常见的非16:9高宽比的场景有ipad的4:3、魅族16:10、手机横屏显示，如果需要在PC上访问高宽比更是多样化)
比如一个新闻列表，竖屏的时候可以一页显示六条新闻，ipad上只能显示四五条新闻，竖屏可能只能显示两三条。
一般限制主体内容区域的最大宽度，使之在屏幕高宽比变小的时候不至于字号、图片过大影响用户体验。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&quot;/img/others/you163.png&quot; alt=&quot;you163&quot;&gt;&lt;/p&gt;
&lt;ol start=&quot;3&quot;&gt;
&lt;li&gt;
&lt;p&gt;吃像素问题，浏览器的渲染，最小的单位就是像素，不可能一个像素出现多种颜色。而通过rem计算后的距离值经常出现小数，浏览器会对这部分小数进行四舍五入，从而按照整数渲染颜色。有可能会导致元素边缘被“吃掉”一部分。&lt;/p&gt;
&lt;p&gt;四舍五入吃像素的细节参见：&lt;a href=&quot;https://juejin.im/post/5d60fe52e51d4561a705bb20&quot;&gt;rem产生的小数像素问题&lt;/a&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;兼容性问题，安卓4.3及2以下版本系统不支持viewport缩放。&lt;/li&gt;
&lt;li&gt;webview限制，webview作为原生开发的一个组件，移动客户端可以限制这个组件的大小。在webview大小被限制的时候，使用flexible使得比例难以计算。&lt;/li&gt;
&lt;li&gt;不支持响应式设计方案，响应式设计需要用到css3媒体查询，根据查询到的设备宽度使用不同的css样式。而引入flexible的页面会根据dpr进行缩放，css3媒体查询得到的是缩放前的宽度而不是缩放后的宽度。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;四、后记&lt;/h2&gt;
&lt;p&gt;在去哪儿网第二轮面试时遇到了杜瑶大神，在面试中交流了很多移动适配和响应式设计的细节。&lt;/p&gt;
&lt;p&gt;去哪儿网内部使用Yo作为移动UI框架，是纯css方案，且支持响应式。在入职前要求自学这个框架，后面我会仔细研究，另发日志记录这个方案。&lt;/p&gt;
&lt;p&gt;详见：&lt;a href=&quot;https://sdk.cn/news/3275&quot;&gt;Yo-高可定制化的UI框架&lt;/a&gt;&lt;/p&gt;</content:encoded></item><item><title><![CDATA[龙吟]]></title><description><![CDATA[…]]></description><link>https://dwb1994.github.io/blog/Dragons/</link><guid isPermaLink="false">https://dwb1994.github.io/blog/Dragons/</guid><pubDate>Sat, 01 Oct 2016 00:00:00 GMT</pubDate><content:encoded>&lt;h2&gt;序&lt;/h2&gt;
&lt;p&gt;悠悠古道，往而不返，晦明倒置，馨徳尽失。&lt;/p&gt;
&lt;p&gt;有心布道，无力回天。然非圣贤，且属文以祭之: &lt;/p&gt;
&lt;p&gt;拂行迷之木叶 以筑高台&lt;/p&gt;
&lt;p&gt;汲泉林之精华 以飨群英&lt;/p&gt;
&lt;p&gt;拾渐离之遗筑 以奏伶乐&lt;/p&gt;
&lt;p&gt;着血墨之笔砚 以为华文&lt;/p&gt;
&lt;p&gt;漫天繁星 倏然中归&lt;/p&gt;
&lt;p&gt;层云高璇 隐见惊雷&lt;/p&gt;
&lt;p&gt;此间洞天 光华溢坠&lt;/p&gt;
&lt;p&gt;密文阵列 盘桓纷飞&lt;/p&gt;
&lt;h2&gt;其一&lt;/h2&gt;
&lt;p&gt;上古洪荒开宗祖，&lt;/p&gt;
&lt;p&gt;华夏龙族亘万年。&lt;/p&gt;
&lt;p&gt;绫罗绸缪掩铜鉴，&lt;/p&gt;
&lt;p&gt;血壁疮痍劣迹镌。&lt;/p&gt;
&lt;h2&gt;其二&lt;/h2&gt;
&lt;p&gt;驱车末路遇穷途，&lt;/p&gt;
&lt;p&gt;弃车闲步叹独孤。&lt;/p&gt;
&lt;p&gt;重枝密叶窥白鹿，&lt;/p&gt;
&lt;p&gt;宜当归隐不复出。&lt;/p&gt;
&lt;h2&gt;其三&lt;/h2&gt;
&lt;p&gt;三尺长铗饮龙泉，&lt;/p&gt;
&lt;p&gt;百战功名万骨缄。&lt;/p&gt;
&lt;p&gt;沙场长眠见哂笑，&lt;/p&gt;
&lt;p&gt;古来武夫岂知源。&lt;/p&gt;
&lt;h2&gt;其四&lt;/h2&gt;
&lt;p&gt;式微式微胡不归？&lt;/p&gt;
&lt;p&gt;思归思归梦几回？&lt;/p&gt;
&lt;p&gt;山雾寒麓泪雨坠，&lt;/p&gt;
&lt;p&gt;零落卷散岂可追？&lt;/p&gt;</content:encoded></item><item><title><![CDATA[2016 秋招百度、搜狐、去哪儿、网易面经]]></title><description><![CDATA[前言： 2016年8月31日从网易离职，转正答辩没通过，结束了第一份正式的实习工作，准备回校参加秋招。 由于8月在准备转正答辩，很多互联网公司的内推就错过了（后来也有人总结：真正的秋招是内推，很多公司内推招的差不多了，秋招很少招甚至不招了）。 离职后共投了3…]]></description><link>https://dwb1994.github.io/blog/autumn-interview/</link><guid isPermaLink="false">https://dwb1994.github.io/blog/autumn-interview/</guid><pubDate>Sat, 24 Sep 2016 00:00:00 GMT</pubDate><content:encoded>&lt;h2&gt;前言：&lt;/h2&gt;
&lt;p&gt;2016年8月31日从网易离职，转正答辩没通过，结束了第一份正式的实习工作，准备回校参加秋招。&lt;/p&gt;
&lt;p&gt;由于8月在准备转正答辩，很多互联网公司的内推就错过了（后来也有人总结：真正的秋招是内推，很多公司内推招的差不多了，秋招很少招甚至不招了）。&lt;/p&gt;
&lt;p&gt;离职后共投了30多家公司，基本上有名字的公司都投了一圈，后来感觉并不可取，心态有点浮躁，害怕没着落，就海投，导致每天都在投简历，没有时间准备笔试面试。想起春招的时候虽然身边招聘信息少，只投了BAT和网易，还有几家深圳的小公司，但是收到网易的面试通知后就集中精力准备网易面试，还是可以保证很好的面试状态的。&lt;/p&gt;
&lt;p&gt;秋招时第一个收到面试通知的是百度，要去成都参加面试，第一场很仓促，没有什么准备，自我感觉虽然进了二轮，但是回答错了很多，犯了很多低级错误。我觉得面试问的一些基础问题，在平时的开发里遇到的比较少，印象不深刻，在参加面试之前翻翻书，明确一下概念，效果要好很多。&lt;/p&gt;
&lt;p&gt;项目经历很多都提到了我在网易做的“&lt;a href=&quot;http://qian.163.com/discovery/finance/wealthTips.html&quot;&gt;财富锦囊&lt;/a&gt;”新闻列表页，在此感谢实习时的导师武浩威和张浩~&lt;/p&gt;
&lt;p&gt;从9月19号到23号，在成都5天一共参加10场面试。其中21号一天面了5场，收获了两个offer，分别是搜狐和去哪儿，还是很幸运的，在此记录一下。&lt;/p&gt;
&lt;h2&gt;去哪儿前端面经&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;时间：2016年9月21日&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;地点：成都市高新西区西源大道 锦熙印象酒店&lt;/em&gt;&lt;/p&gt;
&lt;h3&gt;一轮：&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;自我介绍。&lt;/li&gt;
&lt;li&gt;“财富锦囊”页面介绍，由这个项目介绍慢慢引出了前端性能优化的一些方式。&lt;/li&gt;
&lt;li&gt;做这个页面遇到了哪些bug？分别怎么解决的？(面试官提到了滑动牵扯到原生webview的跟随滑动而无法滚动文章列表的bug，我在项目里是协商调用原生接口，禁止原生webview跟随滑动)&lt;/li&gt;
&lt;li&gt;为什么页面从最左侧向右滑不能退出？&lt;/li&gt;
&lt;li&gt;flexible做移动适配会有什么问题？分别怎么解决的？(从1px边框的0.5处理、小数产生的像素碾压、高宽比、横屏的列表列数响应式设计等角度)&lt;/li&gt;
&lt;li&gt;tab标签切换的动画算法。&lt;/li&gt;
&lt;li&gt;panel下方文章列表支持左右滑动切换的滑动算法。(实际上这个滑动只需触发两个事件，分别是我们自己扩展的跟随滑动事件&amp;#x3C;获取tap与touchmove计算差值，从而移动panel&gt;，和松开手后滑动到哪一页的事件&amp;#x3C;判断水平滑动距离是否超过设备宽度的50%&gt;)&lt;/li&gt;
&lt;li&gt;移动端click事件的300ms延迟产生原因与解决方案(用touchdown模拟)。&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;手写下面两个需求：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;1.不使用jquery mobile的tap事件，用touch相关事件实现判断手触摸屏幕是发生了手指点击还是手指向上下左右四个方向发生滑动。(用touchdown、touchmove、touchup事件，根据event.clientX/Y等信息计算100ms内手指移动的距离是否超过自己预设的一个距离，根据勾股定理判断是否超过，如果超过距离则根据偏移的坐标信息判断手指滑动方向)&lt;/li&gt;
&lt;li&gt;2.不使用jquery mobile的tap事件，用touch相关事件实现判断：手指垂直方向滑动文章列表，松开手的时候是否应该继续滑动一段距离，或者立即停止滚动？(这里我想实现一个加速度的曲线，如果滑动松开手时候判断加速度的正负性，为正则继续滑动，为负则立即停止)。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;事件委托原理，有哪些好处。&lt;/li&gt;
&lt;li&gt;HTTP Request都包含什么信息。&lt;/li&gt;
&lt;li&gt;POST/GET有什么区别，JSONP如何实现跨域。&lt;/li&gt;
&lt;li&gt;作用域链，闭包的理解。&lt;/li&gt;
&lt;li&gt;如何实现继承。&lt;/li&gt;
&lt;li&gt;对新技术的了解(es6了解，Node/Express了解，React与React Native，Hybird开发的了解)。&lt;/li&gt;
&lt;li&gt;用过哪些后端语言(自己写过Node demo，项目里用Node，以前培训过J2EE，如果有需要可以捡起来)。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;二轮：&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;前端性能优化(从DOM操作、网络请求、资源文件加载三方面介绍)&lt;/li&gt;
&lt;li&gt;DOM操作里表格布局table为什么比div模拟表格更难以查询？&lt;/li&gt;
&lt;li&gt;DOM操作如何优化(编码遵循NEC规范，结构简洁利于查询，减少页面重排重绘)&lt;/li&gt;
&lt;li&gt;哪些操作会触发重排，哪些操作会触发重绘？更改文本的color会触发重排还是重绘？&lt;/li&gt;
&lt;li&gt;如何避免页面的重排重绘？&lt;/li&gt;
&lt;li&gt;H5页面的移动适配怎么做的？(我用的flexible)&lt;/li&gt;
&lt;li&gt;分析flexible的原理，flexible有哪些很大的问题？(面试官提醒，缩放后的页面很难做响应式，flexible是很糟糕的解决方案)&lt;/li&gt;
&lt;li&gt;flexible的适用场景有哪些？&lt;/li&gt;
&lt;li&gt;雪碧图如何在移动端适配？(这里面试官问雪碧图在不同dpr下的适配方式，我说在scss文件里css3可以获取dpr从而修改路径，面试官问background-position属性是不是要修改，后来经过面试官引导，主动想出了先根据dpr按比例缩放背景图，background-position不用修改)&lt;/li&gt;
&lt;li&gt;对响应式WEB设计的理解，Bootstrap的栅格系统是如何实现的(我之前用sass仿照bootstrap写过一个栅格系统)。&lt;/li&gt;
&lt;li&gt;响应式布局的优缺点，适用场景。(这里和面试官聊了很久，他倾向于响应式适用场景有限，实际上还是写了多套代码，并没有实现一套代码的复用，这样写的响应式代码不如不用，跨平台代码难以维护。复杂系统用很麻烦，但是用于轻量级的如博客系统比较合适。我提出了同一平台下的响应式布局有存在的意义，如后台管理系统的表格宽度非常宝贵，如果能做成响应式可以提高效率。)&lt;/li&gt;
&lt;li&gt;双飞翼布局原理。&lt;/li&gt;
&lt;li&gt;聊去哪儿网公司的技术氛围、人际氛围、发展前景。&lt;/li&gt;
&lt;li&gt;聊思维方式，与人交流的重要性。这里面试官说他们面试比较注重学习一种技术的时间与效果，比较看重人的发展潜力。&lt;/li&gt;
&lt;li&gt;聊我对UI设计的艺术追求，大学专业的选择和职业规划。聊大学都有哪些课程。&lt;/li&gt;
&lt;li&gt;我主动介绍我对JS的学习经历，我思维方式的进步(在网易养成了良好的思考问题方式，注重代码规范，独立思考解决问题，空闲时间搞个人研究的习惯)。&lt;/li&gt;
&lt;li&gt;主动介绍我对创新的理解，介绍学生会时候策划的密室装机大赛活动，称赞互联网公司的技术氛围。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;三轮：&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;看你项目很多，在三家公司实习过，说一下三家公司分别做了什么，因为什么原因离职。&lt;/li&gt;
&lt;li&gt;你认为你做前端开发的个人优势是什么？劣势是什么？(擅长UI，有四年素描、水粉培训经验，对前端有一定帮助，对前端有浓厚兴趣。劣势是对逻辑方面自我感觉没有特别高的天赋和兴趣，以后可能不想做技术专家，想转岗做产品经理)。&lt;/li&gt;
&lt;li&gt;大学的专业选择，职业规划。&lt;/li&gt;
&lt;li&gt;个人兴趣。&lt;/li&gt;
&lt;li&gt;在公司对自己职业的短期规划。(至少3~5年内做技术开发，沉淀前端的技术，深入研究一个以上的框架，从学习框架到实际应用与总结，再到查看源码研究性能。对前端包括整个软件开发有整体的认识。)&lt;/li&gt;
&lt;li&gt;聊对加班的想法。&lt;/li&gt;
&lt;li&gt;聊对offer的选择，更看重什么因素(个人发展/薪酬/城市)，聊对工资的预期。&lt;/li&gt;
&lt;li&gt;介绍公司的发展，定工资值，评级机制，培养机制，转岗机制等等。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;搜狐前端面经&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;时间：2016年9月21日&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;地点：成都市 电子科技大学 品学楼B211、B210&lt;/em&gt;&lt;/p&gt;
&lt;h3&gt;一轮：&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;自我介绍。&lt;/li&gt;
&lt;li&gt;财富锦囊文章列表页所做的优化。&lt;/li&gt;
&lt;li&gt;有没有做DOM回收处理？&lt;/li&gt;
&lt;li&gt;JS模块化(AMD/CMD/commonJS规范)&lt;/li&gt;
&lt;li&gt;commonJS怎么用的？&lt;/li&gt;
&lt;li&gt;JS继承。&lt;/li&gt;
&lt;li&gt;Bootstrap优缺点。&lt;/li&gt;
&lt;li&gt;HTTP怎么操作Cookie。&lt;/li&gt;
&lt;li&gt;如何实现jquery的选择器？&lt;/li&gt;
&lt;li&gt;jquery插件扩展方法。&lt;/li&gt;
&lt;li&gt;合并两个有序链表。&lt;/li&gt;
&lt;li&gt;快速排序。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;二轮：&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;定宽高浮层水平垂直居中。&lt;/li&gt;
&lt;li&gt;不定宽高浮层水平垂直居中。&lt;/li&gt;
&lt;li&gt;页面里有两个标签使用了同一id，js获取的是哪个？(第一个)&lt;/li&gt;
&lt;li&gt;如果我想获取第二个id，应该怎么做？(心里想还有这种问题，笑着说还真没这么写过，然后想抖个机灵：用其他的句柄，不用这两个相同的id不就行了。刚要开口时候忽然灵机一动，说先根据id获取第一个元素，然后修改这个id名字，再根据之前的id名字获取就可以获取到第二个了。)&lt;/li&gt;
&lt;li&gt;我的问题问完了，你还有什么问题吗？(到这里才面试了不到十分钟，感觉我的回答没出什么错误怎么时间这么短)。&lt;/li&gt;
&lt;li&gt;聊了聊搜狐这边面试的机制，一面很多问题问过了，二面不再问了。&lt;/li&gt;
&lt;li&gt;聊搜狐的发展。(称赞搜狐的创新)&lt;/li&gt;
&lt;li&gt;聊UI设计，思维方式，创新思维。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;百度前端面经&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;时间：2016年9月19日（一面）、9月22日（二面）&lt;/em&gt;
&lt;em&gt;地点：成都市金牛区 西门智选假日酒店&lt;/em&gt;&lt;/p&gt;
&lt;h3&gt;一轮：&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;自我介绍，(犯了致命问题，我说自己比较偏css，结果整个面试各种问css，很多概念没明确都答错了)。&lt;/li&gt;
&lt;li&gt;用js获取html文档里所有的标签个数(标签名未知)，获取后从大到小排序。(这里我想用childNodes遍历，建一个对象存储，键值对为：标签名-标签个数，结果后面的排序懵了，记得js高级程序设计里有一个sort方法的函数参数，可以根据对象属性值排序，当时紧张一时没想起来怎么写，这段是让我手写的，我写了一半。)&lt;/li&gt;
&lt;li&gt;面试官看我没写出来，说那你说说常用的排序算法吧。(我说快速排序，并把快速排序的实现原理说了一下，面试官让我写，问我多久能写出来，我说五分钟，面试官说好那不用写了。)&lt;/li&gt;
&lt;li&gt;JSONP的原理和使用步骤。&lt;/li&gt;
&lt;li&gt;CSS都有哪些选择器？&lt;/li&gt;
&lt;li&gt;CSS的选择器优先级关系？&lt;/li&gt;
&lt;li&gt;盒模型，div的实际宽度包不包括padding？&lt;/li&gt;
&lt;li&gt;两列布局，一列定宽一列自适应。(双飞翼布局与圣杯布局)。&lt;/li&gt;
&lt;li&gt;两列布局除了双飞翼和圣杯布局之外还可以怎么做？(我回答flex，他又追问flex具体如何实现，禁止扩展和缩小宽度分别是什么属性？shrink和grow)。&lt;/li&gt;
&lt;li&gt;一个div里面嵌套了一个div，外面div不设宽高，背景色为蓝色，内层div设置宽高100px且左浮动，背景色为红色，问用户看到的div是什么颜色。&lt;/li&gt;
&lt;li&gt;float的定义，float的影响如何清除。(只答上了clear:both的两种方式，后来回去查资料发现还有overflow:auto等方法，共计八种)。&lt;/li&gt;
&lt;li&gt;三个div，一层嵌套一层，名字分别为123，鼠标点击最里面的3，发生了什么事情？(我回答出了DOM事件流的过程)&lt;/li&gt;
&lt;li&gt;事件委托怎么做？有什么好处？(好处这里回答不完整，回去翻书发现好处有很多)。&lt;/li&gt;
&lt;li&gt;弹出层的实现，要求水平垂直居中，遮罩背景半透明，兼容IE6。(rgba和opacity兼容不到IE8，旧IE我不知道如何兼容，后来回去后查到是有IE专属的透明度的属性alpha)。&lt;/li&gt;
&lt;li&gt;弹出层的点击隐藏/显示事件，如果一开始不出现浮层的DOM应该怎么做？(回答的js生成浮层的DOM标签)。&lt;/li&gt;
&lt;li&gt;js闭包的定义，闭包的适用场景，了解多少说多少。&lt;/li&gt;
&lt;li&gt;js继承的概念，了解多少说多少。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;二轮：&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;hasOwnProperty是什么意思。(考察js继承)&lt;/li&gt;
&lt;li&gt;写一个函数，传入日期字符串，为一个出生日期，返回距离生日还有多少天。(思路说对了，写的时候很多date函数没有记住，写得有点乱)&lt;/li&gt;
&lt;li&gt;前端性能优化。(老问题了，从优化DOM操作、减少网络请求和压缩资源文件大小方面回答)&lt;/li&gt;
&lt;li&gt;浏览器输入一个地址到呈现页面发生了什么。(老问题了，DNS解析过程，TCPIP原理，HTTP协议与浏览器解析引擎处理html、css、js文件的顺序与页面生成布局与渲染)&lt;/li&gt;
&lt;li&gt;变量声明与提升(给了一段js问输出结果，写对了答案但是没解释清楚，其实就是变量声明与作用域的问题)。&lt;/li&gt;
&lt;li&gt;事件委托概念，手写事件委托。&lt;/li&gt;
&lt;li&gt;闭包的概念，手写一个闭包。&lt;/li&gt;
&lt;li&gt;H5的了解，canvas的了解。&lt;/li&gt;
&lt;li&gt;H5的动画如何做？&lt;/li&gt;
&lt;li&gt;文件上传做过吗？(File Api)&lt;/li&gt;
&lt;li&gt;CSS3的了解：&lt;/li&gt;
&lt;li&gt;animation的了解，写一个animation动画，一条线的钟摆效果。&lt;/li&gt;
&lt;li&gt;transform的属性(translate2D与3D平移，角度旋转，缩放)。&lt;/li&gt;
&lt;li&gt;transition渐变。&lt;/li&gt;
&lt;li&gt;实现一个tab标签切换的效果，每个标签页点击才发起ajax加载，缓存时间为10分钟，少于10分钟不重新加载，写一下。(说了思路，面试官要求写一下，写出来了)&lt;/li&gt;
&lt;li&gt;实现一个分页效果。(这里我说了思路，设置分页参数请求ajax，面试官说不对，类似于jquery的pager，我说那个我没用过，不清楚具体的需求)。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;网易前端面经&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;时间：2016年9月23日&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;地点：成都市金牛区&lt;/em&gt;&lt;/p&gt;
&lt;h3&gt;一轮：&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;H5移动适配的方式。(flexible)&lt;/li&gt;
&lt;li&gt;前端性能优化。&lt;/li&gt;
&lt;li&gt;Hybird开发原理，调用形式。&lt;/li&gt;
&lt;li&gt;雪碧图如何做移动适配。&lt;/li&gt;
&lt;li&gt;各种数据类型及其区别。&lt;/li&gt;
&lt;li&gt;正则匹配的惰性匹配，匹配的顺序。&lt;/li&gt;
&lt;li&gt;JS垃圾回收，引用计数的内存泄漏问题。&lt;/li&gt;
&lt;li&gt;remove DOM能不能回收。&lt;/li&gt;
&lt;li&gt;新框架的了解。&lt;/li&gt;
&lt;li&gt;React了解多少。(虚拟DOM优点，单向数据传递优点)。&lt;/li&gt;
&lt;li&gt;Node/Express的了解，use是做什么的。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;二轮：&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;实现一个函数，传入数组，起始位置和结束位置，将两个位置之间的数组项逆序，输出原数组。如何优化。&lt;/li&gt;
&lt;li&gt;做过哪些UI组件，如何定一个插件的API。&lt;/li&gt;
&lt;li&gt;jquery扩展插件的形式。&lt;/li&gt;
&lt;li&gt;jsonp跨域实现原理，怎样使用。&lt;/li&gt;
&lt;li&gt;DOM事件流。&lt;/li&gt;
&lt;li&gt;JS事件冒泡与事件委托，哪些事件不冒泡。&lt;/li&gt;
&lt;li&gt;给定一个字符串是一段js代码，如何执行这段代码。&lt;/li&gt;
&lt;li&gt;聊使用过的框架。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;后记&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;面试了很多场，见过很多面试官，自我感觉除了提高自己实力外，面试之前要捡一捡概念性的东西，平时用的少，但一定要记牢。&lt;/li&gt;
&lt;li&gt;面试还是有很多运气成分在里面，和面试官短则十几分钟，长不过一小时左右的时间，短时间内对我们能力、性格、发展等做出判断还是不容易的，如果和面试官聊得来，面试效果会非常好。除了实力过硬对答如流之外，良好的沟通交流能力也很重要，主动一些，介绍自己擅长的领域。面试时候展现出积极思考，善于思考的一面来。&lt;/li&gt;
&lt;li&gt;我也问了一些面试官，基本上评价应届生的标准都是，考察技术能力(在一定的学习时间内对某一领域知识掌握的广度和深度)和发展潜力(面对一些新问题的思维方式，能否当场灵活解决)，招聘进来的人不一定现在多么牛，要保证接下来的两三年以上的时间会很牛。至于数据结构、算法等知识，对于前端来说在实际项目中很少用，面试时问到这些知识点主要考察在校学习能力，接受逻辑思维的能力。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;总结一下面试常问的问题：&lt;/h2&gt;
&lt;h3&gt;布局：&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;盒模型(标准盒模型与IE盒模型)。&lt;/li&gt;
&lt;li&gt;选择器与选择器的优先级。&lt;/li&gt;
&lt;li&gt;CSS3新特性(border-radius,animation,transform,transition…)。&lt;/li&gt;
&lt;li&gt;两/三列布局，其中一列自适应宽度。&lt;/li&gt;
&lt;li&gt;元素的水平垂直居中。&lt;/li&gt;
&lt;li&gt;position/float的属性值的理解。&lt;/li&gt;
&lt;li&gt;块级元素与行内元素。&lt;/li&gt;
&lt;li&gt;img标签与background-image区别。&lt;/li&gt;
&lt;li&gt;html5新特性。&lt;/li&gt;
&lt;li&gt;页面重排重绘规则。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;JS：&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;数据类型及其区别。&lt;/li&gt;
&lt;li&gt;数组字符串方法。&lt;/li&gt;
&lt;li&gt;函数作用域与作用域链。&lt;/li&gt;
&lt;li&gt;闭包。&lt;/li&gt;
&lt;li&gt;继承。&lt;/li&gt;
&lt;li&gt;DOM事件流，事件委托。&lt;/li&gt;
&lt;li&gt;原生DOM操作。&lt;/li&gt;
&lt;li&gt;本地缓存cookie，sessionstorage，localstorage。&lt;/li&gt;
&lt;li&gt;ajax原生实现。&lt;/li&gt;
&lt;li&gt;jquery选择器，一部分方法。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;网络：&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;TCPIP原理。&lt;/li&gt;
&lt;li&gt;HTTP协议，协议头的属性了解多少。&lt;/li&gt;
&lt;li&gt;HTTP状态码。&lt;/li&gt;
&lt;li&gt;跨域同源策略。&lt;/li&gt;
&lt;li&gt;jsonp跨域原理。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;数据结构/算法：&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;排序算法，栈/队列操作。(我不太擅长这块，一般面试也很少问我这些)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;通用问题：&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;前端性能优化，浏览器输入网址到页面呈现的过程。(不要背书!不要背书!不要背书!最好结合自己的实际项目娓娓道来，不要给人死记硬背的感觉)。&lt;/li&gt;
&lt;li&gt;后端语言的掌握情况(Node/php/Java)&lt;/li&gt;
&lt;li&gt;遇见一个问题/bug如何解决？&lt;/li&gt;
&lt;li&gt;如何学习前端的？&lt;/li&gt;
&lt;li&gt;你还有什么问题问我吗？&lt;/li&gt;
&lt;/ul&gt;</content:encoded></item><item><title><![CDATA[页脚固定在浏览器底部的几种方式]]></title><description><![CDATA[页脚固定在浏览器底部很常见的效果，我们一般把页面备案信息、联系方式、友情链接等内容放在页面底部，同时我们希望页脚在页面内容(高度)比较短的时候固定在页面底部，在页面内容(高度)比较长的时候滚动到底部才能看到页脚。 下面介绍两种比较好的方式： 一、使用position…]]></description><link>https://dwb1994.github.io/blog/footer-fix/</link><guid isPermaLink="false">https://dwb1994.github.io/blog/footer-fix/</guid><pubDate>Sat, 16 Jul 2016 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;页脚固定在浏览器底部很常见的效果，我们一般把页面备案信息、联系方式、友情链接等内容放在页面底部，同时我们希望页脚在页面内容(高度)比较短的时候固定在页面底部，在页面内容(高度)比较长的时候滚动到底部才能看到页脚。&lt;/p&gt;
&lt;p&gt;下面介绍两种比较好的方式：&lt;/p&gt;
&lt;p&gt;一、使用position定位footer&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;html&quot;&gt;&lt;pre class=&quot;language-html&quot;&gt;&lt;code class=&quot;language-html&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;style&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token style&quot;&gt;&lt;span class=&quot;token language-css&quot;&gt;
&lt;span class=&quot;token selector&quot;&gt;html, body&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;token property&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 100%&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token selector&quot;&gt;.main&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;token property&quot;&gt;min-height&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 100%&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token property&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; auto &lt;span class=&quot;token important&quot;&gt;!important&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token property&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 100%&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token property&quot;&gt;margin-bottom&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; -4em&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token property&quot;&gt;background-color&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; #ddf&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token selector&quot;&gt;.footer, .push&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;token property&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 4em&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token selector&quot;&gt;.push&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;token property&quot;&gt;background-color&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; #cff&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token selector&quot;&gt;.footer&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;token property&quot;&gt;background-color&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; #cfd&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;style&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;

&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;div&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;main&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;div&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;text&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;p&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;正文&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;p&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;div&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;div&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;footer&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;footer&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;div&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;div&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;设置.text的padding-bottom防止窗口高度缩小时footer与 .text 部分重合。&lt;/p&gt;
&lt;p&gt;这里要注意一点，height:100%是相对于其父级元素高度的100%，很多时候我们设置height为100%实际上没达到预期的效果是因为其父级元素并不是100%的高度，因此这里我们要从.main往上，包括body、html都设置100%的高度。&lt;/p&gt;
&lt;p&gt;注意position的绝对与相对定位的使用，不要弄混。&lt;/p&gt;
&lt;p&gt;二、不使用position定位&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;html&quot;&gt;&lt;pre class=&quot;language-html&quot;&gt;&lt;code class=&quot;language-html&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;style&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token style&quot;&gt;&lt;span class=&quot;token language-css&quot;&gt;
&lt;span class=&quot;token selector&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token property&quot;&gt;margin&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 0&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token property&quot;&gt;padding&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 0&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token selector&quot;&gt;html, body&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token property&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 100%&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token selector&quot;&gt;.main&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token property&quot;&gt;min-height&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 100%&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token property&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; auto &lt;span class=&quot;token important&quot;&gt;!important&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token property&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 100%&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token property&quot;&gt;margin-bottom&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; -4em&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token property&quot;&gt;background-color&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; #ddf&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token selector&quot;&gt;.footer, .push&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token property&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 4em&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token selector&quot;&gt;.push&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token property&quot;&gt;background-color&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; #cff&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token selector&quot;&gt;.footer&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token property&quot;&gt;background-color&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; #cfd&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;style&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;

&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;div&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;main&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
  &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;p&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;正文&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;p&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
  &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;p&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;正文&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;p&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
  &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;p&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;正文&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;p&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
  &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;p&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;正文&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;p&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
  &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;p&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;正文&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;p&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
  &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;div&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;push&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;用一个.push元素把footer“挤”下去，以防止高度过小时，.main与footer重合。&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;div&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;div&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;div&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;footer&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;footer&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;div&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;设置负的margin-bottom值，为footer留下高度空间，然后用一个.push元素把footer“挤”下去，以防止高度过小时，.main与footer重合。&lt;/p&gt;
&lt;p&gt;注意这里的push元素虽然用得很巧妙，但是并无语义，最好做好代码注释以提高可维护性，也可以用伪元素取而代之。&lt;/p&gt;</content:encoded></item><item><title><![CDATA[几种截取部分 border 的方法]]></title><description><![CDATA[在最近项目的一个列表中有这样一个细节，设计稿就是上面这样的：↑ 这里的每行中间都会有一条1px的横线，有时候我们不希望横线填满100%的宽度，那么怎么做呢？ 一、每条横线单独写一个div，div的高度设置1px，宽度设置95%或者其他值 这样做好处是比较直观，坏处是会使HTML…]]></description><link>https://dwb1994.github.io/blog/border-cut/</link><guid isPermaLink="false">https://dwb1994.github.io/blog/border-cut/</guid><pubDate>Sat, 18 Jun 2016 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;在最近项目的一个列表中有这样一个细节，设计稿就是上面这样的：↑&lt;/p&gt;
&lt;p&gt;这里的每行中间都会有一条1px的横线，有时候我们不希望横线填满100%的宽度，那么怎么做呢？&lt;/p&gt;
&lt;h2&gt;一、每条横线单独写一个div，div的高度设置1px，宽度设置95%或者其他值&lt;/h2&gt;
&lt;p&gt;这样做好处是比较直观，坏处是会使HTML结构比较乱，不利于维护，对于seo来说这个div也没有语义。&lt;/p&gt;
&lt;h2&gt;二、给列表的父级元素设置padding-left的值&lt;/h2&gt;
&lt;p&gt;这样做少些了很多代码，只用一句就使所有列表项右移一段距离，然后每个列表项设置border-top或者border-bottom就可以实现这个效果。&lt;/p&gt;
&lt;p&gt;这样做的好处就是少些代码，代码逻辑清晰，也有不好的地方：&lt;/p&gt;
&lt;p&gt;1.列表里如果有内外边距，计算时要算到父级元素的padding-left，计算比较麻烦；&lt;/p&gt;
&lt;p&gt;2.如果列表项可以展开，可能出现下面这样的情况：
&lt;img src=&quot;/img/others/%E6%90%9C%E7%8B%97%E6%88%AA%E5%9B%BE16%E5%B9%B406%E6%9C%8818%E6%97%A51949_3.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;左侧会空出 一部分空间，这时我们可以用负的margin-left值来移动下面灰色的展开项，使其对其到屏幕左侧。&lt;/p&gt;
&lt;p&gt;3.列表项的DOM元素会丢失一部分，也就是左侧的内边距，比如列表项有点击事件监听的话，点击左侧区域是无效的：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/img/others/%E6%90%9C%E7%8B%97%E6%88%AA%E5%9B%BE16%E5%B9%B406%E6%9C%8818%E6%97%A51951_4.png&quot;&gt;&lt;/p&gt;
&lt;h2&gt;三、使用伪元素选择器&lt;/h2&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;css&quot;&gt;&lt;pre class=&quot;language-css&quot;&gt;&lt;code class=&quot;language-css&quot;&gt;&lt;span class=&quot;token selector&quot;&gt;.item:after&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token property&quot;&gt;content&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token property&quot;&gt;position&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; absolute&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token property&quot;&gt;top&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; -1px&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token property&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 0&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token property&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 1px&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token property&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 30px&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token property&quot;&gt;background-color&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; #FFFFFF&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;在item前面(:before)或者后面(:after)添加一个伪div元素，实际这个元素不占据DOM结构，把这个元素绝对定位到border上面，覆盖掉一部分border。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/img/others/%E6%90%9C%E7%8B%97%E6%88%AA%E5%9B%BE16%E5%B9%B406%E6%9C%8818%E6%97%A52003_5.png&quot;&gt;&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Scroll 事件及页面渲染优化]]></title><description><![CDATA[一、前言 首先感谢实习的导师 浩威兄 和这篇文章：【前端性能】高性能滚动 scroll 及页面渲染优化 最近在实习的时候做了一个滚动加载文章列表的Demo，一开始感觉很简单，后来越做问题越多，其中最关键的就是scroll事件的优化，在优化过程中也强化了自己对于闭包、this…]]></description><link>https://dwb1994.github.io/blog/scroll-optimize/</link><guid isPermaLink="false">https://dwb1994.github.io/blog/scroll-optimize/</guid><pubDate>Fri, 10 Jun 2016 00:00:00 GMT</pubDate><content:encoded>&lt;h2&gt;一、前言&lt;/h2&gt;
&lt;p&gt;首先感谢实习的导师 浩威兄 和这篇文章：&lt;a href=&quot;http://www.cnblogs.com/coco1s/archive/2016/05/17/5499469.html&quot;&gt;【前端性能】高性能滚动 scroll 及页面渲染优化&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;最近在实习的时候做了一个滚动加载文章列表的Demo，一开始感觉很简单，后来越做问题越多，其中最关键的就是scroll事件的优化，在优化过程中也强化了自己对于闭包、this、函数参数的理解，在此记录一下。&lt;/p&gt;
&lt;p&gt;这个文章列表分为若干页，一开始加载第一页，列表有一些文章，向下滚动到尽头的时候判断scrollTop的值，进行一系列的比较，如果确实滚动到底部则再次发起ajax请求加载下一页。滚动到最后一页的时候不再判断，并且滚动加载的文字变为“无更多文章”。这里面前面的判断逻辑比较容易实现，滚动时候进行判断会出现一个效率的问题：页面滚动事件触发的频率非常高，每一次被触发都会执行一次判断，这个判断会获取DOM节点、节点高度，并且会进行判断，然后重新渲染页面，这样高的频率有可能会让页面的滚动动画变得很卡。（scroll和resize事件都会被高频率触发，resize甚至在最大化与最小化的时候也会被触发）&lt;/p&gt;
&lt;h2&gt;二、解决方案&lt;/h2&gt;
&lt;p&gt;经过指点，我使用了两种比较主要的方式来进行优化，第一种是“防抖技术”，利用setTimeout()的延时执行来减少滚动时实际触发的判断函数的执行次数。每一次滚动的时候首先清除计时器，然后再设置计时器，由于计时器的延时要大于scroll事件的触发频率，因此在滚动的时候并不会触发延时后执行的函数func，只在滚动后500ms执行，如果下一次滚动和上一次滚动的时间间隔小于500ms也不会触发，简言之就是500ms内没有连续触发两次 scroll 事件即可执行函数 func。代码如下：&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// 简单的防抖动函数&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;debounce&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;func&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; wait&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token comment&quot;&gt;// 定时器变量&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; timeout&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token comment&quot;&gt;// 每次触发 scroll handler 时先清除定时器&lt;/span&gt;
        &lt;span class=&quot;token function&quot;&gt;clearTimeout&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;timeout&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token comment&quot;&gt;// 指定 xx ms 后触发真正想进行的操作 handler&lt;/span&gt;
        timeout &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;setTimeout&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;func&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; wait&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;// 实际想绑定在 scroll 事件上的 handler&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;realFunc&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;Success&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;// 采用了防抖动&lt;/span&gt;
window&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;addEventListener&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;scroll&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;debounce&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;realFunc&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;500&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这样做在滚动的时候不会执行判断函数，因此效率较高，但会存在一个使用逻辑的问题：如果用户滚动到底部在500ms内再滚回上面，则判断结果并不是页面底部，也就不会加载后面页面的内容。&lt;/p&gt;
&lt;p&gt;为了解决这个问题，我们还要进一步完善JS的代码，这里用到了第二种方式优化scroll事件：“节流函数”，滚动之前获取一个时间戳，滚动时候持续获取当前时间戳，计算时间戳的差值，如果差值大于100ms则执行一次判断函数，在滚动结束时执行计时器。简言之就是在滚动的过程中每100ms执行一次判断函数。&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// 简单的节流函数&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;throttle&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;func&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; wait&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; mustRun&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; timeout&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    startTime &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Date&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; context &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
        args &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; arguments&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
        curTime &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Date&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

        &lt;span class=&quot;token function&quot;&gt;clearTimeout&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;timeout&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token comment&quot;&gt;// 如果达到了规定的触发时间间隔，触发 handler&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;curTime &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt; startTime &lt;span class=&quot;token operator&quot;&gt;&gt;=&lt;/span&gt; mustRun&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;token function&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;apply&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;context&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;args&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
            startTime &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; curTime&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;token comment&quot;&gt;// 没达到触发间隔，重新设定定时器&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
            timeout &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;setTimeout&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;apply&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;that&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;args&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;wait&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;token comment&quot;&gt;//注意这里原文作者应该是写错了，这里计时器返回的函数也应该绑定this和arguments&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;// 实际想绑定在 scroll 事件上的 handler&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;realFunc&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;Success&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;// 采用了节流函数&lt;/span&gt;
window&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;addEventListener&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;scroll&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;throttle&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;realFunc&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;500&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这样做变相地减少了滚动事件的执行频率，经过简单的控制台测试，滚动事件执行的频率最快可达到10ms每次，我们可以把这个频率减少到100ms每次。这样做也会有个问题，由于100ms执行一次判断函数，如果用户停留在页面底部的时间达不到100ms，则有一定几率不会执行判断函数。&lt;/p&gt;
&lt;p&gt;我的解决方案是在判断页面是否到达底部的时候减少一定的高度数值，由于页面底部会出现一个提示文字“正在加载”，这个模块的高度即是我设置的缓冲高度数值。比如页面高度是1000px，视口高度是900px，“正在加载”模块高度为20px，则正常判断到底部应该是scrollTop值为900，我在判断的时候可以将900改为880，这样做当用户滚动到页面底部的时候有一定几率看不到“正在加载”模块，这也符合我们滚动加载的初衷：最好让用户看不到加载的文字，会给用户一种“页面渲染很快”的感觉。用户也有一定几率看得到“正在加载”模块，这个概率出现时间就在0~100ms之间。这样做也会有问题：如果用户在100ms内从“正在加载”模块出现到反向向上滚动出20px的范围，则有一定几率不会触发判断函数，但是这种情况出现的频率会非常小，我设置的20px的“缓冲高度”可以大大提高判断函数所应被正确执行的频率。&lt;/p&gt;
&lt;p&gt;至此我对于scroll事件的优化结束，其实还有一些其他的优化，有兴趣的朋友可以看一下我在文章开头发的文章链接。&lt;/p&gt;
&lt;p&gt;下面我要说一下防抖函数和节流函数本身的问题：&lt;/p&gt;
&lt;h2&gt;三、语法细节&lt;/h2&gt;
&lt;h3&gt;1.闭包问题&lt;/h3&gt;
&lt;p&gt;这两个函数都用到了javascript的闭包，闭包是个比较难理解的概念，一开始我的理解也有偏差，正确的理解应该是：闭包存在两个条件：一个函数可以访问另一个函数作用域链中的变量；这个函数应该被return抛出并在其他地方被调用。如果闭包不被调用，那么在其他地方无法访问我们希望访问的函数的作用域链中的变量，则闭包的意义也就不存在了。&lt;/p&gt;
&lt;p&gt;在编写节流函数的时候，在函数内部可以不用闭包编写，当我把节流函数提取成模块(commonJS规范)的时候就发现怎么写都无法实现功能，由于在不使用模块形式的时候我可以在外面初始化每次滚动的起始时间戳（用于在判断函数内部取差值），但是提取成模块后不可以在模块外部初始化每次滚动的起始时间戳，而我把初始化计时器的操作写在模块内部的时候，每次scroll事件触发的时候重新初始化起始时间戳无法进一步比较，则无法触发节流函数。&lt;/p&gt;
&lt;p&gt;因此我们必须使用闭包的形式来实现这个功能，也就是说我们希望访问一个初始值，在scroll事件触发的时候不断用新的时间戳来对比这个初始值，唯一能实现的就是闭包的形式了：访问我们希望访问的函数的作用域链中的变量。由于传入scroll事件的函数被闭包return成另一个函数，但是仍然可以访问被return的闭包能够访问的另一个函数作用域链的变量（初始化的时间戳），而且只在每次滚动时初始化，再次触发scroll事件的时候不会再次初始化了，因为被返回后的函数并不会初始化时间戳。这就是我们在这里使用闭包的好处。&lt;/p&gt;
&lt;h3&gt;2.this指针和参数问题&lt;/h3&gt;
&lt;p&gt;在防抖和节流函数内部我们看到了这样一个做法：&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; context &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; args &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; arguments&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;将this和参数传入要执行的函数里，通过apply方法调用：&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token function&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;apply&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;context&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;args&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;一开始我很不理解这样做的意义，后来仔细翻书终于搞懂原理：&lt;/p&gt;
&lt;p&gt;函数被调用的时候会传进一个执行环境及相应的作用域链，当函数作为某个对象的方法调用时，this等于那个对象。由于匿名函数的执行环境具有全局性，因此其this通常指向window。但有时候不是window，这时需要我们手动绑定其上下文环境也就是this 的值和相应的参数。&lt;/p&gt;
&lt;p&gt;在本例中防抖和节流函数的首个参数是一个我们实际执行的函数（realFunc）也就是本例中的判断函数，这个函数由于与我们的业务逻辑紧密相联（获取实际DOM节点并执行判断）因此不能被放入到模块中。模块和判断函数的上下文不同，其this和arguments也可能不同：&lt;/p&gt;
&lt;p&gt;比如本例中闭包的this指向的是scroll事件的event.target也就是window，判断函数在全局中被声明，this也指向window。但是如果是非window的元素触发事件调用防抖和节流函数，则this会不同（闭包的this指向event.target是HTML的某个标签，或者是一个javascript对象，而闭包参数是event或者是人为设置的参数），下面的例子是传入this和arguments的情况，outer作为obj对象的方法调用，则this指向obj：&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; obj &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token function&quot;&gt;outer&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;realFunc&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;obj&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;outer&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;func&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;another&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; that &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; arg &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; arguments&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token function&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;apply&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;arguments&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;that&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;                   &lt;span class=&quot;token comment&quot;&gt;// Object&lt;/span&gt;
        console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;arguments&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;       &lt;span class=&quot;token comment&quot;&gt;// [1,3]&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;realFunc&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;value1&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;value2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;                   &lt;span class=&quot;token comment&quot;&gt;// Object&lt;/span&gt;
    console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;value1&lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt;value2&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;       &lt;span class=&quot;token comment&quot;&gt;// 4&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;我们稍微改下闭包返回的函数，这次不传入this和arguments，则闭包的this指向Obj而判断函数realFunc的this指向window&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; obj &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;name&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;dwb&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token function&quot;&gt;outer&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;realFunc&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;obj&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;outer&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;func&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;another&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token comment&quot;&gt;// var that = this;&lt;/span&gt;
        &lt;span class=&quot;token comment&quot;&gt;// var arg = arguments;&lt;/span&gt;
        &lt;span class=&quot;token comment&quot;&gt;// func.apply(this,arguments);&lt;/span&gt;
        &lt;span class=&quot;token function&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// Object&lt;/span&gt;
        console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;arguments&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// [1,3]&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;realFunc&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;value1&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;value2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// Window&lt;/span&gt;
    console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;value1&lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt;value2&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// NaN&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;所以我们设置this和arguments是为了让我们真正希望执行的函数realFunc和我们scroll事件触发的函数上下文一致。在本例中传入的this值指向event.target也就是触发EventListener的那个HTML元素，arguments为event，也就是DOM元素的event对象，在实际执行的函数realFunc()中我们可以通过event获取事件的详细信息，比如event.type=”scroll”等等。&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Bootstrap 表单界面美化]]></title><description><![CDATA[前些日子给别人做了一个单页面，页面内部只有一个表单。
Bootstrap框架本身有一套比较基础的样式，如果不加修饰的话看起来会比较朴素，如下图:  可以看到Bootstrap对HTML…]]></description><link>https://dwb1994.github.io/blog/bootstrap-design/</link><guid isPermaLink="false">https://dwb1994.github.io/blog/bootstrap-design/</guid><pubDate>Fri, 13 May 2016 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;前些日子给别人做了一个单页面，页面内部只有一个表单。
Bootstrap框架本身有一套比较基础的样式，如果不加修饰的话看起来会比较朴素，如下图:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/img/others/%E6%90%9C%E7%8B%97%E6%88%AA%E5%9B%BE16%E5%B9%B405%E6%9C%8813%E6%97%A52115_7.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;可以看到Bootstrap对HTML基础的标签进行了一定的美化，但是仍达不到我们的期望，如果想制作得更精致的话需要进一步的美化。&lt;/p&gt;
&lt;p&gt;这里提一句，正常的软件开发流程应该先根据需求分析做出低保真原型及高保真原型，然后做UI设计图后制作页面。&lt;/p&gt;
&lt;p&gt;但是我做页面的个人习惯是先打腹稿，然后直接编码（HTML&amp;#x26;CSS），由于我有少许美术基础，所以一般省略之前的环节直接做页面以节省时间，并不可取。&lt;/p&gt;
&lt;p&gt;做好后的页面是这样的：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/img/others/%E6%90%9C%E7%8B%97%E6%88%AA%E5%9B%BE16%E5%B9%B405%E6%9C%8813%E6%97%A52102_5.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;这个表单基于Bootstrap样式，Bootstrap的组件样式比较圆润，普遍是圆角组件，色彩较浅，一般我在美化的时候会把圆角改为直角，其实直角和圆角各有千秋，但是在内行眼里一眼就会看出这是基于Bootstrap的页面，如果这时发现组件全部改为直角，则会给他们一种用心设计的感觉。&lt;/p&gt;
&lt;p&gt;其次尽量不要用Bootstrap原有的几种颜色，应该有自己的定制化设计，如果自己实在对色彩无感，这里我推荐&lt;a href=&quot;http://www.bootcss.com/p/flat-ui/&quot;&gt;FLat UI&lt;/a&gt;的几套配色。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/img/others/%E6%90%9C%E7%8B%97%E6%88%AA%E5%9B%BE16%E5%B9%B405%E6%9C%8813%E6%97%A52143_8.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;同一种颜色要有深浅两种基本形式，用以体现不同的使用逻辑或者阴影设计。同一个页面建议不要超过三种色调，否则颜色太繁多给人一种眼花缭乱的感觉。由于页面有基色，一般为白色，因此页面元素有两种颜色足矣。&lt;/p&gt;
&lt;p&gt;在本例中由于用户需求那边给我了一套成品页面，只需要我在此基础上添加一页表单，因此我用了他们的主色调橙红色。修改了部分组件的圆角值、字体颜色、外发光等样式，下面我详细解析一下：&lt;/p&gt;
&lt;h3&gt;1.结构层次与阴影&lt;/h3&gt;
&lt;p&gt;本页面只有三层，或者说两层半，底层是一个背景图像，铺满整个屏幕；上层是一个半透明的白色矩形；在矩形的表面上有一些控件和文字，这些控件和文字一开始是纯扁平化设计的样式，没有阴影，但是当输入框获得焦点的时候会有一个阴影（box-shadow），阴影产生后获取焦点的控件会给人一种 “我浮到半空中了”的感觉，增强交互体验。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/img/others/%E6%90%9C%E7%8B%97%E6%88%AA%E5%9B%BE16%E5%B9%B405%E6%9C%8813%E6%97%A52153_9.png&quot;&gt;&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;css&quot;&gt;&lt;pre class=&quot;language-css&quot;&gt;&lt;code class=&quot;language-css&quot;&gt;&lt;span class=&quot;token selector&quot;&gt;.main .form-control&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token property&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; #FFFFFF&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token property&quot;&gt;border&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 0&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token property&quot;&gt;border-radius&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 0&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token property&quot;&gt;background-color&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;rgba&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;256&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 256&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 256&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 0.2&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token property&quot;&gt;box-shadow&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 0 0 4px &lt;span class=&quot;token function&quot;&gt;rgba&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;240&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 95&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 64&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 0&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token property&quot;&gt;transition&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; all 0.3s ease-in-out&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token property&quot;&gt;-moz-transition&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; all 0.3s ease-in-out&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token comment&quot;&gt;/* Firefox 4 */&lt;/span&gt;
    &lt;span class=&quot;token property&quot;&gt;-webkit-transition&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; all 0.3s ease-in-out&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token comment&quot;&gt;/* Safari and Chrome */&lt;/span&gt;
    &lt;span class=&quot;token property&quot;&gt;-o-transition&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; all 0.3s ease-in-out&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token selector&quot;&gt;.main .form-control:focus&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token property&quot;&gt;box-shadow&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 0 0 4px &lt;span class=&quot;token function&quot;&gt;rgba&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;240&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 95&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 64&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 0.8&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;background-color属性可以定义rgba，前三个值是RGB，第四个值是透明度，可以制作半透明效果，兼容到IE8，IE67需要降级处理，但是由于使用Bootstrap3，本身IE67已经被忽视了所以放心使用。&lt;/p&gt;
&lt;p&gt;注意这里我不仅仅是用了box-shadow，还是用了CSS3的transition渐变效果，这样做在获取焦点的时候，阴影是在0.3秒时间内渐渐显示出来的，交互体验要优于唐突地瞬间显示出阴影。&lt;/p&gt;
&lt;h3&gt;2.设置表单颜色值&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;/img/others/%E6%90%9C%E7%8B%97%E6%88%AA%E5%9B%BE16%E5%B9%B405%E6%9C%8813%E6%97%A52153_9.png&quot;&gt;
还是这张图，前面以内联元素的形式嵌入Bootstrap包含的Glyphicons 字体图标，这里注意项目目录要包含fonts文件夹，否则图标不会显示出来。设置图标颜色不在话下。&lt;/p&gt;
&lt;p&gt;然后input标签内部一般会有一个提示性的文字，这个文字我们一般希望他不可编辑，编辑文本时候它消失，清空时又显示出来（如果在input标签内部设置value属性值也可以显示提示文字，但是需要手动删除才能继续编辑），因此这里用到HTML 5 &lt;input&gt;标签的 placeholder 属性，注意只有支持HTML5的时候才有用。相关样式设置如下：&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;css&quot;&gt;&lt;pre class=&quot;language-css&quot;&gt;&lt;code class=&quot;language-css&quot;&gt;&lt;span class=&quot;token selector&quot;&gt;.form-control::-webkit-input-placeholder&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token comment&quot;&gt;/* WebKit browsers */&lt;/span&gt;
    &lt;span class=&quot;token property&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; #EEEEEE&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token selector&quot;&gt;.form-control:-moz-placeholder&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token comment&quot;&gt;/* Mozilla Firefox 4 to 18 */&lt;/span&gt;
    &lt;span class=&quot;token property&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; #EEEEEE&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token selector&quot;&gt;.form-control::-moz-placeholder&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token comment&quot;&gt;/* Mozilla Firefox 19+ */&lt;/span&gt;
    &lt;span class=&quot;token property&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; #EEEEEE&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token selector&quot;&gt;.form-control:-ms-input-placeholder&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token comment&quot;&gt;/* Internet Explorer 10+ */&lt;/span&gt;
    &lt;span class=&quot;token property&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; #EEEEEE&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;嗯，由于HTML5的兼容性，要做特殊强调以调用不同浏览器的渲染引擎。这里面即可设置提示文本的一些样式，chrome里提示文本默认为灰色，深色背景下看不清，因此我将它改为白色。&lt;/p&gt;
&lt;p&gt;其实也可以使用javascript来做这个提示文本，可以做出更炫的效果，但是那样会比较麻烦，网上有很多案例，搜索“表单美化”即可查阅。&lt;/p&gt;
&lt;h3&gt;3.textarea优化&lt;/h3&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;css&quot;&gt;&lt;pre class=&quot;language-css&quot;&gt;&lt;code class=&quot;language-css&quot;&gt;&lt;span class=&quot;token selector&quot;&gt;.msg-more textarea&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token property&quot;&gt;resize&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; none&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;懒，只写了一句，不允许右下角的小三角拉伸宽高，然后限制字数那块交给后端去做了，实际上前端可以使用javascript限制内容高度或者字节数并加以提示。&lt;/p&gt;
&lt;h3&gt;4.模态框优化&lt;/h3&gt;
&lt;p&gt;Bootstrap3有一个javascript插件叫模态框。&lt;/p&gt;
&lt;p&gt;不要忽略模态框样式的优化，要尽可能保持页面风格统一。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/img/others/QQ%E6%88%AA%E5%9B%BE20160513221925.jpg&quot;&gt;&lt;/p&gt;
&lt;p&gt;我这里就是基本的细节：&lt;/p&gt;
&lt;p&gt;a.注意圆角直角问题&lt;/p&gt;
&lt;p&gt;b.注意标题字号和内容字号一定要加以区别&lt;/p&gt;
&lt;p&gt;c.设置隔断以增强这个简单提示的内容逻辑性&lt;/p&gt;
&lt;p&gt;d.在前端使用javascript给用户一个5秒钟的机会回到表单页面而不是网站首页&lt;/p&gt;
&lt;p&gt;javascript代码如下：&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token function&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;.btn-default&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;click&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token function&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;.timer&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;html&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;5&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; i &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; t &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;setInterval&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        i&lt;span class=&quot;token operator&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token function&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;.timer&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;html&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;i&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;i &lt;span class=&quot;token operator&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
            window&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;index.html#about&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;_self&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1000&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token function&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;.clear&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;click&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token function&quot;&gt;clearInterval&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;t&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;逻辑很简单，初始化倒计时文本为“5”，然后设一个计时器t，每1000毫秒执行函数，减少i的值。&lt;/p&gt;
&lt;p&gt;i值为零的时候跳转到首页。&lt;/p&gt;
&lt;p&gt;如果在这5秒钟时间里点击关闭或者取消按钮，则清除计时器。&lt;/p&gt;
&lt;h3&gt;5.其他优化&lt;/h3&gt;
&lt;p&gt;除了本例中使用的表单组件，还有一些组件没有用到，比如单选/复选按钮、下拉复选框、滚动条、上传文件等等组件，如果以后我用到相应的美化将会更新在这篇日志里。&lt;/p&gt;
&lt;p&gt;HTML5对input标签的type属性有了一些优化，新增了一些type属性，本例中我也使用了一部分：&lt;/p&gt;
&lt;p&gt;邮箱的type值为email，电话的type值为tel，这些标签可能在web页面中显示的不明显，但是在移动设备上有的系统会有相应的优化，比如type属性值为emal的时候键盘自动转为英文键盘，在type属性值为tel的时候键盘自动转为数字键。&lt;/p&gt;
&lt;p&gt;最后附上本例的页面链接吧：&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;&quot;&gt;西大助手帮助信息页&lt;/a&gt;&lt;/p&gt;</content:encoded></item><item><title><![CDATA[光影与 WEB 界面设计]]></title><description><![CDATA[前言-情怀 首先感谢《CSS禅意花园》这本书。看书的过程也许唤起了我许多年前对于艺术设计的一些追求，让我c想起了五六岁时就热爱的绘画，想起了小时候挂满墙壁的作品，想起了学习四年的素描画与水粉画的经历。多年以后偶然回想起最初的梦想，早已烟消云散，只得莞尔而笑。 书中的CSS…]]></description><link>https://dwb1994.github.io/blog/light-shadow-web-design/</link><guid isPermaLink="false">https://dwb1994.github.io/blog/light-shadow-web-design/</guid><pubDate>Sat, 07 May 2016 00:00:00 GMT</pubDate><content:encoded>&lt;h2&gt;前言-情怀&lt;/h2&gt;
&lt;p&gt;首先感谢《CSS禅意花园》这本书。看书的过程也许唤起了我许多年前对于艺术设计的一些追求，让我c想起了五六岁时就热爱的绘画，想起了小时候挂满墙壁的作品，想起了学习四年的素描画与水粉画的经历。多年以后偶然回想起最初的梦想，早已烟消云散，只得莞尔而笑。&lt;/p&gt;
&lt;p&gt;书中的CSS布局方案固然巧妙，还有一些页面的界面设计巧夺天工，好几次看得我心潮澎湃，竟不自觉鼓起掌来。尤其推荐其中&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;http://www.csszengarden.com/026/&quot;&gt;Zunflower&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;http://www.csszengarden.com/028/&quot;&gt;Atlantis&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;两篇。虽然这个网站一些设计有些过时(分辨率比较低，使用绝对单位长度，大屏幕看会不习惯)，但是它们的设计思想都是很巧妙的，各有可取之处。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/img/others/s2406764.jpg&quot;&gt;&lt;/p&gt;
&lt;p&gt;本文只从光影角度思考web界面设计，那么光影是什么呢？光线与阴影。&lt;/p&gt;
&lt;p&gt;我所过很多较差的web界面可以用胡乱拼凑来形容，另有些尽管有一定的设计因素在里面，但缺乏专业的思考。高中艺考必考素描和色彩，这两项对于艺术设计来说就是最基本的知识，前者培养结构、光线和透视，后者培养色彩的感知。如果一个美术作品中光影自相矛盾，或者层次混乱，那么我们可以说这是不好的作品，并没有继续评价优劣的资格，如果连常识都不懂的人非要说这是超现实抽象的作品，我觉得是不恰当的。&lt;/p&gt;
&lt;p&gt;做web设计应该有追求，有思考，有核心的创作理念，不要得过且过。追求整个作品风格的统一、色调的和谐、层次的清晰。在整个设计过程中基于创作理念持续思考这些问题，在给用户解释的时候要有理有据地一一陈列出来以说服用户。要从用户角度进行创作，不要把自己当成主要用户，自己想当然地觉得怎么好就怎么做。我们所做的作品可能是几十人甚至成千上万人要用的，不能太随意。应该有种极客的精神追求作品的完美。&lt;/p&gt;
&lt;p&gt;大部分用户无法从专业角度赏析艺术作品，所以web界面设计做得好于不好很多时候是细节问题，细节体现了一种认真的态度和对用户的尊重。屏幕相对于纸质品来说已经很宽容了，像素级为单位，72dpi，有限的色彩数。因此细节处于可控制的状态，共勉！&lt;/p&gt;
&lt;h2&gt;光影与拟物化&lt;/h2&gt;
&lt;p&gt;素描作为美术专业的基础课，其非常适合培养人们对光影和结构的感知能力。&lt;/p&gt;
&lt;p&gt;当今扁平化设计理念大行其道，绝大多数作品都是邯郸学步，根本没学到扁平化设计的精髓。现在的扁平化设计与前两年的纯扁平化已经不同了，从之前的纯扁平到现在配以阴影效果增强层次感（Android 5.0起的UI设计已优化了之前的纯扁平）。&lt;/p&gt;
&lt;p&gt;对于Web界面设计，光影首先要保持基本的方向统一性。整个页面的光线一般是从一个方向照射过来，要注意这个方向不一定和网页平面平行，也就是说这个光源照射方向将会影响页面内所有元素的投影。如果页面中有拟物化的图标图片等元素，这些拟物化的图形阴影应当符合正常的自然规律，即顺应光源方向。如果在页面中混入了个别扁平化的按钮，其阴影方向与其他元素不一致，将会非常难看。&lt;/p&gt;
&lt;p&gt;其次要注意阴影范围和颜色深度的影响。利用阴影可以按时遮挡物的大小，或者遮挡物距离页面表面的距离：即遮挡物距离页面越远，阴影范围越大而颜色越浅；遮挡物本身越大，阴影范围越大而阴影相距物体更远位置的边缘越模糊。&lt;/p&gt;
&lt;p&gt;以上两点为最基本的符合自然规律的常识，我觉得如果做不到的话是最基本的逻辑错误，将会引导用户进一步使用的逻辑混乱。&lt;/p&gt;
&lt;h2&gt;光影与层次感&lt;/h2&gt;
&lt;p&gt;上一段提到，由光影所直接影响的层次感也是很重要的。&lt;/p&gt;
&lt;p&gt;web页面一般是在平面上展示(如果响应式适配到曲面屏另说)，但是在平面上也可以展现出多种层次，从而让平面变得立体，或者更有意境。无论是中国的山水画，还是西方的透视原理，都是以平面为载体使观看者产生空间感，那么可想而知层次在页面中就有多种多样的形式来产生。&lt;/p&gt;
&lt;p&gt;其一可以使用扁平化模块配合阴影形式体现，这种形式给用户一种“模块漂浮在页面上层”的感觉，如果多个模块重叠，则层次数目随之增加。这里要尤其注意上一段中我所提到的阴影方向、范围、颜色深度要符合自然规律的问题。这种方式塑造的层次感主要是为了区别不同板块的重要性，从而优化用户的使用逻辑(例如某些板块的折叠与展开)。&lt;/p&gt;
&lt;p&gt;其二可以使用整块的图形图像放置在页面上，这里的图像即和美术作品的作用一直，是为了让平面变得立体或者更有意境，从而引发作者的一些思考，或者单纯为了使页面赏心悦目。这种方式塑造的层次感要注意的是立体感强烈的图像与外围其他元素的关系，如果整个页面都是扁平化设计，中间忽然多了一张立体的放射性构图的风景图，则会显得格格不入，要尽量保持图像与页面其他元素风格和所表达含义的统一。&lt;/p&gt;
&lt;h2&gt;光影与情感暗示&lt;/h2&gt;
&lt;p&gt;光影配合色彩所共同营造一种情感气氛，对于页面的用户来说会受到这种气氛的影响。&lt;/p&gt;
&lt;p&gt;处于光影的明处与暗处的内容可以不尽相同，不同性格的人会更加注意明处或者暗处的内容，因此可以区别对待。&lt;/p&gt;
&lt;h2&gt;使用光影的问题&lt;/h2&gt;
&lt;p&gt;虽然光影对于WEB界面设计起到很好的辅助作用，但是他也存在很多问题：&lt;/p&gt;
&lt;p&gt;1.出错率高，由于做WEB界面设计的人很多并没有收过专业的美术培训，因此仅凭个人的感觉来制作页面非常容易与自然规律相乖离。&lt;/p&gt;
&lt;p&gt;2.不好掌控与页面中其他元素风格的统一性。比如在相对扁平化设计的页面中使用光影很可能风格混乱。&lt;/p&gt;
&lt;p&gt;3.对于老版本浏览器兼容性存在一定问题，使用css3或者一些插件可以制作一些很酷炫的光影作品，但是对于老版本浏览器显示极易出现问题，甚至无法显示。&lt;/p&gt;
&lt;p&gt;4.对于现实效果不好的介质（强光照射下的屏幕、亮度值调整得不正常的显示屏）或者用户本身视觉存在生理问题的时候，光影很有可能不被用户所察觉，甚至南辕北辙。&lt;/p&gt;
&lt;p&gt;慎用！慎用！慎用！&lt;/p&gt;</content:encoded></item><item><title><![CDATA[2016 年网易、腾讯春招前端面经]]></title><description><![CDATA[网易前端面经 时间：2016年4月12日
地点：杭州市滨江区网商路599号 网易(杭州)网络有限公司 一轮： 谈项目经历，项目中学习到的经验。 做项目时候合作会出现的问题。 项目中如何做响应式布局设计？ 如何用javascript根据dpr确定移动端基准rem…]]></description><link>https://dwb1994.github.io/blog/spring-interview/</link><guid isPermaLink="false">https://dwb1994.github.io/blog/spring-interview/</guid><pubDate>Thu, 28 Apr 2016 00:00:00 GMT</pubDate><content:encoded>&lt;h2&gt;网易前端面经&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;时间：2016年4月12日&lt;/em&gt;
&lt;em&gt;地点：杭州市滨江区网商路599号 网易(杭州)网络有限公司&lt;/em&gt;&lt;/p&gt;
&lt;h3&gt;一轮：&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;谈项目经历，项目中学习到的经验。&lt;/li&gt;
&lt;li&gt;做项目时候合作会出现的问题。&lt;/li&gt;
&lt;li&gt;项目中如何做响应式布局设计？&lt;/li&gt;
&lt;li&gt;如何用javascript根据dpr确定移动端基准rem的值？&lt;/li&gt;
&lt;li&gt;三栏布局，左右定宽，中间自适应，如何实现？&lt;/li&gt;
&lt;li&gt;定宽定高的div如何水平垂直居中？&lt;/li&gt;
&lt;li&gt;不定宽不定高的div如何水平垂直居中？&lt;/li&gt;
&lt;li&gt;都做过哪些js插件？&lt;/li&gt;
&lt;li&gt;轮播图怎么实现？左右切换图片如何做到？图片布局时使用position哪种属性，如何优化能让切换画面更流畅，如何优化能提高访问速度。&lt;/li&gt;
&lt;li&gt;返回顶部按钮定位应用position如何定位到右下角(跟随正文右侧)？&lt;/li&gt;
&lt;li&gt;返回顶部效果如何实现？用到哪些函数？如何优化？&lt;/li&gt;
&lt;li&gt;谈职业生涯计划。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;二轮：&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;谈项目经历。&lt;/li&gt;
&lt;li&gt;css3用过没，css3实现div逐渐从100px高度增加到500px用的哪个属性？&lt;/li&gt;
&lt;li&gt;HTML5内置缓存用过吗？&lt;/li&gt;
&lt;li&gt;jquery扩展插件的方法。&lt;/li&gt;
&lt;li&gt;javascript轮播图水平切换图片如何实现？position值如何定义？&lt;/li&gt;
&lt;li&gt;两栏布局，一栏自适应如何实现？(我使用的双飞翼布局方式，后来问不使用双飞翼负margin值的话，用position定位如何实现？)&lt;/li&gt;
&lt;li&gt;javascript作用域是怎样的？&lt;/li&gt;
&lt;li&gt;javascript继承如何实现？如果父类有name属性，子类继承父类，查询name属性值的查找过程。&lt;/li&gt;
&lt;li&gt;用没用过javascript断点debug？&lt;/li&gt;
&lt;li&gt;javascript原生实现ajax的方式。&lt;/li&gt;
&lt;li&gt;都用过哪些框架？&lt;/li&gt;
&lt;li&gt;React如何查找到子标签？&lt;/li&gt;
&lt;li&gt;谈不足，谈UI和Photoshop使用。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;三轮：&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;谈项目经验，选择所学习技术的过程。&lt;/li&gt;
&lt;li&gt;谈目前所投递的公司情况，职业规划，毕业期望去的城市。&lt;/li&gt;
&lt;li&gt;谈对网易的了解，对网易产品的了解，用过哪些网易的产品，最了解哪个？这个产品有哪些优点和不足？&lt;/li&gt;
&lt;li&gt;谈学校课程和实习时间安排。&lt;/li&gt;
&lt;li&gt;谈工资与住宿补助。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;腾讯前端面经&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;时间：2016年 4月25号（一面）、4月26号（二面）&lt;/em&gt;
&lt;em&gt;地点：重庆沙坪坝区天陈路15号丽苑大酒店16楼黄桷厅&lt;/em&gt;&lt;/p&gt;
&lt;h3&gt;【一面】&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;自我介绍&lt;/li&gt;
&lt;li&gt;收获最多的项目是哪个？有哪些收获？&lt;/li&gt;
&lt;li&gt;做项目时候对项目整体感的思考有哪些？&lt;/li&gt;
&lt;li&gt;在我的项目中，快速迭代的软件开发模式，迭代1和迭代2的项目规划分别是什么？&lt;/li&gt;
&lt;li&gt;画一下网站架构（我的一个项目），这个架构的优化。&lt;/li&gt;
&lt;li&gt;前端性能优化(资源加载角度，代码优化角度，浏览器内存角度，雪碧图，针对移动端优化，css3硬件加速原理)&lt;/li&gt;
&lt;li&gt;三栏布局的实现方式？（float布局优缺点，display:inline-block优缺点;圣杯布局优缺点，双飞翼布局优缺点）&lt;/li&gt;
&lt;li&gt;响应式图片如何实现？获取设备宽度或者dpr编写JavaScript替换图片路径&lt;/li&gt;
&lt;li&gt;JavaScript内存回收与泄露问题？&lt;/li&gt;
&lt;li&gt;JavaScript鼠标点击事件如何优化？(事件冒泡与事件委托)&lt;/li&gt;
&lt;li&gt;低版本IE浏览器兼容性遇到哪些问题，如何解决的？&lt;/li&gt;
&lt;li&gt;nodejs的了解，和php比较后端性能&lt;/li&gt;
&lt;li&gt;javascript作用域链怎么理解？&lt;/li&gt;
&lt;li&gt;JavaScript闭包是怎样实现的？闭包对性能的影响？&lt;/li&gt;
&lt;li&gt;JavaScript块级作用域怎么理解？&lt;/li&gt;
&lt;li&gt;有6个div，鼠标拖动交换两个div的位置，写一下数据结构，用json怎么表示？&lt;/li&gt;
&lt;li&gt;性格对代码有哪些方面的追求，是差不多就行还是要追求极致？&lt;/li&gt;
&lt;li&gt;平时总结分享的方式？（搭建个人博客，维护西大IT技术论坛）&lt;/li&gt;
&lt;li&gt;对UI设计的经验，几种常用图像格式的联系，优缺点与适用环境？&lt;/li&gt;
&lt;li&gt;组织管理与创新精神的理解？&lt;/li&gt;
&lt;li&gt;给你个机会问我一个问题？&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;【二面】&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;自我介绍&lt;/li&gt;
&lt;li&gt;项目经历&lt;/li&gt;
&lt;li&gt;为什么从 JAVA 转到 UI 与前端开发？&lt;/li&gt;
&lt;li&gt;有哪几种跨域方式？（我答的html标签src属性跨域，Ajax，JSONP，comet）&lt;/li&gt;
&lt;li&gt;说一下ajax的使用方式？什么时候适用ajax（异步刷新，搜索框下列表，上传表单，上传图像即时预览）&lt;/li&gt;
&lt;li&gt;能不能给跨域下个定义？什么才叫跨域？跨端口叫不叫跨域？(&lt;a href=&quot;http://www.cnblogs.com/rainman/archive/2011/02/20/1959325.html&quot;&gt;http://www.cnblogs.com/rainman/archive/2011/02/20/1959325.html&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;跨域会遇到哪些问题？弊端？跨域既然那么好用，我所有资源都跨域可以不可以？（这里我举了个利用http请求referer属性值防盗链的例子，并不会更多了）&lt;/li&gt;
&lt;li&gt;浏览器访问网址到呈现的过程，能想出多少说多少？&lt;/li&gt;
&lt;li&gt;上面的过程，所有过程进行优化，应该怎样优化？&lt;/li&gt;
&lt;li&gt;TCP/IP协议叙述一下，分为哪几层？如何优化TCP/IP协议？&lt;/li&gt;
&lt;li&gt;TCP和UDP的区别，分别适用于哪种场景？&lt;/li&gt;
&lt;li&gt;http协议有什么理解？&lt;/li&gt;
&lt;li&gt;平时使用什么后端语言？&lt;/li&gt;
&lt;li&gt;bootstrap理解多少？（这道题我最熟悉，说了十分钟，从引用方式、兼容性、响应式WEB设计、移动设备优先、234版本区别和联系、css组件、javascript插件、字体图标、LESS与SASS编译角度分别阐述）&lt;/li&gt;
&lt;li&gt;创新精神的理解？（举了我在学生会写“密室装机大赛”策划书的过程，面试官表示很有兴趣）&lt;/li&gt;
&lt;li&gt;最后一个问题：你有什么问题想问我吗？&lt;/li&gt;
&lt;li&gt;【我】您觉得对于前端开发来说，TCP/IP协议、HTTP协议、数据结构和算法分别应该掌握到什么程度？
【面试官】：TCP/IP协议了解就好，HTTP协议建议深入了解一下，毕竟WEB开发和HTTP协议息息相关。数据结构和算法掌握基础就够了，实际前端开发中用到的算法不多，很少，学习算法重要的还是锻炼逻辑思考能力。&lt;/li&gt;
&lt;li&gt;【我】：还有一个问题，您对前端未来三年的发展前景怎么看，未来前端会是什么样子？
【面试官】：还是很有潜力的行业，JS的框架和库特别多，以前人们都用原生js开发，后来有了jquery，逐渐向框架迈进，后来开发的人多了，框架越来越多了，近几年新的框架越来越多。前端MVC、MVVM框架也出现了，说明做前端的人们开始思考一些问题，拿出了一些解决方案。我个人觉得未来的整个WEB开发会从现在的前后端分离，逐渐走向大一统状态，前后端走向融合。包括现在的ES6、ES7对于语言本身功能方面的思考也越来越多，还是很有发展潜力的。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;腾讯、网易面试总结&lt;/h2&gt;
&lt;p&gt;经过网易三轮面试、腾讯两轮面试，我也有了一些经验，在此分享：&lt;/p&gt;
&lt;p&gt;面试的技术是一方面，表达沟通能力真的很重要！一般在面试最开始的时候会要求做自我介绍，这是在给我们机会阐述我们自己擅长的技术领域，从而给面试官一个轮廓，以便让面试官根据这些领域问我们问题。&lt;/p&gt;
&lt;p&gt;有质量的技术面试是双方良好沟通的结果，我们引导面试官发现我们所擅长的技术领域，面试官引导我们将正在讲的技术深入挖掘，全部说出来，直到说完为止。我们和面试官互相引导，才能将我们所有的技术领域都阐述出来并且阐述清楚，这是最完美的解果。&lt;/p&gt;
&lt;p&gt;如果不善言辞且紧张的话，无法引导面试官发现我们擅长的东西，当我们思路断掉的时候，不知道接下来说什么，面试官也不知道问什么合适，只能挑一些问题来问，这些问题就未必是我们所了解掌握的了，非常容易答不上来，从而陷入尴尬，草草结束面试。&lt;/p&gt;</content:encoded></item><item><title><![CDATA[HTML5 移动应用开发]]></title><description><![CDATA[本文分为两部分：第一部分是一次小演讲的PPT，介绍HTML5 APP开发。第二部分是我之前做的基于APICloud平台的两个APP部署及开发案例（思路）。 一、一次演讲 时间：2015年12月28日
地点：西南大学图书馆研修室 这是第11期西大IT…]]></description><link>https://dwb1994.github.io/blog/h5-develop/</link><guid isPermaLink="false">https://dwb1994.github.io/blog/h5-develop/</guid><pubDate>Mon, 01 Feb 2016 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;本文分为两部分：第一部分是一次小演讲的PPT，介绍HTML5 APP开发。第二部分是我之前做的基于APICloud平台的两个APP部署及开发案例（思路）。&lt;/p&gt;
&lt;h2&gt;一、一次演讲&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;时间：2015年12月28日&lt;/em&gt;
&lt;em&gt;地点：西南大学图书馆研修室&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;这是第11期西大IT技术沙龙的一次演讲，这个技术沙龙刚起步，没多少人来听但会坚持下去成为常规活动进行，采用二进制技术，第11期也就是第三期。&lt;/p&gt;
&lt;p&gt;本次技术沙龙由于另两位同学都有一些APP开发经验，我实际上没有开发过APP，只是接触过HTML5的混合开发模式，所以我抛砖引玉，先讲了一下这一块。&lt;/p&gt;
&lt;p&gt;现在的HTML5开发主要有两种形式：一种是在APP表层嵌入一个webview，这个webview实际上是访问了一个html页面，这种方式有的需要联网发起http请求，也有在本地可以访问的html。通过这种形式，用户看到的界面不是原生模块，动画效果一般不如原生模块的效果流畅，目前一般只能实现简单的点击、侧滑等等一些基础动画，流畅度可能比较高，但是如果开发的是游戏等复杂度较高的动画的时候，动画效果相对于原生来说会更不流畅。&lt;/p&gt;
&lt;p&gt;另一种形式是交叉编译，把javascript代码编译成JAVA/OC语言的代码，这个编译过程一般来说用户看不到。本文第二部分的APICloud平台实际上是在云端编译，编译后的代码实际上是原生应用。这样开发出来的效果是和原生应用一样流畅的。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/img/others/%E5%B9%BB%E7%81%AF%E7%89%8718.jpg&quot;&gt;
&lt;img src=&quot;/img/others/%E5%B9%BB%E7%81%AF%E7%89%8731.jpg&quot;&gt;&lt;/p&gt;
&lt;p&gt;这张纵向对比图展示了原生应用、混合开发应用与Web APP的区别和联系。后来王宇学长说，现在的开发一般都是原生开发融入进Hybrid的模块，只是融入多少的问题，目前这一块有其显著的优势，就是开发速度快，非常节约开发成本，尤其在做一些展示内容及“一次性”内容（即使用周期短的内容，如很多软件的推送页，这样的页面一般使用周期只有一次，不会涉及复杂的交互）的时候非常合适，而且基本不会影响用户体验。所以原生开发与混合开发的界限不是很清晰，严格意义上来说只有完全不使用Hybrid模块的APP才可以说是原生应用。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/img/others/%E5%B9%BB%E7%81%AF%E7%89%8721.jpg&quot;&gt;&lt;/p&gt;
&lt;p&gt;我们分为五块来讲：Web APP（Web应用）、Hybrid APP（混合应用）、Native APP（原生应用）、Json数据格式介绍以及一些题外话。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/img/others/%E5%B9%BB%E7%81%AF%E7%89%8751.jpg&quot;&gt;
&lt;img src=&quot;/img/others/%E5%B9%BB%E7%81%AF%E7%89%8741.jpg&quot;&gt;
&lt;img src=&quot;/img/others/%E5%B9%BB%E7%81%AF%E7%89%8761.jpg&quot;&gt;&lt;/p&gt;
&lt;p&gt;根据上面的展示页面可以看到Web应用的优缺点，其实Web APP就是一个Web页面，通过浏览器就可以访问得到，也可以打包成手机本地的APP，但是访问此APP的时候必须要联网，这两种访问方式都可以叫Web APP。浏览器的Web页面一般我们叫“单页应用”【知乎问题：单页应用有哪些优缺点？】&lt;/p&gt;
&lt;p&gt;那么Web APP和正常的Web页面有什么区别？或者说什么样的Web页面可以叫单页应用？这个界限又是很模糊，个人认为一般来说能实现与服务器进行数据交互的Web页面都可以叫Web应用，由于Web页面的特性，一般不会有很多菜单、二级甚至三级页面，所以这样的Web应用一般是广义上的单页即可完成，所有的服务器绑定的数据都展示在这个单页（不要拘泥于它是不是真的只有一页 = =）。&lt;/p&gt;
&lt;p&gt;将一个Web APP由浏览器访问的页面打包成本地可以打开的APP，这种操作有很多的实现形式，不难，在这里不做详细介绍，后面的APICloud会提到其中的一种很简单的方式。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/img/others/%E5%B9%BB%E7%81%AF%E7%89%8781.jpg&quot;&gt;&lt;/p&gt;
&lt;p&gt;这里介绍的三种工具我只使用过后两种，两个都比较容易上手，相对来说APICloud社区更完善一些，所以我使用了这个。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/img/others/%E5%B9%BB%E7%81%AF%E7%89%8771.jpg&quot;&gt;&lt;/p&gt;
&lt;p&gt;这里是说Web APP与Native APP的一个很重要的区别：&lt;/p&gt;
&lt;p&gt;通过浏览器访问的Web APP上下各要有其他信息栏，上面是浏览器的标签栏，可能也要有地址栏，下面是APP（浏览器）的导航菜单，其下面可能还有手机自带的虚拟导航菜单，因此真正的应用被挤得只剩中间的一小块。其UI美化、拖拽动画等都不如原生的漂亮和流畅，体验要差很多。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/img/others/%E5%B9%BB%E7%81%AF%E7%89%8791.jpg&quot;&gt;
&lt;img src=&quot;/img/others/%E5%B9%BB%E7%81%AF%E7%89%87101.jpg&quot;&gt;&lt;/p&gt;
&lt;p&gt;APICloud提供了很多的页面框架，在新建文件的时候可以选择几种基本的页面结构，建立好项目后随时可以使用页面框架，这里选择的页面框架有二十多种，种类很多，基本我能想到的APP的界面布局均涵盖于其中。&lt;/p&gt;
&lt;p&gt;APICloud项目的每个页面文件都是html文件，这里的结构和正常的html网页文件的结构是完全一样的，也就是说使用WEB浏览器也可以打开，但是由于一些javascript代码是仅使用APICloud才可以编译成的APP代码，因此这些javascript代码对于WEB浏览器来说是无意义的，但是对于APP UI界面的调试，这一点是很方便的，有时候不必使用平台自带的APP调试工具，一般这些平台自带的工具或者手机系统虚拟机都很慢。&lt;/p&gt;
&lt;p&gt;同样因为都是html文件，对于WEB开发者转APP开发者是非常简便的，如果接触过Bootstrap之类的响应式框架，则可以立即上手APP UI布局。&lt;/p&gt;
&lt;p&gt;对于javascript代码，插入方式也很简单。APICloud官方提供了很多很多模块，大部分是免费的，当然也可以自己使用javascript代码或者原生代码编写自己的模块。官方提供的模块都包裹在apiready函数（也可以说是对象【javascript里函数也是一种对象】）里，使用的时候只需在javascript文件里写入apiready = function(){…}即可。&lt;/p&gt;
&lt;p&gt;apicloud模块一般都是键值对的形式，使用简便（键值对都有实例代码，只需修改自己所需的值）&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/img/others/%E5%B9%BB%E7%81%AF%E7%89%87111.jpg&quot;&gt;&lt;/p&gt;
&lt;p&gt;下面介绍的是原生开发。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/img/others/%E5%B9%BB%E7%81%AF%E7%89%87131.jpg&quot;&gt;&lt;/p&gt;
&lt;p&gt;把React Native（RN）归为原生开发，它本来就是原生开发，正如上一张图上的文字所说，它使用了“虚拟DOM”生成原生UI，所以它的UI不是webview，而是原生UI。在React Native的原生应用里是没有html和css代码的。了解React的同学会知道，React作为Web开发框架（View层）是使用javascript代码生成渲染的Web UI，渲染的一个个虚拟DOM节点。&lt;/p&gt;
&lt;p&gt;因此RN的开发难度相对于APICloud这样的混合开发模式相对来说难上手一点，但是其使用的是javascript（ECMAScript6）的代码，官方宣传它是“一次学习，到处编写”，而混合开发的理念是“一次编译，处处运行”。他们是有本质的区别的，混合开发可以编写一次javascript代码和html文件，同时生产安卓苹果甚至web端的应用，而RN编写一次javascript代码只能实现一种设备。&lt;/p&gt;
&lt;p&gt;其实并不是那么夸张，对于很多组件Android与ios是通用的，有一些组件对于不同手机系统的名称不同，因此对于简单的Native APP做一些修改即可在另一平台运行，但是绝不可能生存WEB页面，因为RN的组件只能编译成移动设备的java或oc代码，并不会编译成html文件。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/img/others/%E5%B9%BB%E7%81%AF%E7%89%87121.jpg&quot;&gt;
&lt;img src=&quot;/img/others/%E5%B9%BB%E7%81%AF%E7%89%87141.jpg&quot;&gt;&lt;/p&gt;
&lt;p&gt;这里介绍了React组件的生命周期，有兴趣的同学可以学一下React的入门课程，它把HTML页面当做一个个组件来渲染虚拟DOM节点，在浏览器审查页面元素是看不到数据的，这对于大量数据绑定的页面来说相对提高了其安全性，但同时降低了SEO搜索的排名，因此慎用，一般是大框架使用传统html结构，只在特定位置使用React组件，React组件对于大量数据更新的表格应用有很好的表现。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/img/others/%E5%B9%BB%E7%81%AF%E7%89%87151.jpg&quot;&gt;&lt;/p&gt;
&lt;p&gt;这是我使用RN写的Hello World程序，环境配置了两天，虚拟机运行出Hello World的时候心里高兴坏了！可以看到左下角的javascript代码是使用js对象设置的样式，而非css代码！&lt;/p&gt;
&lt;p&gt;右上角的javascript代码就是React渲染的一个组件“MovieTalk”，可以看到这里的DOM节点是View和Text，这两个DOM并非HTML里使用的节点。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/img/others/%E5%B9%BB%E7%81%AF%E7%89%87171.jpg&quot;&gt;&lt;/p&gt;
&lt;h2&gt;二、两个案例&lt;/h2&gt;
&lt;p&gt;为了完成这学期的人机界面学课程最后的实验，我开发了两个Demo，一个是“天地汇”新闻推送软件，另一个是一个拼图游戏。前者是自己做的练习，准备给好朋友的公司做个推广产品，后者是帮小马哥做的实验课作业。&lt;/p&gt;
&lt;p&gt;做完后我对后者更满意，前者的新闻推送并没有做完，只使用了Ajax的Get请求数据，并没有实现数据的上传，由于我不会编写后台脚本代码（不会后台脚本语言如php、jsp、asp那些，想过用nodejs写，不过也是没学深入，短时间内没做出来），如果实现了上传数据功能， 我就可以实现基本的APP管理后台，以一个Web站点的形式供用户使用，提交数据到web服务器上，然后在app内只需下拉刷新或重新进入软件即可访问到新添加的数据。&lt;/p&gt;
&lt;p&gt;而后者的拼图游戏则可以实现游戏的功能，至少所有按钮均可点击并有实际意义，它不需要联网。&lt;/p&gt;
&lt;h3&gt;1.“天地汇”新闻推送软件&lt;/h3&gt;
&lt;p&gt;扫描可以下载软件的试用版：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/img/others/QQ%E6%88%AA%E5%9B%BE20160201225511.jpg&quot;&gt;
&lt;img src=&quot;/img/others/QQ%E6%88%AA%E5%9B%BE20160201223815.jpg&quot;&gt;
&lt;img src=&quot;/img/others/%E5%9B%BE%E7%89%871%281%29.png&quot;&gt;
&lt;img src=&quot;/img/others/%E5%9B%BE%E7%89%872%281%29.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;界面如上，还算比较美观，借鉴了主流的新闻类应用的布局形式、展示图片的高宽比例、图文展示的字体大小及其比例。&lt;/p&gt;
&lt;p&gt;这里使用了js代码调用的ios原生控件，可控制顶栏字体颜色为白色：&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;api&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;setStatusBarStyle&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
style&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; ‘light’
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;在config.xml文件里可以设置其为“沉浸式”应用，即在应用里可以看到顶栏，并且顶栏和应用底色相同，这样可以感觉应用是属于ios系统的一部分，有强烈的归属感。&lt;/p&gt;
&lt;p&gt;这个APP整体框架使用了APICloud官方的openFrameGroup对象，这个应该是IOS系统的原生框架，我自己的index.html文件里html部分只有一个header，下面的页面跳转、打开及关闭都非常流畅，应该都归功于下面这个openFrameGroup对象，这样APP的页面跳转动画和ios系统的其他本地页面跳转形式是完全一样的，流畅度当然也一样，使用起来也非常简单：&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;api&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;openFrameGroup&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
name&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;home_group&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
background&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;rgb(255,255,255)&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
scrollEnabled&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
rect&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
x&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
y&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;offset&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;h&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
w&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;auto&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
h&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;auto&apos;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
index&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
preload&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
frames&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
name&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;frame_index_home&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
url&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;./html/frame_index_home.html&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
pageParam&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
bgColor&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;rgb(255,255,255)&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
bounces&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token boolean&quot;&gt;false&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
name&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;frame_index_generalize&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
url&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;./html/frame_index_generalize.html&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
pageParam&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
bgColor&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;rgb(255,255,255)&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
bounces&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token boolean&quot;&gt;false&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
name&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;frame_index_partTimeJob&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
url&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;./html/frame_index_partTimeJob.html&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
pageParam&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
bgColor&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;rgb(255,255,255)&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
bounces&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token boolean&quot;&gt;false&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
name&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;frame_index_getJob&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
url&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;./html/frame_index_getJob.html&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
pageParam&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
bgColor&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;rgb(255,255,255)&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
bounces&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token boolean&quot;&gt;false&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
name&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;frame_index_publicBenifit&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
url&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;./html/frame_index_publicBenifit.html&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
pageParam&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
bgColor&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;rgb(255,255,255)&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
bounces&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token boolean&quot;&gt;false&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这样设置后我只需要分别写这几个Frame页面的UI就可以了。&lt;/p&gt;
&lt;p&gt;在frame&lt;em&gt;index&lt;/em&gt;home.html文件里我使用了apicloud内置的api.ajax对象，实现了跨域访问web服务器的json数据：&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token function-variable function&quot;&gt;apiready&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
api&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;ajax&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
url&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;http://www.dwbbb.com/test.json&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
method&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;get&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
timeout&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;30&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
dataType&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;json&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
returnAll&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;

&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;token parameter&quot;&gt;ret&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; err&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt; ret &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; title &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;JSON&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;stringify&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt; ret&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;generalize&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;title&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token function&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;.ioio&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;html&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;title&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;token function&quot;&gt;alert&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;JSON&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;stringify&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt; err&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这里是把我自己写的一个简单的test.json文件上传到了阿里云虚拟主机的目录中，通过ajax跨域访问可以读取json文件中的字符串，通过js代码解析后提取指定json对象的属性值，并把该数据输出到class名为’.ioio’的html标签中。&lt;/p&gt;
&lt;p&gt;现在只能做到这步。get数据的话需要服务器后台脚本程序，茂茂给我写了一份php代码，但是我还没看懂怎么用= =。&lt;/p&gt;
&lt;h3&gt;2.拼图游戏&lt;/h3&gt;
&lt;p&gt;安卓用户扫描下载正式版：
&lt;img src=&quot;/img/others/download.png&quot;&gt;
iOS用户扫描下载试用版：
&lt;img src=&quot;/img/others/downlo2ad.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;由于我没有ios的开发者证书（100刀一年，平时不用没必要买）所以只能编译出安卓的正式版，现在下载的苹果应该过了7天有效期不能用了。在下面贴一些截图吧：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/img/others/QQ%E5%9B%BE%E7%89%8720160201230615.png&quot;&gt;
&lt;img src=&quot;/img/others/QQ%E5%9B%BE%E7%89%8720160201230619.jpg&quot;&gt;
&lt;img src=&quot;/img/others/QQ%E5%9B%BE%E7%89%8720160201230623.jpg&quot;&gt;
&lt;img src=&quot;/img/others/QQ%E5%9B%BE%E7%89%8720160201230626.png&quot;&gt;
可以看到这个游戏的界面还是比较漂亮的，毕竟我会ps = =。&lt;/p&gt;
&lt;p&gt;由于当时赶时间，所以这个游戏是纯纯的HTML5的Hybrid APP，完全是html、css、javascript代码，没有调用原生模块。这样的后果就是页面根本没有跳转，点击后页面是直接过去的，没有渐变或者滑动的动画，但是整个软件在人机交互的完整性来说是相对比较完整的。&lt;/p&gt;
&lt;p&gt;整个游戏通过两次点击可以交换两个图片的顺序，在拼图的时候系统自动统计用时和操作步数两个参数，再加上查看提示的次数可以生成最后的得分，得分算法如下：&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; score &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; Math&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;round&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;44000&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;.finalTime&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;html&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;48000&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;.stepTime&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;html&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;300&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;tipTime&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;整个游戏我改了一个网上的拼图例子，不过是大改，基本原来的方式改的面目全非，网上下载下来的是用鼠标点击拖动交换两个图片的位置，而我改成了鼠标点击交换图片位置，因为鼠标点击拖动的形式在手机上无法拖动，鼠标拖动它原来使用的是jqueryui的拖动事件，但这个函数在手机上无法使用（因为手机不应该有onmouseover事件，而应该是按住后选中之类的事件）。&lt;/p&gt;
&lt;p&gt;鼠标点击是我自己构思的思路：&lt;/p&gt;
&lt;p&gt;把两次点击的图片的data-value属性的值和style属性的值分别赋值给第三个值然后交换。&lt;/p&gt;
&lt;p&gt;代码如下：&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token function-variable function&quot;&gt;myClick&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;token function&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;li&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;click&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;token function&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;addClass&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;frontImg&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; front &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;attr&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;data-value&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; frontStyle &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;attr&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;style&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token function&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;li&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;click&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;token function&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;removeClass&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;frontImg&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token function&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;addClass&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;afterImg&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; after &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;attr&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;data-value&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; afterStyle &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;attr&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;style&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; tem &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; front&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
front &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; after&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
after &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; tem&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

tem &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; frontStyle&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
frontStyle &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; afterStyle&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
afterStyle &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; tem&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token function&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;attr&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;data-value&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; after&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token function&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;attr&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;style&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; afterStyle&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token function&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;.frontImg&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;attr&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;data-value&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; front&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token function&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;.frontImg&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;attr&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;style&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; frontStyle&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;token function&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;li&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;removeClass&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;frontImg&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token function&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;li&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;removeClass&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;afterImg&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token function&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;li&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;unbind&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;click&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

currentList &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;li&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;i&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; el&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;el&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;attr&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;data-value&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

sumStep&lt;span class=&quot;token operator&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token function&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;.stepTime&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;html&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;sumStep&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;isSorted&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;currentList&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;token function&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;.finalTime&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;html&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;.usedTime&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;html&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; score &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; Math&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;round&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;44000&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;.finalTime&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;html&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;48000&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;.stepTime&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;html&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;300&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;tipTime&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token function&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;.score&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;html&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;score&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token function&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;#actualImageBox&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;empty&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;html&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;#gameOver&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;html&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token function&quot;&gt;alert&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;恭喜!完成拼图!&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token function&quot;&gt;clearTimeout&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;t&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

imagePuzzle&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;myClick&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;整体游戏的思路是：&lt;/p&gt;
&lt;p&gt;图片是完整的图片，使用css的position属性可以把图片分区域显示，通过ul_li标签可以构建一个4*4的表格，在这16个表格里分别显示一块图形，并且显示顺序是随机的，这16个li标签及其data-value和style的属性都是通过javascript代码生成。（既然可以生成就可以赋值给我自己定义的变量并进行数值操作），另一个函数可以执行鼠标点击操作，交换两次点击图片的data-value值和style值，交换data-value是为了比较图片顺序是否是正确的顺序，而style值是将两个图片样式交换，在用户看来是交换了图片，在后台来看是交换了li的data-value值。&lt;/p&gt;
&lt;p&gt;最后比较16个li的data-value值是否是正常的顺序，正确则结束，得出分数。&lt;/p&gt;
&lt;p&gt;这个游戏目前存在一些缺陷：&lt;/p&gt;
&lt;p&gt;1.游戏逻辑不够好，一般这样的拼图游戏是相邻的两个图形交换，或者做成华容道那样有一个位置是空缺的，然后只有空缺的相邻位置可以被点击并移动。&lt;/p&gt;
&lt;p&gt;2.游戏没有实现排行榜，不过这个应该不难，可以使用一个本地json文件存储数据，接下来我会实现。&lt;/p&gt;
&lt;p&gt;3.后台js代码使用的是鼠标的click()事件，这个事件在web端是瞬间完成的，不会有延时感，但是手机在处理这个事件的时候会自动解释为“延时300ms才确认点击事件”，这就造成了移动端进行游戏的时候手要慢点点击，最少300ms间隔。（后来查到了，延时300ms是为了防止移动端的click误操作，比如避免本来是人们想进行滑动事件结果被解释为点击事件的现象。）这样的延时是有必要的，但是可以通过代码避免。&lt;/p&gt;
&lt;p&gt;两个APP都较多地使用了jquery的css()方法来进行一些按钮或图标的定位：&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token function&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;#btns&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;css&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token string&quot;&gt;&quot;position&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;absolute&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token string&quot;&gt;&quot;top&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;25%&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token string&quot;&gt;&quot;width&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;100%&quot;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token function&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;#start&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;css&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token string&quot;&gt;&quot;background&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;url(images/start.png)&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token string&quot;&gt;&quot;background-size&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;100% auto&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token string&quot;&gt;&quot;width&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;35%&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token string&quot;&gt;&quot;height&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; btnHeight&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token string&quot;&gt;&quot;position&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;absolute&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token string&quot;&gt;&quot;left&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;13%&quot;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这样的定位更精确，本来已经导入jquery包了，不用白不用，单凭css定位比较麻烦而且不准确，兼容性不好。&lt;/p&gt;
&lt;h2&gt;最后总结一下（个人观点）：&lt;/h2&gt;
&lt;p&gt;不要忽视弱技术，技术上遵循二八定律，20%的产品使用高技术，80%低技术，低技术同样拥有广阔的市场和同样高的利润空间，在进行软件开发的时候不要好高骛远，一味追求程序的完美而忽略开发周期和开发难度。现在的APP开发也是要将好钢用在刀刃上，把逻辑简单、使用周期短的部分写成webview，不要忽视HTML5的跨平台性。&lt;/p&gt;
&lt;p&gt;为什么javascript语言会成为目前最火的程序语言，并且是唯一一个全栈开发语言？（javascript可以做web前端脚本，Flash脚本，javascript web MVC框架，nodejs服务器脚本，开发移动应用和桌面客户端应用）因为它简单易学，最开始javascript是为非程序员服务的编程语言，在互联网WEB开发的十年中，互联网行业产生了数量相当可观的javascript程序员，现在它的标准和发展也是进步很快的，ECMAScript6 开始一年一迭代。&lt;/p&gt;
&lt;p&gt;看到Python的火热又可见二斑：以后的程序设计语言将越来越脚本化、简单化，甚至通过交叉编译的形式使用一种脚本语言来实现复杂的另一语言的逻辑。程序不可能过于平民化，毕竟其难度比较高的逻辑能力不适用于使用自然语言实现，因此编程脚本化将是大趋势，符合快速发展的编程需求。&lt;/p&gt;</content:encoded></item><item><title><![CDATA[判天地之美 析万物之理]]></title><description><![CDATA[…]]></description><link>https://dwb1994.github.io/blog/physics/</link><guid isPermaLink="false">https://dwb1994.github.io/blog/physics/</guid><pubDate>Wed, 11 Nov 2015 00:00:00 GMT</pubDate><content:encoded>&lt;h2&gt;一&lt;/h2&gt;
&lt;p&gt;我最开始看到这句话，是在高中物理必修一的第一页上，印象非常深刻，当时看到感到这句话非常大气，万物之理又寓意着“物理”，看到这句话时简直心潮澎湃，就好像看到了万物的美好，物理的瑰丽。&lt;/p&gt;
&lt;p&gt;直到最近在阅读《庄子》的时候，才发现这句话实际上是谬误理解，本意应为“割裂天地的完美，离析万物的道理”与我原来的理解完全相反，至此感到非常震撼和羞愧。于是我搜索了相关资料，发现确实大家的理解都是错误的。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/img/others/W020100827536594736599.jpg&quot;&gt;
&lt;img src=&quot;/img/others/W020110712351770832730.jpg&quot;&gt;&lt;/p&gt;
&lt;p&gt;首先，这句话出现在《庄子·天下》篇，这篇的主旨是表达他对天下（当时社会）的道术和学术的一些看法，这个看法大体上是各学说各执一词，有时诡辩，有时偏激，这样只会越走越远，越背离“道”的本质。&lt;/p&gt;
&lt;p&gt;我们结合上下文分析：&lt;/p&gt;
&lt;p&gt;原文是：【天下大乱，贤圣不明，道德不一。天下多得一察焉以自好。譬如耳目鼻口，皆有所明，不能相通。犹百家众技也，皆有所长，时有所用。虽然，不该不遍，一曲之士也。判天地之美，析万物之理，察古人之全。寡能备于天地之美，称神明之容。是故内圣外王之道，暗而不明，郁而不发，天下之人各为其所欲焉以自为方。悲夫！百家往而不反，必不合矣！后世之学者，不幸不见天地之纯，古人之大体。道术将为天下裂。】&lt;/p&gt;
&lt;p&gt;意译为天下很乱，道德标准多种多样，很多人得到了一孔之见就自认为很得意，百家对于道德的观点各有所长，但都只能是“一曲之士”。割裂天地的完美，离析万物之理，把古人完美的道德弄得支离破碎，（这样的人）很少能具备天地之美，相称于神明之容。因此内圣外王之道晦暗不明朗，抑郁而不发挥，天下的人都以自己所想的作为方术。太可悲了！百家各行其道不回头，必定不会相合！后世的学者不幸啊，不能见到天地的纯粹和古人的全貌，道术将被天下割裂！&lt;/p&gt;
&lt;p&gt;可见，这段话前面都是在形容百家学说的相互离散，是为了论证最后的论点：“道术将为天下裂”。因此这样理解是正确的。&lt;/p&gt;
&lt;p&gt;然而我在网络上搜索相关的信息，搜索判天地之美析万物之理，却发现所有的理解都是正面的，我粘贴几个链接：&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.wlqlw.com/Item/351.aspx&quot;&gt;http://www.wlqlw.com/Item/351.aspx&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://blog.163.com/liu_yuhua/blog/static/94598724201018010455/&quot;&gt;http://blog.163.com/liu_yuhua/blog/static/94598724201018010455/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.zybang.com/question/ce1a7fba092f43ba07a1e65512ede933.html&quot;&gt;http://www.zybang.com/question/ce1a7fba092f43ba07a1e65512ede933.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;前诺贝尔奖得主、日本著名物理学家汤川秀树，在他的一本物理书的扉页上，写着庄子的一句名言作为题记：判天地之美，析万物之理。&lt;/p&gt;
&lt;p&gt;多少中学生的心灵鸡汤还一遍遍重复这一谬误，这样的美文真适合这个年纪的人吐露他们的远大志向啊~&lt;/p&gt;
&lt;p&gt;断章取义，真不应该。&lt;/p&gt;
&lt;h2&gt;二&lt;/h2&gt;
&lt;p&gt;中学时候有篇文章，叫鱼我所欲也，其中有句话，“呼尔而与之，行道之人弗受，蹴尔而与之，乞人不屑也”，当时课文的翻译是“路过的人不接受”，我就在想，为什么不是“奉行‘道’的人不会接受”呢？我觉得我的理解也可以说得通，但是结合上下文，照应下文的“乞人”来说，翻译为路过，文章对仗更工整。&lt;/p&gt;
&lt;h2&gt;三&lt;/h2&gt;
&lt;p&gt;上面的例子还是都能说得通的情况，至少原文是固定的。后来我在网上看到一些文章，是说“人不为己天诛地灭”，&lt;/p&gt;
&lt;p&gt;各位可以在百度百科上查一下，现在还是这样的解释：&lt;/p&gt;
&lt;p&gt;【正义】君子应曰：人之初如玉璞，玉不琢不成器。有德有才是精品，有德无才是次品，无德无才是无品，有才无德是危险品。关键的关键，紧要的要紧：“人如果不先自己修身，那么就会为天地所不容”。&lt;/p&gt;
&lt;p&gt;下面的解释长篇大论，看似证据很充分。我第一次看到这个百度百科的解释的时候也信以为真，还恍然大悟，觉得自己以前理解的人不为己那种自私的小人之态真是不应该，这句话好像被大众曲解了。后来在知乎上看到了很多人细致地查阅古籍原文，确实这句话没有出处，要说出自哪里，只能说出自民谚了。人们为了一句民谚争执不休。但是民谚的本意是自私利己的意思，古籍里面的修为的意思，都是两三字而已，尚未形成“人不为己天诛地灭”的俗语。&lt;/p&gt;
&lt;p&gt;有一次在学生会的例会上，我还给干事讲过这个解释，将修为解释为正解，现在想来真是愧疚。&lt;/p&gt;
&lt;h2&gt;四&lt;/h2&gt;
&lt;p&gt;一直以来我比较喜欢古文的精炼，往往很少的字能表达复杂的含义，给人一种沉稳、干练(NB)的感觉，直达目的，没有废话。&lt;/p&gt;
&lt;p&gt;这很像现在的扁平化设计风格：去掉冗余的装饰效果，抽象、极简。缺点是很致命的，需要高学习成本，传达情感不丰富，甚至过于冰冷。&lt;/p&gt;
&lt;p&gt;如果说话也这么说，就会令别人难以理解，误解曲解会经常发生，说话晦涩也容易使人反感。&lt;/p&gt;
&lt;p&gt;说不好就成了东施效颦了。&lt;/p&gt;</content:encoded></item></channel></rss>